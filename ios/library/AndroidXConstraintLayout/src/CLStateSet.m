//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\widget\CLStateSet.java
//

#include "CLStateSet.h"
#include "ConstraintsChangedListener.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "java/lang/Float.h"
#include "java/util/ArrayList.h"


@interface ADXCLStateSet () {
 @public
  ADSparseArray *mStateList_;
  ADXConstraintsChangedListener *mConstraintsChangedListener_;
}

@end

J2OBJC_FIELD_SETTER(ADXCLStateSet, mStateList_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADXCLStateSet, mConstraintsChangedListener_, ADXConstraintsChangedListener *)

inline jboolean ADXCLStateSet_get_DEBUG(void);
#define ADXCLStateSet_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXCLStateSet, DEBUG, jboolean)

NSString *ADXCLStateSet_TAG = @"ConstraintLayoutStates";

@implementation ADXCLStateSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCLStateSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)needsToChangeWithInt:(jint)id_
                       withFloat:(jfloat)width
                       withFloat:(jfloat)height {
  if (mCurrentStateId_ != id_) {
    return true;
  }
  ADXCLStateSet_State *state = (id_ == -1) ? [((ADSparseArray *) nil_chk(mStateList_)) valueAtWithInt:0] : [((ADSparseArray *) nil_chk(mStateList_)) getWithInt:mCurrentStateId_];
  if (mCurrentConstraintNumber_ != -1) {
    if ([((ADXCLStateSet_Variant *) nil_chk([((JavaUtilArrayList *) nil_chk(state->mVariants_)) getWithInt:mCurrentConstraintNumber_])) matchWithFloat:width withFloat:height]) {
      return false;
    }
  }
  if (mCurrentConstraintNumber_ == [state findMatchWithFloat:width withFloat:height]) {
    return false;
  }
  return true;
}

- (void)setOnConstraintsChangedWithADXConstraintsChangedListener:(ADXConstraintsChangedListener *)constraintsChangedListener {
  JreStrongAssign(&self->mConstraintsChangedListener_, constraintsChangedListener);
}

- (jint)stateGetConstraintIDWithInt:(jint)id_
                            withInt:(jint)width
                            withInt:(jint)height {
  return [self updateConstraintsWithInt:-1 withInt:id_ withFloat:width withFloat:height];
}

- (jint)convertToConstraintSetWithInt:(jint)currentConstrainSettId
                              withInt:(jint)stateId
                            withFloat:(jfloat)width
                            withFloat:(jfloat)height {
  ADXCLStateSet_State *state = JreRetainedLocalValue([((ADSparseArray *) nil_chk(mStateList_)) getWithInt:stateId]);
  if (state == nil) {
    return stateId;
  }
  if (width == -1 || height == -1) {
    if (state->mConstraintID_ == currentConstrainSettId) {
      return currentConstrainSettId;
    }
    for (ADXCLStateSet_Variant * __strong mVariant in nil_chk(state->mVariants_)) {
      if (currentConstrainSettId == ((ADXCLStateSet_Variant *) nil_chk(mVariant))->mConstraintID_) {
        return currentConstrainSettId;
      }
    }
    return state->mConstraintID_;
  }
  else {
    ADXCLStateSet_Variant *match = nil;
    for (ADXCLStateSet_Variant * __strong mVariant in nil_chk(state->mVariants_)) {
      if ([((ADXCLStateSet_Variant *) nil_chk(mVariant)) matchWithFloat:width withFloat:height]) {
        if (currentConstrainSettId == mVariant->mConstraintID_) {
          return currentConstrainSettId;
        }
        match = mVariant;
      }
    }
    if (match != nil) {
      return match->mConstraintID_;
    }
    return state->mConstraintID_;
  }
}

- (jint)updateConstraintsWithInt:(jint)currentId
                         withInt:(jint)id_
                       withFloat:(jfloat)width
                       withFloat:(jfloat)height {
  if (currentId == id_) {
    ADXCLStateSet_State *state;
    if (id_ == -1) {
      state = [((ADSparseArray *) nil_chk(mStateList_)) valueAtWithInt:0];
    }
    else {
      state = [((ADSparseArray *) nil_chk(mStateList_)) getWithInt:mCurrentStateId_];
    }
    if (state == nil) {
      return -1;
    }
    if (mCurrentConstraintNumber_ != -1) {
      if ([((ADXCLStateSet_Variant *) nil_chk([((JavaUtilArrayList *) nil_chk(state->mVariants_)) getWithInt:currentId])) matchWithFloat:width withFloat:height]) {
        return currentId;
      }
    }
    jint match = [state findMatchWithFloat:width withFloat:height];
    if (currentId == match) {
      return currentId;
    }
    return (match == -1) ? state->mConstraintID_ : ((ADXCLStateSet_Variant *) nil_chk([((JavaUtilArrayList *) nil_chk(state->mVariants_)) getWithInt:match]))->mConstraintID_;
  }
  else {
    ADXCLStateSet_State *state = JreRetainedLocalValue([((ADSparseArray *) nil_chk(mStateList_)) getWithInt:id_]);
    if (state == nil) {
      return -1;
    }
    jint match = [state findMatchWithFloat:width withFloat:height];
    return (match == -1) ? state->mConstraintID_ : ((ADXCLStateSet_Variant *) nil_chk([((JavaUtilArrayList *) nil_chk(state->mVariants_)) getWithInt:match]))->mConstraintID_;
  }
}

- (void)dealloc {
  RELEASE_(mStateList_);
  RELEASE_(mConstraintsChangedListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(needsToChangeWithInt:withFloat:withFloat:);
  methods[2].selector = @selector(setOnConstraintsChangedWithADXConstraintsChangedListener:);
  methods[3].selector = @selector(stateGetConstraintIDWithInt:withInt:withInt:);
  methods[4].selector = @selector(convertToConstraintSetWithInt:withInt:withFloat:withFloat:);
  methods[5].selector = @selector(updateConstraintsWithInt:withInt:withFloat:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXCLStateSet_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "mDefaultState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentStateId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentConstraintNumber_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mStateList_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "mConstraintsChangedListener_", "LADXConstraintsChangedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "needsToChange", "IFF", "setOnConstraintsChanged", "LADXConstraintsChangedListener;", "stateGetConstraintID", "III", "convertToConstraintSet", "IIFF", "updateConstraints", &ADXCLStateSet_TAG, "Lr/android/util/SparseArray<Landroidx/constraintlayout/widget/CLStateSet$State;>;", "LADXCLStateSet_State;LADXCLStateSet_Variant;" };
  static const J2ObjcClassInfo _ADXCLStateSet = { "CLStateSet", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, 11, -1, -1, -1 };
  return &_ADXCLStateSet;
}

@end

void ADXCLStateSet_init(ADXCLStateSet *self) {
  NSObject_init(self);
  self->mDefaultState_ = -1;
  self->mCurrentStateId_ = -1;
  self->mCurrentConstraintNumber_ = -1;
  JreStrongAssignAndConsume(&self->mStateList_, new_ADSparseArray_init());
  JreStrongAssign(&self->mConstraintsChangedListener_, nil);
}

ADXCLStateSet *new_ADXCLStateSet_init() {
  J2OBJC_NEW_IMPL(ADXCLStateSet, init)
}

ADXCLStateSet *create_ADXCLStateSet_init() {
  J2OBJC_CREATE_IMPL(ADXCLStateSet, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLStateSet)

@implementation ADXCLStateSet_State

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCLStateSet_State_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithADXCLStateSet_Variant:(ADXCLStateSet_Variant *)size {
  [((JavaUtilArrayList *) nil_chk(mVariants_)) addWithId:size];
}

- (jint)findMatchWithFloat:(jfloat)width
                 withFloat:(jfloat)height {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mVariants_)) size]; i++) {
    if ([((ADXCLStateSet_Variant *) nil_chk([((JavaUtilArrayList *) nil_chk(mVariants_)) getWithInt:i])) matchWithFloat:width withFloat:height]) {
      return i;
    }
  }
  return -1;
}

- (void)dealloc {
  RELEASE_(mVariants_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithADXCLStateSet_Variant:);
  methods[2].selector = @selector(findMatchWithFloat:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVariants_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "mConstraintID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIsLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LADXCLStateSet_Variant;", "findMatch", "FF", "Ljava/util/ArrayList<Landroidx/constraintlayout/widget/CLStateSet$Variant;>;", "LADXCLStateSet;" };
  static const J2ObjcClassInfo _ADXCLStateSet_State = { "State", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x8, 3, 4, 5, -1, -1, -1, -1 };
  return &_ADXCLStateSet_State;
}

@end

void ADXCLStateSet_State_init(ADXCLStateSet_State *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mVariants_, new_JavaUtilArrayList_init());
  self->mConstraintID_ = -1;
  self->mIsLayout_ = false;
}

ADXCLStateSet_State *new_ADXCLStateSet_State_init() {
  J2OBJC_NEW_IMPL(ADXCLStateSet_State, init)
}

ADXCLStateSet_State *create_ADXCLStateSet_State_init() {
  J2OBJC_CREATE_IMPL(ADXCLStateSet_State, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLStateSet_State)

@implementation ADXCLStateSet_Variant

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCLStateSet_Variant_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchWithFloat:(jfloat)widthDp
                 withFloat:(jfloat)heightDp {
  if (!JavaLangFloat_isNaNWithFloat_(mMinWidth_)) {
    if (widthDp < mMinWidth_) return false;
  }
  if (!JavaLangFloat_isNaNWithFloat_(mMinHeight_)) {
    if (heightDp < mMinHeight_) return false;
  }
  if (!JavaLangFloat_isNaNWithFloat_(mMaxWidth_)) {
    if (widthDp > mMaxWidth_) return false;
  }
  if (!JavaLangFloat_isNaNWithFloat_(mMaxHeight_)) {
    if (heightDp > mMaxHeight_) return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchWithFloat:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMinWidth_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMinHeight_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMaxWidth_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMaxHeight_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mConstraintID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIsLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "match", "FF", "LADXCLStateSet;" };
  static const J2ObjcClassInfo _ADXCLStateSet_Variant = { "Variant", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x8, 2, 7, 2, -1, -1, -1, -1 };
  return &_ADXCLStateSet_Variant;
}

@end

void ADXCLStateSet_Variant_init(ADXCLStateSet_Variant *self) {
  NSObject_init(self);
  self->mMinWidth_ = JavaLangFloat_NaN;
  self->mMinHeight_ = JavaLangFloat_NaN;
  self->mMaxWidth_ = JavaLangFloat_NaN;
  self->mMaxHeight_ = JavaLangFloat_NaN;
  self->mConstraintID_ = -1;
  self->mIsLayout_ = false;
}

ADXCLStateSet_Variant *new_ADXCLStateSet_Variant_init() {
  J2OBJC_NEW_IMPL(ADXCLStateSet_Variant, init)
}

ADXCLStateSet_Variant *create_ADXCLStateSet_Variant_init() {
  J2OBJC_CREATE_IMPL(ADXCLStateSet_Variant, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLStateSet_Variant)
