//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\KeyPosition.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AttributeSet.h"
#include "Context.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Key.h"
#include "KeyPosition.h"
#include "KeyPositionBase.h"
#include "RectF.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXKeyPosition () {
 @public
  float mCalculatedPositionX_;
  float mCalculatedPositionY_;
}

- (void)calcScreenPositionWithInt:(int32_t)layoutWidth
                          withInt:(int32_t)layoutHeight;

- (void)calcPathPositionWithFloat:(float)start_x
                        withFloat:(float)start_y
                        withFloat:(float)end_x
                        withFloat:(float)end_y;

- (void)calcCartesianPositionWithFloat:(float)start_x
                             withFloat:(float)start_y
                             withFloat:(float)end_x
                             withFloat:(float)end_y;

@end

inline NSString *ADXKeyPosition_get_TAG(void);
static NSString *ADXKeyPosition_TAG = @"KeyPosition";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyPosition, TAG, NSString *)

__attribute__((unused)) static void ADXKeyPosition_calcScreenPositionWithInt_withInt_(ADXKeyPosition *self, int32_t layoutWidth, int32_t layoutHeight);

__attribute__((unused)) static void ADXKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(ADXKeyPosition *self, float start_x, float start_y, float end_x, float end_y);

__attribute__((unused)) static void ADXKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(ADXKeyPosition *self, float start_x, float start_y, float end_x, float end_y);

@interface ADXKeyPosition_Loader : NSObject

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyPosition_Loader)

__attribute__((unused)) static void ADXKeyPosition_Loader_init(ADXKeyPosition_Loader *self);

__attribute__((unused)) static ADXKeyPosition_Loader *new_ADXKeyPosition_Loader_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyPosition_Loader *create_ADXKeyPosition_Loader_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXKeyPosition_Loader)


NSString *ADXKeyPosition_NAME = @"KeyPosition";
NSString *ADXKeyPosition_TRANSITION_EASING = @"transitionEasing";
NSString *ADXKeyPosition_DRAWPATH = @"drawPath";
NSString *ADXKeyPosition_PERCENT_WIDTH = @"percentWidth";
NSString *ADXKeyPosition_PERCENT_HEIGHT = @"percentHeight";
NSString *ADXKeyPosition_SIZE_PERCENT = @"sizePercent";
NSString *ADXKeyPosition_PERCENT_X = @"percentX";
NSString *ADXKeyPosition_PERCENT_Y = @"percentY";

@implementation ADXKeyPosition

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyPosition_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)load__WithADContext:(ADContext *)context
         withADAttributeSet:(ADAttributeSet *)attrs {
}

- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines {
}

- (void)setTypeWithInt:(int32_t)type {
  mPositionType_ = type;
}

- (void)calcPositionWithInt:(int32_t)layoutWidth
                    withInt:(int32_t)layoutHeight
                  withFloat:(float)start_x
                  withFloat:(float)start_y
                  withFloat:(float)end_x
                  withFloat:(float)end_y {
  switch (mPositionType_) {
    case ADXKeyPosition_TYPE_SCREEN:
    ADXKeyPosition_calcScreenPositionWithInt_withInt_(self, layoutWidth, layoutHeight);
    return;
    case ADXKeyPosition_TYPE_PATH:
    ADXKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
    return;
    case ADXKeyPosition_TYPE_CARTESIAN:
    default:
    ADXKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
    return;
  }
}

- (void)calcScreenPositionWithInt:(int32_t)layoutWidth
                          withInt:(int32_t)layoutHeight {
  ADXKeyPosition_calcScreenPositionWithInt_withInt_(self, layoutWidth, layoutHeight);
}

- (void)calcPathPositionWithFloat:(float)start_x
                        withFloat:(float)start_y
                        withFloat:(float)end_x
                        withFloat:(float)end_y {
  ADXKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
}

- (void)calcCartesianPositionWithFloat:(float)start_x
                             withFloat:(float)start_y
                             withFloat:(float)end_x
                             withFloat:(float)end_y {
  ADXKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
}

- (float)getPositionX {
  return mCalculatedPositionX_;
}

- (float)getPositionY {
  return mCalculatedPositionY_;
}

- (void)positionAttributesWithADView:(ADView *)view
                         withADRectF:(ADRectF *)start
                         withADRectF:(ADRectF *)end
                           withFloat:(float)x
                           withFloat:(float)y
                   withNSStringArray:(IOSObjectArray *)attribute
                      withFloatArray:(IOSFloatArray *)value {
  switch (mPositionType_) {
    case ADXKeyPosition_TYPE_PATH:
    [self positionPathAttributesWithADRectF:start withADRectF:end withFloat:x withFloat:y withNSStringArray:attribute withFloatArray:value];
    return;
    case ADXKeyPosition_TYPE_SCREEN:
    [self positionScreenAttributesWithADView:view withADRectF:start withADRectF:end withFloat:x withFloat:y withNSStringArray:attribute withFloatArray:value];
    return;
    case ADXKeyPosition_TYPE_CARTESIAN:
    default:
    [self positionCartAttributesWithADRectF:start withADRectF:end withFloat:x withFloat:y withNSStringArray:attribute withFloatArray:value];
    return;
  }
}

- (void)positionPathAttributesWithADRectF:(ADRectF *)start
                              withADRectF:(ADRectF *)end
                                withFloat:(float)x
                                withFloat:(float)y
                        withNSStringArray:(IOSObjectArray *)attribute
                           withFloatArray:(IOSFloatArray *)value {
  float startCenterX = [((ADRectF *) nil_chk(start)) centerX];
  float startCenterY = [start centerY];
  float endCenterX = [((ADRectF *) nil_chk(end)) centerX];
  float endCenterY = [end centerY];
  float pathVectorX = endCenterX - startCenterX;
  float pathVectorY = endCenterY - startCenterY;
  float distance = (float) JavaLangMath_hypotWithDouble_withDouble_(pathVectorX, pathVectorY);
  if (distance < 0.0001) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"distance ~ 0"];
    *IOSFloatArray_GetRef(nil_chk(value), 0) = 0;
    *IOSFloatArray_GetRef(value, 1) = 0;
    return;
  }
  float dx = pathVectorX / distance;
  float dy = pathVectorY / distance;
  float perpendicular = (dx * (y - startCenterY) - (x - startCenterX) * dy) / distance;
  float dist = (dx * (x - startCenterX) + dy * (y - startCenterY)) / distance;
  if (IOSObjectArray_Get(nil_chk(attribute), 0) != nil) {
    if ([((NSString *) nil_chk(ADXKeyPosition_PERCENT_X)) isEqual:IOSObjectArray_Get(attribute, 0)]) {
      *IOSFloatArray_GetRef(nil_chk(value), 0) = dist;
      *IOSFloatArray_GetRef(value, 1) = perpendicular;
    }
  }
  else {
    IOSObjectArray_Set(attribute, 0, ADXKeyPosition_PERCENT_X);
    IOSObjectArray_Set(attribute, 1, ADXKeyPosition_PERCENT_Y);
    *IOSFloatArray_GetRef(nil_chk(value), 0) = dist;
    *IOSFloatArray_GetRef(value, 1) = perpendicular;
  }
}

- (void)positionScreenAttributesWithADView:(ADView *)view
                               withADRectF:(ADRectF *)start
                               withADRectF:(ADRectF *)end
                                 withFloat:(float)x
                                 withFloat:(float)y
                         withNSStringArray:(IOSObjectArray *)attribute
                            withFloatArray:(IOSFloatArray *)value {
  float startCenterX = [((ADRectF *) nil_chk(start)) centerX];
  float startCenterY = [start centerY];
  float endCenterX = [((ADRectF *) nil_chk(end)) centerX];
  float endCenterY = [end centerY];
  float pathVectorX = endCenterX - startCenterX;
  float pathVectorY = endCenterY - startCenterY;
  ADViewGroup *viewGroup = ((ADViewGroup *) cast_chk([((ADView *) nil_chk(view)) getParent], [ADViewGroup class]));
  int32_t width = [((ADViewGroup *) nil_chk(viewGroup)) getWidth];
  int32_t height = [viewGroup getHeight];
  if (IOSObjectArray_Get(nil_chk(attribute), 0) != nil) {
    if ([((NSString *) nil_chk(ADXKeyPosition_PERCENT_X)) isEqual:IOSObjectArray_Get(attribute, 0)]) {
      *IOSFloatArray_GetRef(nil_chk(value), 0) = x / width;
      *IOSFloatArray_GetRef(value, 1) = y / height;
    }
    else {
      *IOSFloatArray_GetRef(nil_chk(value), 1) = x / width;
      *IOSFloatArray_GetRef(value, 0) = y / height;
    }
  }
  else {
    IOSObjectArray_Set(attribute, 0, ADXKeyPosition_PERCENT_X);
    *IOSFloatArray_GetRef(nil_chk(value), 0) = x / width;
    IOSObjectArray_Set(attribute, 1, ADXKeyPosition_PERCENT_Y);
    *IOSFloatArray_GetRef(value, 1) = y / height;
  }
}

- (void)positionCartAttributesWithADRectF:(ADRectF *)start
                              withADRectF:(ADRectF *)end
                                withFloat:(float)x
                                withFloat:(float)y
                        withNSStringArray:(IOSObjectArray *)attribute
                           withFloatArray:(IOSFloatArray *)value {
  float startCenterX = [((ADRectF *) nil_chk(start)) centerX];
  float startCenterY = [start centerY];
  float endCenterX = [((ADRectF *) nil_chk(end)) centerX];
  float endCenterY = [end centerY];
  float pathVectorX = endCenterX - startCenterX;
  float pathVectorY = endCenterY - startCenterY;
  if (IOSObjectArray_Get(nil_chk(attribute), 0) != nil) {
    if ([((NSString *) nil_chk(ADXKeyPosition_PERCENT_X)) isEqual:IOSObjectArray_Get(attribute, 0)]) {
      *IOSFloatArray_GetRef(nil_chk(value), 0) = (x - startCenterX) / pathVectorX;
      *IOSFloatArray_GetRef(value, 1) = (y - startCenterY) / pathVectorY;
    }
    else {
      *IOSFloatArray_GetRef(nil_chk(value), 1) = (x - startCenterX) / pathVectorX;
      *IOSFloatArray_GetRef(value, 0) = (y - startCenterY) / pathVectorY;
    }
  }
  else {
    IOSObjectArray_Set(attribute, 0, ADXKeyPosition_PERCENT_X);
    *IOSFloatArray_GetRef(nil_chk(value), 0) = (x - startCenterX) / pathVectorX;
    IOSObjectArray_Set(attribute, 1, ADXKeyPosition_PERCENT_Y);
    *IOSFloatArray_GetRef(value, 1) = (y - startCenterY) / pathVectorY;
  }
}

- (bool)intersectsWithInt:(int32_t)layoutWidth
                  withInt:(int32_t)layoutHeight
              withADRectF:(ADRectF *)start
              withADRectF:(ADRectF *)end
                withFloat:(float)x
                withFloat:(float)y {
  [self calcPositionWithInt:layoutWidth withInt:layoutHeight withFloat:[((ADRectF *) nil_chk(start)) centerX] withFloat:[start centerY] withFloat:[((ADRectF *) nil_chk(end)) centerX] withFloat:[end centerY]];
  if ((JavaLangMath_absWithFloat_(x - mCalculatedPositionX_) < ADXKeyPositionBase_SELECTION_SLOPE) && (JavaLangMath_absWithFloat_(y - mCalculatedPositionY_) < ADXKeyPositionBase_SELECTION_SLOPE)) {
    return true;
  }
  return false;
}

- (void)setValueWithNSString:(NSString *)tag
                      withId:(id)value {
  switch (JreIndexOfStr(tag, (id[]){ ADXKeyPosition_TRANSITION_EASING, ADXKeyPosition_DRAWPATH, ADXKeyPosition_PERCENT_WIDTH, ADXKeyPosition_PERCENT_HEIGHT, ADXKeyPosition_SIZE_PERCENT, ADXKeyPosition_PERCENT_X, ADXKeyPosition_PERCENT_Y }, 7)) {
    case 0:
    JreStrongAssign(&mTransitionEasing_, [nil_chk(value) description]);
    break;
    case 1:
    mDrawPath_ = [self toIntWithId:value];
    break;
    case 2:
    mPercentWidth_ = [self toFloatWithId:value];
    break;
    case 3:
    mPercentHeight_ = [self toFloatWithId:value];
    break;
    case 4:
    mPercentHeight_ = mPercentWidth_ = [self toFloatWithId:value];
    break;
    case 5:
    mPercentX_ = [self toFloatWithId:value];
    break;
    case 6:
    mPercentY_ = [self toFloatWithId:value];
    break;
  }
}

- (ADXKey *)copy__WithADXKey:(ADXKey *)src {
  [super copy__WithADXKey:src];
  ADXKeyPosition *k = (ADXKeyPosition *) cast_chk(src, [ADXKeyPosition class]);
  JreStrongAssign(&mTransitionEasing_, ((ADXKeyPosition *) nil_chk(k))->mTransitionEasing_);
  mPathMotionArc_ = k->mPathMotionArc_;
  mDrawPath_ = k->mDrawPath_;
  mPercentWidth_ = k->mPercentWidth_;
  mPercentHeight_ = JavaLangFloat_NaN;
  mPercentX_ = k->mPercentX_;
  mPercentY_ = k->mPercentY_;
  mAltPercentX_ = k->mAltPercentX_;
  mAltPercentY_ = k->mAltPercentY_;
  mCalculatedPositionX_ = k->mCalculatedPositionX_;
  mCalculatedPositionY_ = k->mCalculatedPositionY_;
  return self;
}

- (ADXKey *)java_clone {
  return [create_ADXKeyPosition_init() copy__WithADXKey:self];
}

- (void)dealloc {
  RELEASE_(mTransitionEasing_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LADXKey;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LADXKey;", 0x1, 26, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(load__WithADContext:withADAttributeSet:);
  methods[2].selector = @selector(addValuesWithJavaUtilHashMap:);
  methods[3].selector = @selector(setTypeWithInt:);
  methods[4].selector = @selector(calcPositionWithInt:withInt:withFloat:withFloat:withFloat:withFloat:);
  methods[5].selector = @selector(calcScreenPositionWithInt:withInt:);
  methods[6].selector = @selector(calcPathPositionWithFloat:withFloat:withFloat:withFloat:);
  methods[7].selector = @selector(calcCartesianPositionWithFloat:withFloat:withFloat:withFloat:);
  methods[8].selector = @selector(getPositionX);
  methods[9].selector = @selector(getPositionY);
  methods[10].selector = @selector(positionAttributesWithADView:withADRectF:withADRectF:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[11].selector = @selector(positionPathAttributesWithADRectF:withADRectF:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[12].selector = @selector(positionScreenAttributesWithADView:withADRectF:withADRectF:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[13].selector = @selector(positionCartAttributesWithADRectF:withADRectF:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[14].selector = @selector(intersectsWithInt:withInt:withADRectF:withADRectF:withFloat:withFloat:);
  methods[15].selector = @selector(setValueWithNSString:withId:);
  methods[16].selector = @selector(copy__WithADXKey:);
  methods[17].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 28, -1, -1 },
    { "mTransitionEasing_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPathMotionArc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDrawPath_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentWidth_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentHeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAltPercentX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAltPercentY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "TYPE_SCREEN", "I", .constantValue.asInt = ADXKeyPosition_TYPE_SCREEN, 0x19, -1, -1, -1, -1 },
    { "TYPE_PATH", "I", .constantValue.asInt = ADXKeyPosition_TYPE_PATH, 0x19, -1, -1, -1, -1 },
    { "TYPE_CARTESIAN", "I", .constantValue.asInt = ADXKeyPosition_TYPE_CARTESIAN, 0x19, -1, -1, -1, -1 },
    { "mPositionType_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "TRANSITION_EASING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "DRAWPATH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "PERCENT_WIDTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "PERCENT_HEIGHT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "SIZE_PERCENT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "PERCENT_X", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "PERCENT_Y", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "mCalculatedPositionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCalculatedPositionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KEY_TYPE", "I", .constantValue.asInt = ADXKeyPosition_KEY_TYPE, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "load", "LADContext;LADAttributeSet;", "addValues", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/motion/utils/ViewSpline;>;)V", "setType", "I", "calcPosition", "IIFFFF", "calcScreenPosition", "II", "calcPathPosition", "FFFF", "calcCartesianPosition", "positionAttributes", "LADView;LADRectF;LADRectF;FF[LNSString;[F", "positionPathAttributes", "LADRectF;LADRectF;FF[LNSString;[F", "positionScreenAttributes", "positionCartAttributes", "intersects", "IILADRectF;LADRectF;FF", "setValue", "LNSString;LNSObject;", "copy", "LADXKey;", "clone", &ADXKeyPosition_TAG, &ADXKeyPosition_NAME, &ADXKeyPosition_TRANSITION_EASING, &ADXKeyPosition_DRAWPATH, &ADXKeyPosition_PERCENT_WIDTH, &ADXKeyPosition_PERCENT_HEIGHT, &ADXKeyPosition_SIZE_PERCENT, &ADXKeyPosition_PERCENT_X, &ADXKeyPosition_PERCENT_Y, "LADXKeyPosition_Loader;" };
  static const J2ObjcClassInfo _ADXKeyPosition = { "KeyPosition", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x1, 18, 25, -1, 36, -1, -1, -1 };
  return &_ADXKeyPosition;
}

@end

void ADXKeyPosition_init(ADXKeyPosition *self) {
  ADXKeyPositionBase_initPackagePrivate(self);
  JreStrongAssign(&self->mTransitionEasing_, nil);
  self->mPathMotionArc_ = JreLoadStatic(ADXKey, UNSET);
  self->mDrawPath_ = 0;
  self->mPercentWidth_ = JavaLangFloat_NaN;
  self->mPercentHeight_ = JavaLangFloat_NaN;
  self->mPercentX_ = JavaLangFloat_NaN;
  self->mPercentY_ = JavaLangFloat_NaN;
  self->mAltPercentX_ = JavaLangFloat_NaN;
  self->mAltPercentY_ = JavaLangFloat_NaN;
  self->mPositionType_ = ADXKeyPosition_TYPE_CARTESIAN;
  self->mCalculatedPositionX_ = JavaLangFloat_NaN;
  self->mCalculatedPositionY_ = JavaLangFloat_NaN;
  {
    self->mType_ = ADXKeyPosition_KEY_TYPE;
  }
}

ADXKeyPosition *new_ADXKeyPosition_init() {
  J2OBJC_NEW_IMPL(ADXKeyPosition, init)
}

ADXKeyPosition *create_ADXKeyPosition_init() {
  J2OBJC_CREATE_IMPL(ADXKeyPosition, init)
}

void ADXKeyPosition_calcScreenPositionWithInt_withInt_(ADXKeyPosition *self, int32_t layoutWidth, int32_t layoutHeight) {
  int32_t viewWidth = 0;
  int32_t viewHeight = 0;
  self->mCalculatedPositionX_ = (layoutWidth - viewWidth) * self->mPercentX_ + JreIntDiv(viewWidth, 2);
  self->mCalculatedPositionY_ = (layoutHeight - viewHeight) * self->mPercentX_ + JreIntDiv(viewHeight, 2);
}

void ADXKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(ADXKeyPosition *self, float start_x, float start_y, float end_x, float end_y) {
  float pathVectorX = end_x - start_x;
  float pathVectorY = end_y - start_y;
  float perpendicularX = -pathVectorY;
  float perpendicularY = pathVectorX;
  self->mCalculatedPositionX_ = start_x + pathVectorX * self->mPercentX_ + perpendicularX * self->mPercentY_;
  self->mCalculatedPositionY_ = start_y + pathVectorY * self->mPercentX_ + perpendicularY * self->mPercentY_;
}

void ADXKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(ADXKeyPosition *self, float start_x, float start_y, float end_x, float end_y) {
  float pathVectorX = end_x - start_x;
  float pathVectorY = end_y - start_y;
  float dxdx = (JavaLangFloat_isNaNWithFloat_(self->mPercentX_)) ? 0 : self->mPercentX_;
  float dydx = (JavaLangFloat_isNaNWithFloat_(self->mAltPercentY_)) ? 0 : self->mAltPercentY_;
  float dydy = (JavaLangFloat_isNaNWithFloat_(self->mPercentY_)) ? 0 : self->mPercentY_;
  float dxdy = (JavaLangFloat_isNaNWithFloat_(self->mAltPercentX_)) ? 0 : self->mAltPercentX_;
  self->mCalculatedPositionX_ = JreFpToInt((start_x + pathVectorX * dxdx + pathVectorY * dxdy));
  self->mCalculatedPositionY_ = JreFpToInt((start_y + pathVectorX * dydx + pathVectorY * dydy));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyPosition)

J2OBJC_NAME_MAPPING(ADXKeyPosition, "androidx.constraintlayout.motion.widget", "ADX")

@implementation ADXKeyPosition_Loader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyPosition_Loader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXKeyPosition;" };
  static const J2ObjcClassInfo _ADXKeyPosition_Loader = { "Loader", "androidx.constraintlayout.motion.widget", ptrTable, methods, NULL, 7, 0xa, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADXKeyPosition_Loader;
}

@end

void ADXKeyPosition_Loader_init(ADXKeyPosition_Loader *self) {
  NSObject_init(self);
}

ADXKeyPosition_Loader *new_ADXKeyPosition_Loader_init() {
  J2OBJC_NEW_IMPL(ADXKeyPosition_Loader, init)
}

ADXKeyPosition_Loader *create_ADXKeyPosition_Loader_init() {
  J2OBJC_CREATE_IMPL(ADXKeyPosition_Loader, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyPosition_Loader)
