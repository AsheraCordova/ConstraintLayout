//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\KeyFrames.java
//

#include "ConstraintLayout.h"
#include "Context.h"
#include "J2ObjC_source.h"
#include "Key.h"
#include "KeyFrames.h"
#include "Log.h"
#include "MotionController.h"
#include "Resources.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"

@class JavaUtilHashMap;


@interface ADXKeyFrames () {
 @public
  JavaUtilHashMap *mFramesMap_;
}

@end

J2OBJC_FIELD_SETTER(ADXKeyFrames, mFramesMap_, JavaUtilHashMap *)

inline NSString *ADXKeyFrames_get_CUSTOM_METHOD(void);
static NSString *ADXKeyFrames_CUSTOM_METHOD = @"CustomMethod";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyFrames, CUSTOM_METHOD, NSString *)

inline NSString *ADXKeyFrames_get_CUSTOM_ATTRIBUTE(void);
static NSString *ADXKeyFrames_CUSTOM_ATTRIBUTE = @"CustomAttribute";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyFrames, CUSTOM_ATTRIBUTE, NSString *)

inline NSString *ADXKeyFrames_get_TAG(void);
static NSString *ADXKeyFrames_TAG = @"KeyFrames";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyFrames, TAG, NSString *)

J2OBJC_INITIALIZED_DEFN(ADXKeyFrames)

@implementation ADXKeyFrames

- (void)addKeyWithADXKey:(ADXKey *)key {
  if (![((JavaUtilHashMap *) nil_chk(mFramesMap_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(((ADXKey *) nil_chk(key))->mTargetId_)]) {
    [((JavaUtilHashMap *) nil_chk(mFramesMap_)) putWithId:JavaLangInteger_valueOfWithInt_(key->mTargetId_) withId:create_JavaUtilArrayList_init()];
  }
  JavaUtilArrayList *frames = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFramesMap_)) getWithId:JavaLangInteger_valueOfWithInt_(key->mTargetId_)]);
  if (frames != nil) {
    [frames addWithId:key];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyFrames_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addAllFramesWithADXMotionController:(ADXMotionController *)motionController {
  JavaUtilArrayList *list = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFramesMap_)) getWithId:JavaLangInteger_valueOfWithInt_(ADXKeyFrames_UNSET)]);
  if (list != nil) {
    [((ADXMotionController *) nil_chk(motionController)) addKeysWithJavaUtilArrayList:list];
  }
}

- (void)addFramesWithADXMotionController:(ADXMotionController *)motionController {
  JavaUtilArrayList *list = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFramesMap_)) getWithId:JavaLangInteger_valueOfWithInt_(((ADXMotionController *) nil_chk(motionController))->mId_)]);
  if (list != nil) {
    [motionController addKeysWithJavaUtilArrayList:list];
  }
  list = [((JavaUtilHashMap *) nil_chk(mFramesMap_)) getWithId:JavaLangInteger_valueOfWithInt_(ADXKeyFrames_UNSET)];
  if (list != nil) {
    for (ADXKey * __strong key in list) {
      NSString *tag = JreRetainedLocalValue(((ADXConstraintLayout_LayoutParams *) nil_chk(((ADXConstraintLayout_LayoutParams *) cast_chk(([((ADView *) nil_chk(motionController->mView_)) getLayoutParams]), [ADXConstraintLayout_LayoutParams class]))))->constraintTag_);
      if ([((ADXKey *) nil_chk(key)) matchesWithNSString:tag]) {
        [motionController addKeyWithADXKey:key];
      }
    }
  }
}

+ (NSString *)nameWithInt:(jint)viewId
            withADContext:(ADContext *)context {
  return ADXKeyFrames_nameWithInt_withADContext_(viewId, context);
}

- (id<JavaUtilSet>)getKeys {
  return [((JavaUtilHashMap *) nil_chk(mFramesMap_)) keySet];
}

- (JavaUtilArrayList *)getKeyFramesForViewWithInt:(jint)id_ {
  return [((JavaUtilHashMap *) nil_chk(mFramesMap_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
}

- (void)dealloc {
  RELEASE_(mFramesMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addKeyWithADXKey:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(addAllFramesWithADXMotionController:);
  methods[3].selector = @selector(addFramesWithADXMotionController:);
  methods[4].selector = @selector(nameWithInt:withADContext:);
  methods[5].selector = @selector(getKeys);
  methods[6].selector = @selector(getKeyFramesForViewWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSET", "I", .constantValue.asInt = ADXKeyFrames_UNSET, 0x19, -1, -1, -1, -1 },
    { "CUSTOM_METHOD", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "CUSTOM_ATTRIBUTE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "mFramesMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "addKey", "LADXKey;", "addAllFrames", "LADXMotionController;", "addFrames", "name", "ILADContext;", "()Ljava/util/Set<Ljava/lang/Integer;>;", "getKeyFramesForView", "I", "(I)Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/Key;>;", &ADXKeyFrames_CUSTOM_METHOD, &ADXKeyFrames_CUSTOM_ATTRIBUTE, "Ljava/util/HashMap<Ljava/lang/Integer;Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/Key;>;>;", &ADXKeyFrames_TAG };
  static const J2ObjcClassInfo _ADXKeyFrames = { "KeyFrames", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_ADXKeyFrames;
}

+ (void)initialize {
  if (self == [ADXKeyFrames class]) {
    {
      @try {
      }
      @catch (JavaLangException *e) {
        ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADXKeyFrames_TAG, @"unable to load", e);
      }
    }
    J2OBJC_SET_INITIALIZED(ADXKeyFrames)
  }
}

@end

void ADXKeyFrames_init(ADXKeyFrames *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mFramesMap_, new_JavaUtilHashMap_init());
}

ADXKeyFrames *new_ADXKeyFrames_init() {
  J2OBJC_NEW_IMPL(ADXKeyFrames, init)
}

ADXKeyFrames *create_ADXKeyFrames_init() {
  J2OBJC_CREATE_IMPL(ADXKeyFrames, init)
}

NSString *ADXKeyFrames_nameWithInt_withADContext_(jint viewId, ADContext *context) {
  ADXKeyFrames_initialize();
  return [((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getResourceEntryNameWithInt:viewId];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyFrames)
