//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\key\MotionKeyTrigger.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_MotionKeyTrigger")
#ifdef RESTRICT_MotionKeyTrigger
#define INCLUDE_ALL_MotionKeyTrigger 0
#else
#define INCLUDE_ALL_MotionKeyTrigger 1
#endif
#undef RESTRICT_MotionKeyTrigger

#if !defined (ADXMotionKeyTrigger_) && (INCLUDE_ALL_MotionKeyTrigger || defined(INCLUDE_ADXMotionKeyTrigger))
#define ADXMotionKeyTrigger_

#define RESTRICT_MotionKey 1
#define INCLUDE_ADXMotionKey 1
#include "MotionKey.h"

@class ADXFloatRect;
@class ADXMotionWidget;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class NSString;

@interface ADXMotionKeyTrigger : ADXMotionKey {
 @public
  float mTriggerSlack_;
  int32_t mViewTransitionOnNegativeCross_;
  int32_t mViewTransitionOnPositiveCross_;
  int32_t mViewTransitionOnCross_;
  ADXFloatRect *mCollisionRect_;
  ADXFloatRect *mTargetRect_;
  JavaUtilHashMap *mMethodHashMap_;
}

#pragma mark Public

- (instancetype)init;

- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines;

- (ADXMotionKey *)java_clone;

- (void)conditionallyFireWithFloat:(float)position
               withADXMotionWidget:(ADXMotionWidget *)child;

- (ADXMotionKeyTrigger *)copy__WithADXMotionKey:(ADXMotionKey *)src OBJC_METHOD_FAMILY_NONE;

- (void)getAttributeNamesWithJavaUtilHashSet:(JavaUtilHashSet *)attributes;

- (int32_t)getIdWithNSString:(NSString *)name;

- (bool)setValueWithInt:(int32_t)type
            withBoolean:(bool)value;

- (bool)setValueWithInt:(int32_t)type
              withFloat:(float)value;

- (bool)setValueWithInt:(int32_t)type
                withInt:(int32_t)value;

- (bool)setValueWithInt:(int32_t)type
           withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXMotionKeyTrigger)

J2OBJC_FIELD_SETTER(ADXMotionKeyTrigger, mCollisionRect_, ADXFloatRect *)
J2OBJC_FIELD_SETTER(ADXMotionKeyTrigger, mTargetRect_, ADXFloatRect *)
J2OBJC_FIELD_SETTER(ADXMotionKeyTrigger, mMethodHashMap_, JavaUtilHashMap *)

inline NSString *ADXMotionKeyTrigger_get_VIEW_TRANSITION_ON_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_VIEW_TRANSITION_ON_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, VIEW_TRANSITION_ON_CROSS, NSString *)

inline NSString *ADXMotionKeyTrigger_get_VIEW_TRANSITION_ON_POSITIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_VIEW_TRANSITION_ON_POSITIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, VIEW_TRANSITION_ON_POSITIVE_CROSS, NSString *)

inline NSString *ADXMotionKeyTrigger_get_VIEW_TRANSITION_ON_NEGATIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_VIEW_TRANSITION_ON_NEGATIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, VIEW_TRANSITION_ON_NEGATIVE_CROSS, NSString *)

inline NSString *ADXMotionKeyTrigger_get_POST_LAYOUT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_POST_LAYOUT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, POST_LAYOUT, NSString *)

inline NSString *ADXMotionKeyTrigger_get_TRIGGER_SLACK(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_TRIGGER_SLACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, TRIGGER_SLACK, NSString *)

inline NSString *ADXMotionKeyTrigger_get_TRIGGER_COLLISION_VIEW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_TRIGGER_COLLISION_VIEW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, TRIGGER_COLLISION_VIEW, NSString *)

inline NSString *ADXMotionKeyTrigger_get_TRIGGER_COLLISION_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_TRIGGER_COLLISION_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, TRIGGER_COLLISION_ID, NSString *)

inline NSString *ADXMotionKeyTrigger_get_TRIGGER_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_TRIGGER_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, TRIGGER_ID, NSString *)

inline NSString *ADXMotionKeyTrigger_get_POSITIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_POSITIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, POSITIVE_CROSS, NSString *)

inline NSString *ADXMotionKeyTrigger_get_NEGATIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_NEGATIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, NEGATIVE_CROSS, NSString *)

inline NSString *ADXMotionKeyTrigger_get_TRIGGER_RECEIVER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_TRIGGER_RECEIVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, TRIGGER_RECEIVER, NSString *)

inline NSString *ADXMotionKeyTrigger_get_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKeyTrigger_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTrigger, CROSS, NSString *)

inline int32_t ADXMotionKeyTrigger_get_TYPE_VIEW_TRANSITION_ON_CROSS(void);
#define ADXMotionKeyTrigger_TYPE_VIEW_TRANSITION_ON_CROSS 301
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_VIEW_TRANSITION_ON_CROSS, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_VIEW_TRANSITION_ON_POSITIVE_CROSS(void);
#define ADXMotionKeyTrigger_TYPE_VIEW_TRANSITION_ON_POSITIVE_CROSS 302
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_VIEW_TRANSITION_ON_POSITIVE_CROSS, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_VIEW_TRANSITION_ON_NEGATIVE_CROSS(void);
#define ADXMotionKeyTrigger_TYPE_VIEW_TRANSITION_ON_NEGATIVE_CROSS 303
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_VIEW_TRANSITION_ON_NEGATIVE_CROSS, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_POST_LAYOUT(void);
#define ADXMotionKeyTrigger_TYPE_POST_LAYOUT 304
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_POST_LAYOUT, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_TRIGGER_SLACK(void);
#define ADXMotionKeyTrigger_TYPE_TRIGGER_SLACK 305
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_TRIGGER_SLACK, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_TRIGGER_COLLISION_VIEW(void);
#define ADXMotionKeyTrigger_TYPE_TRIGGER_COLLISION_VIEW 306
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_TRIGGER_COLLISION_VIEW, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_TRIGGER_COLLISION_ID(void);
#define ADXMotionKeyTrigger_TYPE_TRIGGER_COLLISION_ID 307
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_TRIGGER_COLLISION_ID, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_TRIGGER_ID(void);
#define ADXMotionKeyTrigger_TYPE_TRIGGER_ID 308
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_TRIGGER_ID, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_POSITIVE_CROSS(void);
#define ADXMotionKeyTrigger_TYPE_POSITIVE_CROSS 309
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_POSITIVE_CROSS, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_NEGATIVE_CROSS(void);
#define ADXMotionKeyTrigger_TYPE_NEGATIVE_CROSS 310
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_NEGATIVE_CROSS, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_TRIGGER_RECEIVER(void);
#define ADXMotionKeyTrigger_TYPE_TRIGGER_RECEIVER 311
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_TRIGGER_RECEIVER, int32_t)

inline int32_t ADXMotionKeyTrigger_get_TYPE_CROSS(void);
#define ADXMotionKeyTrigger_TYPE_CROSS 312
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, TYPE_CROSS, int32_t)

inline int32_t ADXMotionKeyTrigger_get_KEY_TYPE(void);
#define ADXMotionKeyTrigger_KEY_TYPE 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyTrigger, KEY_TYPE, int32_t)

FOUNDATION_EXPORT void ADXMotionKeyTrigger_init(ADXMotionKeyTrigger *self);

FOUNDATION_EXPORT ADXMotionKeyTrigger *new_ADXMotionKeyTrigger_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXMotionKeyTrigger *create_ADXMotionKeyTrigger_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXMotionKeyTrigger)

@compatibility_alias AndroidxConstraintlayoutCoreMotionKeyMotionKeyTrigger ADXMotionKeyTrigger;


#endif

#pragma pop_macro("INCLUDE_ALL_MotionKeyTrigger")
