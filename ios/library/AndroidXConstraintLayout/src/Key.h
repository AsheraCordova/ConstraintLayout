//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\Key.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Key")
#ifdef RESTRICT_Key
#define INCLUDE_ALL_Key 0
#else
#define INCLUDE_ALL_Key 1
#endif
#undef RESTRICT_Key

#if !defined (ADXKey_) && (INCLUDE_ALL_Key || defined(INCLUDE_ADXKey))
#define ADXKey_

@class ADAttributeSet;
@class ADContext;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class NSString;

/*!
 @brief Base class in an element in a KeyFrame
 */
@interface ADXKey : NSObject {
 @public
  int32_t mFramePosition_;
  int32_t mTargetId_;
  NSString *mTargetString_;
  int32_t mType_;
  JavaUtilHashMap *mCustomConstraints_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Defines method to add a a view to splines derived form this key frame.
 The values are written to the spline
 @param splines splines to write values to
 */
- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines;

- (ADXKey *)java_clone;

- (ADXKey *)copy__WithADXKey:(ADXKey *)src OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Gets the current frame position
 */
- (int32_t)getFramePosition;

/*!
 @brief sets the frame position
 @param pos
 */
- (void)setFramePositionWithInt:(int32_t)pos;

/*!
 @brief Key frame can specify the type of interpolation it wants on various attributes
  For each string it set it to -1, CurveFit.LINEAR or  CurveFit.SPLINE
 @param interpolation
 */
- (void)setInterpolationWithJavaUtilHashMap:(JavaUtilHashMap *)interpolation;

/*!
 @brief Set the value associated with this tag
 @param tag
 @param value
 */
- (void)setValueWithNSString:(NSString *)tag
                      withId:(id)value;

- (ADXKey *)setViewIdWithInt:(int32_t)id_;

#pragma mark Package-Private

- (void)getAttributeNamesWithJavaUtilHashSet:(JavaUtilHashSet *)attributes;

- (void)load__WithADContext:(ADContext *)context
         withADAttributeSet:(ADAttributeSet *)attrs;

- (bool)matchesWithNSString:(NSString *)constraintTag;

/*!
 @brief Return the boolean version this object if the object is a Boolean it is casted.
 @param value
 */
- (bool)toBooleanWithId:(id)value;

/*!
 @brief Return the float given a value.If the value is a "Float" object it is casted
 @param value
 */
- (float)toFloatWithId:(id)value;

/*!
 @brief Return the int version of an object if the value is an Integer object it is casted.
 @param value
 */
- (int32_t)toIntWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKey)

J2OBJC_FIELD_SETTER(ADXKey, mTargetString_, NSString *)
J2OBJC_FIELD_SETTER(ADXKey, mCustomConstraints_, JavaUtilHashMap *)

inline int32_t ADXKey_get_UNSET(void);
inline int32_t ADXKey_set_UNSET(int32_t value);
inline int32_t *ADXKey_getRef_UNSET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int32_t ADXKey_UNSET;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXKey, UNSET, int32_t)

inline NSString *ADXKey_get_ALPHA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_ALPHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, ALPHA, NSString *)

inline NSString *ADXKey_get_ELEVATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_ELEVATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, ELEVATION, NSString *)

inline NSString *ADXKey_get_ROTATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_ROTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, ROTATION, NSString *)

inline NSString *ADXKey_get_ROTATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_ROTATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, ROTATION_X, NSString *)

inline NSString *ADXKey_get_ROTATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_ROTATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, ROTATION_Y, NSString *)

inline NSString *ADXKey_get_PIVOT_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_PIVOT_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, PIVOT_X, NSString *)

inline NSString *ADXKey_get_PIVOT_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_PIVOT_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, PIVOT_Y, NSString *)

inline NSString *ADXKey_get_TRANSITION_PATH_ROTATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_TRANSITION_PATH_ROTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, TRANSITION_PATH_ROTATE, NSString *)

inline NSString *ADXKey_get_SCALE_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_SCALE_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, SCALE_X, NSString *)

inline NSString *ADXKey_get_SCALE_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_SCALE_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, SCALE_Y, NSString *)

inline NSString *ADXKey_get_WAVE_PERIOD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_WAVE_PERIOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, WAVE_PERIOD, NSString *)

inline NSString *ADXKey_get_WAVE_OFFSET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_WAVE_OFFSET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, WAVE_OFFSET, NSString *)

inline NSString *ADXKey_get_WAVE_PHASE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_WAVE_PHASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, WAVE_PHASE, NSString *)

inline NSString *ADXKey_get_WAVE_VARIES_BY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_WAVE_VARIES_BY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, WAVE_VARIES_BY, NSString *)

inline NSString *ADXKey_get_TRANSLATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_TRANSLATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, TRANSLATION_X, NSString *)

inline NSString *ADXKey_get_TRANSLATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_TRANSLATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, TRANSLATION_Y, NSString *)

inline NSString *ADXKey_get_TRANSLATION_Z(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_TRANSLATION_Z;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, TRANSLATION_Z, NSString *)

inline NSString *ADXKey_get_PROGRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_PROGRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, PROGRESS, NSString *)

inline NSString *ADXKey_get_CUSTOM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_CUSTOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, CUSTOM, NSString *)

inline NSString *ADXKey_get_CURVEFIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_CURVEFIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, CURVEFIT, NSString *)

inline NSString *ADXKey_get_MOTIONPROGRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_MOTIONPROGRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, MOTIONPROGRESS, NSString *)

inline NSString *ADXKey_get_TRANSITIONEASING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_TRANSITIONEASING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, TRANSITIONEASING, NSString *)

inline NSString *ADXKey_get_VISIBILITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXKey_VISIBILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKey, VISIBILITY, NSString *)

FOUNDATION_EXPORT void ADXKey_init(ADXKey *self);

J2OBJC_TYPE_LITERAL_HEADER(ADXKey)

@compatibility_alias AndroidxConstraintlayoutMotionWidgetKey ADXKey;


#endif

#pragma pop_macro("INCLUDE_ALL_Key")
