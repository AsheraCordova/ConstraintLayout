//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\TouchResponse.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CLDebug.h"
#include "Context.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "MotionController.h"
#include "MotionEvent.h"
#include "MotionLayout.h"
#include "MotionScene.h"
#include "NestedScrollView.h"
#include "OnSwipe.h"
#include "RectF.h"
#include "TouchResponse.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXTouchResponse () {
 @public
  int32_t mTouchAnchorSide_;
  int32_t mTouchSide_;
  int32_t mOnTouchUp_;
  int32_t mTouchAnchorId_;
  int32_t mTouchRegionId_;
  int32_t mLimitBoundsTo_;
  float mTouchAnchorY_;
  float mTouchAnchorX_;
  int32_t mRotationCenterId_;
  float mTouchDirectionX_;
  float mTouchDirectionY_;
  bool mDragStarted_;
  IOSFloatArray *mAnchorDpDt_;
  IOSIntArray *mTempLoc_;
  float mLastTouchX_;
  float mLastTouchY_;
  ADXMotionLayout *mMotionLayout_;
  float mMaxVelocity_;
  float mMaxAcceleration_;
  bool mMoveWhenScrollAtTop_;
  float mDragScale_;
  int32_t mFlags_;
  float mDragThreshold_;
  float mSpringDamping_;
  float mSpringMass_;
  float mSpringStiffness_;
  float mSpringStopThreshold_;
  int32_t mSpringBoundary_;
  int32_t mAutoCompleteMode_;
}

@end

J2OBJC_FIELD_SETTER(ADXTouchResponse, mAnchorDpDt_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ADXTouchResponse, mTempLoc_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXTouchResponse, mMotionLayout_, ADXMotionLayout *)

inline NSString *ADXTouchResponse_get_TAG(void);
static NSString *ADXTouchResponse_TAG = @"TouchResponse";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTouchResponse, TAG, NSString *)

inline bool ADXTouchResponse_get_DEBUG(void);
#define ADXTouchResponse_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, DEBUG, bool)

inline int32_t ADXTouchResponse_get_SEC_TO_MILLISECONDS(void);
#define ADXTouchResponse_SEC_TO_MILLISECONDS 1000
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SEC_TO_MILLISECONDS, int32_t)

inline float ADXTouchResponse_get_EPSILON(void);
#define ADXTouchResponse_EPSILON 1.0E-7f
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, EPSILON, float)

inline IOSObjectArray *ADXTouchResponse_get_TOUCH_SIDES(void);
static IOSObjectArray *ADXTouchResponse_TOUCH_SIDES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTouchResponse, TOUCH_SIDES, IOSObjectArray *)

inline IOSObjectArray *ADXTouchResponse_get_TOUCH_DIRECTION(void);
static IOSObjectArray *ADXTouchResponse_TOUCH_DIRECTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTouchResponse, TOUCH_DIRECTION, IOSObjectArray *)

inline int32_t ADXTouchResponse_get_TOUCH_UP(void);
#define ADXTouchResponse_TOUCH_UP 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, TOUCH_UP, int32_t)

inline int32_t ADXTouchResponse_get_TOUCH_DOWN(void);
#define ADXTouchResponse_TOUCH_DOWN 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, TOUCH_DOWN, int32_t)

inline int32_t ADXTouchResponse_get_TOUCH_LEFT(void);
#define ADXTouchResponse_TOUCH_LEFT 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, TOUCH_LEFT, int32_t)

inline int32_t ADXTouchResponse_get_TOUCH_RIGHT(void);
#define ADXTouchResponse_TOUCH_RIGHT 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, TOUCH_RIGHT, int32_t)

inline int32_t ADXTouchResponse_get_TOUCH_START(void);
#define ADXTouchResponse_TOUCH_START 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, TOUCH_START, int32_t)

inline int32_t ADXTouchResponse_get_TOUCH_END(void);
#define ADXTouchResponse_TOUCH_END 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, TOUCH_END, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_TOP(void);
#define ADXTouchResponse_SIDE_TOP 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_TOP, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_LEFT(void);
#define ADXTouchResponse_SIDE_LEFT 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_LEFT, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_RIGHT(void);
#define ADXTouchResponse_SIDE_RIGHT 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_RIGHT, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_BOTTOM(void);
#define ADXTouchResponse_SIDE_BOTTOM 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_BOTTOM, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_MIDDLE(void);
#define ADXTouchResponse_SIDE_MIDDLE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_MIDDLE, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_START(void);
#define ADXTouchResponse_SIDE_START 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_START, int32_t)

inline int32_t ADXTouchResponse_get_SIDE_END(void);
#define ADXTouchResponse_SIDE_END 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, SIDE_END, int32_t)

@interface ADXTouchResponse_1 : NSObject < ADView_OnTouchListener >

- (instancetype)init;

- (bool)onTouchWithADView:(ADView *)view
        withADMotionEvent:(ADMotionEvent *)motionEvent;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXTouchResponse_1)

__attribute__((unused)) static void ADXTouchResponse_1_init(ADXTouchResponse_1 *self);

__attribute__((unused)) static ADXTouchResponse_1 *new_ADXTouchResponse_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXTouchResponse_1 *create_ADXTouchResponse_1_init(void);


@interface ADXTouchResponse_2 : NSObject < ADXNestedScrollView_OnScrollChangeListener >

- (instancetype)init;

- (void)onScrollChangeWithADXNestedScrollView:(ADXNestedScrollView *)v
                                      withInt:(int32_t)scrollX
                                      withInt:(int32_t)scrollY
                                      withInt:(int32_t)oldScrollX
                                      withInt:(int32_t)oldScrollY;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXTouchResponse_2)

__attribute__((unused)) static void ADXTouchResponse_2_init(ADXTouchResponse_2 *self);

__attribute__((unused)) static ADXTouchResponse_2 *new_ADXTouchResponse_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXTouchResponse_2 *create_ADXTouchResponse_2_init(void);


J2OBJC_INITIALIZED_DEFN(ADXTouchResponse)

@implementation ADXTouchResponse

- (instancetype)initPackagePrivateWithADXMotionLayout:(ADXMotionLayout *)layout
                                       withADXOnSwipe:(ADXOnSwipe *)onSwipe {
  ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(self, layout, onSwipe);
  return self;
}

- (void)setRTLWithBoolean:(bool)rtl {
  if (rtl) {
    IOSObjectArray_Set(nil_chk(ADXTouchResponse_TOUCH_DIRECTION), ADXTouchResponse_TOUCH_START, IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, ADXTouchResponse_TOUCH_RIGHT));
    IOSObjectArray_Set(ADXTouchResponse_TOUCH_DIRECTION, ADXTouchResponse_TOUCH_END, IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, ADXTouchResponse_TOUCH_LEFT));
    IOSObjectArray_Set(nil_chk(ADXTouchResponse_TOUCH_SIDES), ADXTouchResponse_SIDE_START, IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, ADXTouchResponse_SIDE_RIGHT));
    IOSObjectArray_Set(ADXTouchResponse_TOUCH_SIDES, ADXTouchResponse_SIDE_END, IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, ADXTouchResponse_SIDE_LEFT));
  }
  else {
    IOSObjectArray_Set(nil_chk(ADXTouchResponse_TOUCH_DIRECTION), ADXTouchResponse_TOUCH_START, IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, ADXTouchResponse_TOUCH_LEFT));
    IOSObjectArray_Set(ADXTouchResponse_TOUCH_DIRECTION, ADXTouchResponse_TOUCH_END, IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, ADXTouchResponse_TOUCH_RIGHT));
    IOSObjectArray_Set(nil_chk(ADXTouchResponse_TOUCH_SIDES), ADXTouchResponse_SIDE_START, IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, ADXTouchResponse_SIDE_LEFT));
    IOSObjectArray_Set(ADXTouchResponse_TOUCH_SIDES, ADXTouchResponse_SIDE_END, IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, ADXTouchResponse_SIDE_RIGHT));
  }
  mTouchAnchorX_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, mTouchAnchorSide_)), 0);
  mTouchAnchorY_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, mTouchAnchorSide_)), 1);
  if (mTouchSide_ >= ADXTouchResponse_TOUCH_DIRECTION->size_) {
    return;
  }
  mTouchDirectionX_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, mTouchSide_)), 0);
  mTouchDirectionY_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, mTouchSide_)), 1);
}

- (void)setUpTouchEventWithFloat:(float)lastTouchX
                       withFloat:(float)lastTouchY {
  mLastTouchX_ = lastTouchX;
  mLastTouchY_ = lastTouchY;
  mDragStarted_ = false;
}

- (void)processTouchRotateEventWithADMotionEvent:(ADMotionEvent *)event
               withADXMotionLayout_MotionTracker:(id<ADXMotionLayout_MotionTracker>)velocityTracker
                                         withInt:(int32_t)currentState
                              withADXMotionScene:(ADXMotionScene *)motionScene {
  [((id<ADXMotionLayout_MotionTracker>) nil_chk(velocityTracker)) addMovementWithADMotionEvent:event];
  {
    float dy;
    float dx;
    float drag;
    float rcx;
    float rcy;
    float relativePosX;
    float relativePosY;
    double angle1;
    double angle2;
    float tvx;
    float tvy;
    float currentPos;
    float pos;
    float velocity_tweek;
    float angularVelocity;
    switch ([((ADMotionEvent *) nil_chk(event)) getAction]) {
      case ADMotionEvent_ACTION_DOWN:
      mLastTouchX_ = [event getRawX];
      mLastTouchY_ = [event getRawY];
      mDragStarted_ = false;
      break;
      case ADMotionEvent_ACTION_MOVE:
      dy = [event getRawY] - mLastTouchY_;
      dx = [event getRawX] - mLastTouchX_;
      rcx = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getWidth] / 2.0f;
      rcy = [mMotionLayout_ getHeight] / 2.0f;
      if (mRotationCenterId_ != ADXMotionScene_UNSET) {
        ADView *v = JreRetainedLocalValue([mMotionLayout_ findViewByIdWithInt:mRotationCenterId_]);
        [mMotionLayout_ getLocationOnScreenWithIntArray:mTempLoc_];
        rcx = IOSIntArray_Get(nil_chk(mTempLoc_), 0) + ([((ADView *) nil_chk(v)) getLeft] + [v getRight]) / 2.0f;
        rcy = IOSIntArray_Get(nil_chk(mTempLoc_), 1) + ([v getTop] + [v getBottom]) / 2.0f;
      }
      else if (mTouchAnchorId_ != ADXMotionScene_UNSET) {
        ADXMotionController *mc = JreRetainedLocalValue([mMotionLayout_ getMotionControllerWithInt:mTouchAnchorId_]);
        ADView *v = JreRetainedLocalValue([mMotionLayout_ findViewByIdWithInt:[((ADXMotionController *) nil_chk(mc)) getAnimateRelativeTo]]);
        if (v == nil) {
          ADLog_eWithNSString_withNSString_(ADXTouchResponse_TAG, @"could not find view to animate to");
        }
        else {
          [mMotionLayout_ getLocationOnScreenWithIntArray:mTempLoc_];
          rcx = IOSIntArray_Get(nil_chk(mTempLoc_), 0) + ([v getLeft] + [v getRight]) / 2.0f;
          rcy = IOSIntArray_Get(nil_chk(mTempLoc_), 1) + ([v getTop] + [v getBottom]) / 2.0f;
        }
      }
      relativePosX = [event getRawX] - rcx;
      relativePosY = [event getRawY] - rcy;
      angle1 = JavaLangMath_atan2WithDouble_withDouble_([event getRawY] - rcy, [event getRawX] - rcx);
      angle2 = JavaLangMath_atan2WithDouble_withDouble_(mLastTouchY_ - rcy, mLastTouchX_ - rcx);
      drag = (float) ((angle1 - angle2) * 180.0f / JavaLangMath_PI);
      if (drag > 330) {
        JreMinusAssignFloatF(&drag, 360);
      }
      else if (drag < -330) {
        JrePlusAssignFloatF(&drag, 360);
      }
      if (JavaLangMath_absWithFloat_(drag) > 0.01 || mDragStarted_) {
        float pos = [mMotionLayout_ getProgress];
        if (!mDragStarted_) {
          mDragStarted_ = true;
          [mMotionLayout_ setProgressWithFloat:pos];
        }
        if (mTouchAnchorId_ != ADXMotionScene_UNSET) {
          [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
          *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 1) = (float) JavaLangMath_toDegreesWithDouble_(IOSFloatArray_Get(mAnchorDpDt_, 1));
        }
        else {
          *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 1) = 360;
        }
        float change = drag * mDragScale_ / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1);
        pos = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(pos + change, 1), 0);
        float current = [mMotionLayout_ getProgress];
        if (pos != current) {
          if (current == 0.0f || current == 1.0f) {
            [mMotionLayout_ endTriggerWithBoolean:current == 0.0f];
          }
          [mMotionLayout_ setProgressWithFloat:pos];
          [velocityTracker computeCurrentVelocityWithInt:ADXTouchResponse_SEC_TO_MILLISECONDS];
          float tvx = [velocityTracker getXVelocity];
          float tvy = [velocityTracker getYVelocity];
          float angularVelocity = (float) (JavaLangMath_hypotWithDouble_withDouble_(tvy, tvx) * JavaLangMath_sinWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(tvy, tvx) - angle1) / JavaLangMath_hypotWithDouble_withDouble_(relativePosX, relativePosY));
          mMotionLayout_->mLastVelocity_ = (float) JavaLangMath_toDegreesWithDouble_(angularVelocity);
        }
        else {
          mMotionLayout_->mLastVelocity_ = 0;
        }
        mLastTouchX_ = [event getRawX];
        mLastTouchY_ = [event getRawY];
      }
      break;
      case ADMotionEvent_ACTION_UP:
      mDragStarted_ = false;
      [velocityTracker computeCurrentVelocityWithInt:16];
      tvx = [velocityTracker getXVelocity];
      tvy = [velocityTracker getYVelocity];
      currentPos = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getProgress];
      pos = currentPos;
      rcx = [mMotionLayout_ getWidth] / 2.0f;
      rcy = [mMotionLayout_ getHeight] / 2.0f;
      if (mRotationCenterId_ != ADXMotionScene_UNSET) {
        ADView *v = JreRetainedLocalValue([mMotionLayout_ findViewByIdWithInt:mRotationCenterId_]);
        [mMotionLayout_ getLocationOnScreenWithIntArray:mTempLoc_];
        rcx = IOSIntArray_Get(nil_chk(mTempLoc_), 0) + ([((ADView *) nil_chk(v)) getLeft] + [v getRight]) / 2.0f;
        rcy = IOSIntArray_Get(nil_chk(mTempLoc_), 1) + ([v getTop] + [v getBottom]) / 2.0f;
      }
      else if (mTouchAnchorId_ != ADXMotionScene_UNSET) {
        ADXMotionController *mc = JreRetainedLocalValue([mMotionLayout_ getMotionControllerWithInt:mTouchAnchorId_]);
        ADView *v = JreRetainedLocalValue([mMotionLayout_ findViewByIdWithInt:[((ADXMotionController *) nil_chk(mc)) getAnimateRelativeTo]]);
        [mMotionLayout_ getLocationOnScreenWithIntArray:mTempLoc_];
        rcx = IOSIntArray_Get(nil_chk(mTempLoc_), 0) + ([((ADView *) nil_chk(v)) getLeft] + [v getRight]) / 2.0f;
        rcy = IOSIntArray_Get(nil_chk(mTempLoc_), 1) + ([v getTop] + [v getBottom]) / 2.0f;
      }
      relativePosX = [event getRawX] - rcx;
      relativePosY = [event getRawY] - rcy;
      angle1 = JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(relativePosY, relativePosX));
      if (mTouchAnchorId_ != ADXMotionScene_UNSET) {
        [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
        *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 1) = (float) JavaLangMath_toDegreesWithDouble_(IOSFloatArray_Get(mAnchorDpDt_, 1));
      }
      else {
        *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 1) = 360;
      }
      angle2 = JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(tvy + relativePosY, tvx + relativePosX));
      drag = (float) ((angle2 - angle1));
      velocity_tweek = ADXTouchResponse_SEC_TO_MILLISECONDS / 16.0f;
      angularVelocity = drag * velocity_tweek;
      if (!JavaLangFloat_isNaNWithFloat_(angularVelocity)) {
        JrePlusAssignFloatF(&pos, 3 * angularVelocity * mDragScale_ / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1));
      }
      if (pos != 0.0f && pos != 1.0f && mOnTouchUp_ != ADXMotionLayout_TOUCH_UP_STOP) {
        angularVelocity = (float) angularVelocity * mDragScale_ / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1);
        float target = (pos < 0.5) ? 0.0f : 1.0f;
        if (mOnTouchUp_ == ADXMotionLayout_TOUCH_UP_NEVER_TO_START) {
          if (currentPos + angularVelocity < 0) {
            angularVelocity = JavaLangMath_absWithFloat_(angularVelocity);
          }
          target = 1;
        }
        if (mOnTouchUp_ == ADXMotionLayout_TOUCH_UP_NEVER_TO_END) {
          if (currentPos + angularVelocity > 1) {
            angularVelocity = -JavaLangMath_absWithFloat_(angularVelocity);
          }
          target = 0;
        }
        [mMotionLayout_ touchAnimateToWithInt:mOnTouchUp_ withFloat:target withFloat:3 * angularVelocity];
        if (0.0f >= currentPos || 1.0f <= currentPos) {
          [mMotionLayout_ setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
        }
      }
      else if (0.0f >= pos || 1.0f <= pos) {
        [mMotionLayout_ setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      }
      break;
    }
  }
}

- (void)processTouchEventWithADMotionEvent:(ADMotionEvent *)event
         withADXMotionLayout_MotionTracker:(id<ADXMotionLayout_MotionTracker>)velocityTracker
                                   withInt:(int32_t)currentState
                        withADXMotionScene:(ADXMotionScene *)motionScene {
  if (mIsRotateMode_) {
    [self processTouchRotateEventWithADMotionEvent:event withADXMotionLayout_MotionTracker:velocityTracker withInt:currentState withADXMotionScene:motionScene];
    return;
  }
  [((id<ADXMotionLayout_MotionTracker>) nil_chk(velocityTracker)) addMovementWithADMotionEvent:event];
  {
    float dy;
    float dx;
    float drag;
    float tvx;
    float tvy;
    float currentPos;
    float pos;
    float movmentInDir;
    float velocity;
    switch ([((ADMotionEvent *) nil_chk(event)) getAction]) {
      case ADMotionEvent_ACTION_DOWN:
      mLastTouchX_ = [event getRawX];
      mLastTouchY_ = [event getRawY];
      mDragStarted_ = false;
      break;
      case ADMotionEvent_ACTION_MOVE:
      dy = [event getRawY] - mLastTouchY_;
      dx = [event getRawX] - mLastTouchX_;
      drag = dx * mTouchDirectionX_ + dy * mTouchDirectionY_;
      if (JavaLangMath_absWithFloat_(drag) > mDragThreshold_ || mDragStarted_) {
        float pos = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getProgress];
        if (!mDragStarted_) {
          mDragStarted_ = true;
          [mMotionLayout_ setProgressWithFloat:pos];
        }
        if (mTouchAnchorId_ != ADXMotionScene_UNSET) {
          [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
        }
        else {
          float minSize = JavaLangMath_minWithInt_withInt_([mMotionLayout_ getWidth], [mMotionLayout_ getHeight]);
          *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 1) = minSize * mTouchDirectionY_;
          *IOSFloatArray_GetRef(mAnchorDpDt_, 0) = minSize * mTouchDirectionX_;
        }
        float movmentInDir = mTouchDirectionX_ * IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0) + mTouchDirectionY_ * IOSFloatArray_Get(mAnchorDpDt_, 1);
        JreTimesAssignFloatF(&movmentInDir, mDragScale_);
        if (JavaLangMath_absWithFloat_(movmentInDir) < 0.01) {
          *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 0) = .01f;
          *IOSFloatArray_GetRef(mAnchorDpDt_, 1) = .01f;
        }
        float change;
        if (mTouchDirectionX_ != 0) {
          change = dx / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0);
        }
        else {
          change = dy / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1);
        }
        pos = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(pos + change, 1), 0);
        if (mOnTouchUp_ == ADXMotionLayout_TOUCH_UP_NEVER_TO_START) {
          pos = JavaLangMath_maxWithFloat_withFloat_(pos, 0.01f);
        }
        if (mOnTouchUp_ == ADXMotionLayout_TOUCH_UP_NEVER_TO_END) {
          pos = JavaLangMath_minWithFloat_withFloat_(pos, 0.99f);
        }
        float current = [mMotionLayout_ getProgress];
        if (pos != current) {
          if (current == 0.0f || current == 1.0f) {
            [mMotionLayout_ endTriggerWithBoolean:current == 0.0f];
          }
          [mMotionLayout_ setProgressWithFloat:pos];
          [velocityTracker computeCurrentVelocityWithInt:ADXTouchResponse_SEC_TO_MILLISECONDS];
          float tvx = [velocityTracker getXVelocity];
          float tvy = [velocityTracker getYVelocity];
          float velocity = (mTouchDirectionX_ != 0) ? tvx / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0) : tvy / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1);
          mMotionLayout_->mLastVelocity_ = velocity;
        }
        else {
          mMotionLayout_->mLastVelocity_ = 0;
        }
        mLastTouchX_ = [event getRawX];
        mLastTouchY_ = [event getRawY];
      }
      break;
      case ADMotionEvent_ACTION_UP:
      mDragStarted_ = false;
      [velocityTracker computeCurrentVelocityWithInt:ADXTouchResponse_SEC_TO_MILLISECONDS];
      tvx = [velocityTracker getXVelocity];
      tvy = [velocityTracker getYVelocity];
      currentPos = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getProgress];
      pos = currentPos;
      if (mTouchAnchorId_ != ADXMotionScene_UNSET) {
        [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
      }
      else {
        float minSize = JavaLangMath_minWithInt_withInt_([mMotionLayout_ getWidth], [mMotionLayout_ getHeight]);
        *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 1) = minSize * mTouchDirectionY_;
        *IOSFloatArray_GetRef(mAnchorDpDt_, 0) = minSize * mTouchDirectionX_;
      }
      movmentInDir = mTouchDirectionX_ * IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0) + mTouchDirectionY_ * IOSFloatArray_Get(mAnchorDpDt_, 1);
      if (mTouchDirectionX_ != 0) {
        velocity = tvx / IOSFloatArray_Get(mAnchorDpDt_, 0);
      }
      else {
        velocity = tvy / IOSFloatArray_Get(mAnchorDpDt_, 1);
      }
      if (!JavaLangFloat_isNaNWithFloat_(velocity)) {
        JrePlusAssignFloatF(&pos, velocity / 3);
      }
      if (pos != 0.0f && pos != 1.0f && mOnTouchUp_ != ADXMotionLayout_TOUCH_UP_STOP) {
        float target = (pos < 0.5) ? 0.0f : 1.0f;
        if (mOnTouchUp_ == ADXMotionLayout_TOUCH_UP_NEVER_TO_START) {
          if (currentPos + velocity < 0) {
            velocity = JavaLangMath_absWithFloat_(velocity);
          }
          target = 1;
        }
        if (mOnTouchUp_ == ADXMotionLayout_TOUCH_UP_NEVER_TO_END) {
          if (currentPos + velocity > 1) {
            velocity = -JavaLangMath_absWithFloat_(velocity);
          }
          target = 0;
        }
        [mMotionLayout_ touchAnimateToWithInt:mOnTouchUp_ withFloat:target withFloat:velocity];
        if (0.0f >= currentPos || 1.0f <= currentPos) {
          [mMotionLayout_ setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
        }
      }
      else if (0.0f >= pos || 1.0f <= pos) {
        [mMotionLayout_ setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      }
      break;
    }
  }
}

- (void)setDownWithFloat:(float)lastTouchX
               withFloat:(float)lastTouchY {
  mLastTouchX_ = lastTouchX;
  mLastTouchY_ = lastTouchY;
}

- (float)getProgressDirectionWithFloat:(float)dx
                             withFloat:(float)dy {
  float pos = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getProgress];
  [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
  float velocity;
  if (mTouchDirectionX_ != 0) {
    if (IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0) == 0) {
      *IOSFloatArray_GetRef(mAnchorDpDt_, 0) = ADXTouchResponse_EPSILON;
    }
    velocity = dx * mTouchDirectionX_ / IOSFloatArray_Get(mAnchorDpDt_, 0);
  }
  else {
    if (IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1) == 0) {
      *IOSFloatArray_GetRef(mAnchorDpDt_, 1) = ADXTouchResponse_EPSILON;
    }
    velocity = dy * mTouchDirectionY_ / IOSFloatArray_Get(mAnchorDpDt_, 1);
  }
  return velocity;
}

- (void)scrollUpWithFloat:(float)dx
                withFloat:(float)dy {
  mDragStarted_ = false;
  float pos = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getProgress];
  [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
  float movmentInDir = mTouchDirectionX_ * IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0) + mTouchDirectionY_ * IOSFloatArray_Get(mAnchorDpDt_, 1);
  float velocity;
  if (mTouchDirectionX_ != 0) {
    velocity = dx * mTouchDirectionX_ / IOSFloatArray_Get(mAnchorDpDt_, 0);
  }
  else {
    velocity = dy * mTouchDirectionY_ / IOSFloatArray_Get(mAnchorDpDt_, 1);
  }
  if (!JavaLangFloat_isNaNWithFloat_(velocity)) {
    JrePlusAssignFloatF(&pos, velocity / 3);
  }
  if (pos != 0.0f && (pos != 1.0f) & (mOnTouchUp_ != ADXMotionLayout_TOUCH_UP_STOP)) {
    [mMotionLayout_ touchAnimateToWithInt:mOnTouchUp_ withFloat:(pos < 0.5) ? 0.0f : 1.0f withFloat:velocity];
  }
}

- (void)scrollMoveWithFloat:(float)dx
                  withFloat:(float)dy {
  float drag = dx * mTouchDirectionX_ + dy * mTouchDirectionY_;
  {
    float pos = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getProgress];
    if (!mDragStarted_) {
      mDragStarted_ = true;
      [mMotionLayout_ setProgressWithFloat:pos];
    }
    [mMotionLayout_ getAnchorDpDtWithInt:mTouchAnchorId_ withFloat:pos withFloat:mTouchAnchorX_ withFloat:mTouchAnchorY_ withFloatArray:mAnchorDpDt_];
    float movmentInDir = mTouchDirectionX_ * IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0) + mTouchDirectionY_ * IOSFloatArray_Get(mAnchorDpDt_, 1);
    if (JavaLangMath_absWithFloat_(movmentInDir) < 0.01) {
      *IOSFloatArray_GetRef(nil_chk(mAnchorDpDt_), 0) = .01f;
      *IOSFloatArray_GetRef(mAnchorDpDt_, 1) = .01f;
    }
    float change;
    if (mTouchDirectionX_ != 0) {
      change = dx * mTouchDirectionX_ / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 0);
    }
    else {
      change = dy * mTouchDirectionY_ / IOSFloatArray_Get(nil_chk(mAnchorDpDt_), 1);
    }
    pos = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(pos + change, 1), 0);
    if (pos != [mMotionLayout_ getProgress]) {
      [mMotionLayout_ setProgressWithFloat:pos];
    }
  }
}

- (void)setupTouch {
  ADView *view = nil;
  if (mTouchAnchorId_ != -1) {
    view = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) findViewByIdWithInt:mTouchAnchorId_];
    if (view == nil) {
      ADLog_eWithNSString_withNSString_(ADXTouchResponse_TAG, JreStrcat("$I", @"cannot find TouchAnchorId @id/", ADXCLDebug_getNameWithADContext_withInt_([mMotionLayout_ getContext], mTouchAnchorId_)));
    }
  }
  if ([view isKindOfClass:[ADXNestedScrollView class]]) {
    ADXNestedScrollView *sv = (ADXNestedScrollView *) view;
    [((ADXNestedScrollView *) nil_chk(sv)) setOnTouchListenerWithADView_OnTouchListener:create_ADXTouchResponse_1_init()];
    [sv setOnScrollChangeListenerWithADXNestedScrollView_OnScrollChangeListener:create_ADXTouchResponse_2_init()];
  }
}

- (void)setAnchorIdWithInt:(int32_t)id_ {
  mTouchAnchorId_ = id_;
}

- (int32_t)getAnchorId {
  return mTouchAnchorId_;
}

- (void)setTouchAnchorLocationWithFloat:(float)x
                              withFloat:(float)y {
  mTouchAnchorX_ = x;
  mTouchAnchorY_ = y;
}

- (void)setMaxVelocityWithFloat:(float)velocity {
  mMaxVelocity_ = velocity;
}

- (void)setMaxAccelerationWithFloat:(float)acceleration {
  mMaxAcceleration_ = acceleration;
}

- (float)getMaxAcceleration {
  return mMaxAcceleration_;
}

- (float)getMaxVelocity {
  return mMaxVelocity_;
}

- (bool)getMoveWhenScrollAtTop {
  return mMoveWhenScrollAtTop_;
}

- (int32_t)getAutoCompleteMode {
  return mAutoCompleteMode_;
}

- (void)setAutoCompleteModeWithInt:(int32_t)autoCompleteMode {
  mAutoCompleteMode_ = autoCompleteMode;
}

- (ADRectF *)getTouchRegionWithADViewGroup:(ADViewGroup *)layout
                               withADRectF:(ADRectF *)rect {
  if (mTouchRegionId_ == ADXMotionScene_UNSET) {
    return nil;
  }
  ADView *view = JreRetainedLocalValue([((ADViewGroup *) nil_chk(layout)) findViewByIdWithInt:mTouchRegionId_]);
  if (view == nil) {
    return nil;
  }
  [((ADRectF *) nil_chk(rect)) setWithFloat:[view getLeft] withFloat:[view getTop] withFloat:[view getRight] withFloat:[view getBottom]];
  return rect;
}

- (int32_t)getTouchRegionId {
  return mTouchRegionId_;
}

- (ADRectF *)getLimitBoundsToWithADViewGroup:(ADViewGroup *)layout
                                 withADRectF:(ADRectF *)rect {
  if (mLimitBoundsTo_ == ADXMotionScene_UNSET) {
    return nil;
  }
  ADView *view = JreRetainedLocalValue([((ADViewGroup *) nil_chk(layout)) findViewByIdWithInt:mLimitBoundsTo_]);
  if (view == nil) {
    return nil;
  }
  [((ADRectF *) nil_chk(rect)) setWithFloat:[view getLeft] withFloat:[view getTop] withFloat:[view getRight] withFloat:[view getBottom]];
  return rect;
}

- (int32_t)getLimitBoundsToId {
  return mLimitBoundsTo_;
}

- (float)dotWithFloat:(float)dx
            withFloat:(float)dy {
  return dx * mTouchDirectionX_ + dy * mTouchDirectionY_;
}

- (NSString *)description {
  return (JavaLangFloat_isNaNWithFloat_(mTouchDirectionX_)) ? @"rotation" : (JreStrcat("F$F", mTouchDirectionX_, @" , ", mTouchDirectionY_));
}

- (int32_t)getFlags {
  return mFlags_;
}

- (void)setTouchUpModeWithInt:(int32_t)touchUpMode {
  mOnTouchUp_ = touchUpMode;
}

- (float)getSpringStiffness {
  return mSpringStiffness_;
}

- (float)getSpringMass {
  return mSpringMass_;
}

- (float)getSpringDamping {
  return mSpringDamping_;
}

- (float)getSpringStopThreshold {
  return mSpringStopThreshold_;
}

- (int32_t)getSpringBoundary {
  return mSpringBoundary_;
}

- (void)dealloc {
  RELEASE_(mAnchorDpDt_);
  RELEASE_(mTempLoc_);
  RELEASE_(mMotionLayout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 13, -1, -1, -1, -1 },
    { NULL, "LADRectF;", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRectF;", 0x0, 21, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 22, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 13, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXMotionLayout:withADXOnSwipe:);
  methods[1].selector = @selector(setRTLWithBoolean:);
  methods[2].selector = @selector(setUpTouchEventWithFloat:withFloat:);
  methods[3].selector = @selector(processTouchRotateEventWithADMotionEvent:withADXMotionLayout_MotionTracker:withInt:withADXMotionScene:);
  methods[4].selector = @selector(processTouchEventWithADMotionEvent:withADXMotionLayout_MotionTracker:withInt:withADXMotionScene:);
  methods[5].selector = @selector(setDownWithFloat:withFloat:);
  methods[6].selector = @selector(getProgressDirectionWithFloat:withFloat:);
  methods[7].selector = @selector(scrollUpWithFloat:withFloat:);
  methods[8].selector = @selector(scrollMoveWithFloat:withFloat:);
  methods[9].selector = @selector(setupTouch);
  methods[10].selector = @selector(setAnchorIdWithInt:);
  methods[11].selector = @selector(getAnchorId);
  methods[12].selector = @selector(setTouchAnchorLocationWithFloat:withFloat:);
  methods[13].selector = @selector(setMaxVelocityWithFloat:);
  methods[14].selector = @selector(setMaxAccelerationWithFloat:);
  methods[15].selector = @selector(getMaxAcceleration);
  methods[16].selector = @selector(getMaxVelocity);
  methods[17].selector = @selector(getMoveWhenScrollAtTop);
  methods[18].selector = @selector(getAutoCompleteMode);
  methods[19].selector = @selector(setAutoCompleteModeWithInt:);
  methods[20].selector = @selector(getTouchRegionWithADViewGroup:withADRectF:);
  methods[21].selector = @selector(getTouchRegionId);
  methods[22].selector = @selector(getLimitBoundsToWithADViewGroup:withADRectF:);
  methods[23].selector = @selector(getLimitBoundsToId);
  methods[24].selector = @selector(dotWithFloat:withFloat:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(getFlags);
  methods[27].selector = @selector(setTouchUpModeWithInt:);
  methods[28].selector = @selector(getSpringStiffness);
  methods[29].selector = @selector(getSpringMass);
  methods[30].selector = @selector(getSpringDamping);
  methods[31].selector = @selector(getSpringStopThreshold);
  methods[32].selector = @selector(getSpringBoundary);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXTouchResponse_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "mTouchAnchorSide_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSide_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnTouchUp_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchAnchorId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchRegionId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLimitBoundsTo_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchAnchorY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchAnchorX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotateCenterX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRotateCenterY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRotationCenterId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsRotateMode_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTouchDirectionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchDirectionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDragStarted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAnchorDpDt_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTempLoc_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastTouchX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastTouchY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMotionLayout_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SEC_TO_MILLISECONDS", "I", .constantValue.asInt = ADXTouchResponse_SEC_TO_MILLISECONDS, 0x1a, -1, -1, -1, -1 },
    { "EPSILON", "F", .constantValue.asFloat = ADXTouchResponse_EPSILON, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_SIDES", "[[F", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "TOUCH_DIRECTION", "[[F", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "TOUCH_UP", "I", .constantValue.asInt = ADXTouchResponse_TOUCH_UP, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_DOWN", "I", .constantValue.asInt = ADXTouchResponse_TOUCH_DOWN, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_LEFT", "I", .constantValue.asInt = ADXTouchResponse_TOUCH_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_RIGHT", "I", .constantValue.asInt = ADXTouchResponse_TOUCH_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_START", "I", .constantValue.asInt = ADXTouchResponse_TOUCH_START, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_END", "I", .constantValue.asInt = ADXTouchResponse_TOUCH_END, 0x1a, -1, -1, -1, -1 },
    { "SIDE_TOP", "I", .constantValue.asInt = ADXTouchResponse_SIDE_TOP, 0x1a, -1, -1, -1, -1 },
    { "SIDE_LEFT", "I", .constantValue.asInt = ADXTouchResponse_SIDE_LEFT, 0x1a, -1, -1, -1, -1 },
    { "SIDE_RIGHT", "I", .constantValue.asInt = ADXTouchResponse_SIDE_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "SIDE_BOTTOM", "I", .constantValue.asInt = ADXTouchResponse_SIDE_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "SIDE_MIDDLE", "I", .constantValue.asInt = ADXTouchResponse_SIDE_MIDDLE, 0x1a, -1, -1, -1, -1 },
    { "SIDE_START", "I", .constantValue.asInt = ADXTouchResponse_SIDE_START, 0x1a, -1, -1, -1, -1 },
    { "SIDE_END", "I", .constantValue.asInt = ADXTouchResponse_SIDE_END, 0x1a, -1, -1, -1, -1 },
    { "mMaxVelocity_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxAcceleration_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMoveWhenScrollAtTop_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDragScale_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFlags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FLAG_DISABLE_POST_SCROLL", "I", .constantValue.asInt = ADXTouchResponse_FLAG_DISABLE_POST_SCROLL, 0x18, -1, -1, -1, -1 },
    { "FLAG_DISABLE_SCROLL", "I", .constantValue.asInt = ADXTouchResponse_FLAG_DISABLE_SCROLL, 0x18, -1, -1, -1, -1 },
    { "FLAG_SUPPORT_SCROLL_UP", "I", .constantValue.asInt = ADXTouchResponse_FLAG_SUPPORT_SCROLL_UP, 0x18, -1, -1, -1, -1 },
    { "mDragThreshold_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpringDamping_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpringMass_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpringStiffness_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpringStopThreshold_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpringBoundary_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAutoCompleteMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "COMPLETE_MODE_CONTINUOUS_VELOCITY", "I", .constantValue.asInt = ADXTouchResponse_COMPLETE_MODE_CONTINUOUS_VELOCITY, 0x19, -1, -1, -1, -1 },
    { "COMPLETE_MODE_SPRING", "I", .constantValue.asInt = ADXTouchResponse_COMPLETE_MODE_SPRING, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionLayout;LADXOnSwipe;", "setRTL", "Z", "setUpTouchEvent", "FF", "processTouchRotateEvent", "LADMotionEvent;LADXMotionLayout_MotionTracker;ILADXMotionScene;", "processTouchEvent", "setDown", "getProgressDirection", "scrollUp", "scrollMove", "setAnchorId", "I", "setTouchAnchorLocation", "setMaxVelocity", "F", "setMaxAcceleration", "setAutoCompleteMode", "getTouchRegion", "LADViewGroup;LADRectF;", "getLimitBoundsTo", "dot", "toString", "setTouchUpMode", &ADXTouchResponse_TAG, &ADXTouchResponse_TOUCH_SIDES, &ADXTouchResponse_TOUCH_DIRECTION };
  static const J2ObjcClassInfo _ADXTouchResponse = { "TouchResponse", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x0, 33, 56, -1, -1, -1, -1, -1 };
  return &_ADXTouchResponse;
}

+ (void)initialize {
  if (self == [ADXTouchResponse class]) {
    JreStrongAssignAndConsume(&ADXTouchResponse_TOUCH_SIDES, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSFloatArray arrayWithFloats:(float[]){ 0.5f, 0.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, 0.5f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 1.0f, 0.5f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 0.5f, 1.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 0.5f, 0.5f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, 0.5f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 1.0f, 0.5f } count:2] } count:7 type:IOSClass_floatArray(1)]);
    JreStrongAssignAndConsume(&ADXTouchResponse_TOUCH_DIRECTION, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, -1.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, 1.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ -1.0f, 0.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 1.0f, 0.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ -1.0f, 0.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 1.0f, 0.0f } count:2] } count:6 type:IOSClass_floatArray(1)]);
    J2OBJC_SET_INITIALIZED(ADXTouchResponse)
  }
}

@end

void ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(ADXTouchResponse *self, ADXMotionLayout *layout, ADXOnSwipe *onSwipe) {
  NSObject_init(self);
  self->mTouchAnchorSide_ = 0;
  self->mTouchSide_ = 0;
  self->mOnTouchUp_ = 0;
  self->mTouchAnchorId_ = ADXMotionScene_UNSET;
  self->mTouchRegionId_ = ADXMotionScene_UNSET;
  self->mLimitBoundsTo_ = ADXMotionScene_UNSET;
  self->mTouchAnchorY_ = 0.5f;
  self->mTouchAnchorX_ = 0.5f;
  self->mRotateCenterX_ = 0.5f;
  self->mRotateCenterY_ = 0.5f;
  self->mRotationCenterId_ = ADXMotionScene_UNSET;
  self->mIsRotateMode_ = false;
  self->mTouchDirectionX_ = 0;
  self->mTouchDirectionY_ = 1;
  self->mDragStarted_ = false;
  JreStrongAssignAndConsume(&self->mAnchorDpDt_, [IOSFloatArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mTempLoc_, [IOSIntArray newArrayWithLength:2]);
  self->mMaxVelocity_ = 4;
  self->mMaxAcceleration_ = 1.2f;
  self->mMoveWhenScrollAtTop_ = true;
  self->mDragScale_ = 1.0f;
  self->mFlags_ = 0;
  self->mDragThreshold_ = 10;
  self->mSpringDamping_ = 10;
  self->mSpringMass_ = 1;
  self->mSpringStiffness_ = JavaLangFloat_NaN;
  self->mSpringStopThreshold_ = JavaLangFloat_NaN;
  self->mSpringBoundary_ = 0;
  self->mAutoCompleteMode_ = ADXTouchResponse_COMPLETE_MODE_CONTINUOUS_VELOCITY;
  JreStrongAssign(&self->mMotionLayout_, layout);
  self->mTouchAnchorId_ = [((ADXOnSwipe *) nil_chk(onSwipe)) getTouchAnchorId];
  self->mTouchAnchorSide_ = [onSwipe getTouchAnchorSide];
  if (self->mTouchAnchorSide_ != -1) {
    self->mTouchAnchorX_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(ADXTouchResponse_TOUCH_SIDES), self->mTouchAnchorSide_)), 0);
    self->mTouchAnchorY_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_SIDES, self->mTouchAnchorSide_)), 1);
  }
  self->mTouchSide_ = [onSwipe getDragDirection];
  if (self->mTouchSide_ < ((IOSObjectArray *) nil_chk(ADXTouchResponse_TOUCH_DIRECTION))->size_) {
    self->mTouchDirectionX_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, self->mTouchSide_)), 0);
    self->mTouchDirectionY_ = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(ADXTouchResponse_TOUCH_DIRECTION, self->mTouchSide_)), 1);
  }
  else {
    self->mTouchDirectionX_ = self->mTouchDirectionY_ = JavaLangFloat_NaN;
    self->mIsRotateMode_ = true;
  }
  self->mMaxVelocity_ = [onSwipe getMaxVelocity];
  self->mMaxAcceleration_ = [onSwipe getMaxAcceleration];
  self->mMoveWhenScrollAtTop_ = [onSwipe getMoveWhenScrollAtTop];
  self->mDragScale_ = [onSwipe getDragScale];
  self->mDragThreshold_ = [onSwipe getDragThreshold];
  self->mTouchRegionId_ = [onSwipe getTouchRegionId];
  self->mOnTouchUp_ = [onSwipe getOnTouchUp];
  self->mFlags_ = [onSwipe getNestedScrollFlags];
  self->mLimitBoundsTo_ = [onSwipe getLimitBoundsTo];
  self->mRotationCenterId_ = [onSwipe getRotationCenterId];
  self->mSpringBoundary_ = [onSwipe getSpringBoundary];
  self->mSpringDamping_ = [onSwipe getSpringDamping];
  self->mSpringMass_ = [onSwipe getSpringMass];
  self->mSpringStiffness_ = [onSwipe getSpringStiffness];
  self->mSpringStopThreshold_ = [onSwipe getSpringStopThreshold];
  self->mAutoCompleteMode_ = [onSwipe getAutoCompleteMode];
}

ADXTouchResponse *new_ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(ADXMotionLayout *layout, ADXOnSwipe *onSwipe) {
  J2OBJC_NEW_IMPL(ADXTouchResponse, initPackagePrivateWithADXMotionLayout_withADXOnSwipe_, layout, onSwipe)
}

ADXTouchResponse *create_ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(ADXMotionLayout *layout, ADXOnSwipe *onSwipe) {
  J2OBJC_CREATE_IMPL(ADXTouchResponse, initPackagePrivateWithADXMotionLayout_withADXOnSwipe_, layout, onSwipe)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXTouchResponse)

@implementation ADXTouchResponse_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXTouchResponse_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (bool)onTouchWithADView:(ADView *)view
        withADMotionEvent:(ADMotionEvent *)motionEvent {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onTouchWithADView:withADMotionEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onTouch", "LADView;LADMotionEvent;", "LADXTouchResponse;", "setupTouch" };
  static const J2ObjcClassInfo _ADXTouchResponse_1 = { "", "androidx.constraintlayout.motion.widget", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 2, -1, 3, -1, -1 };
  return &_ADXTouchResponse_1;
}

@end

void ADXTouchResponse_1_init(ADXTouchResponse_1 *self) {
  NSObject_init(self);
}

ADXTouchResponse_1 *new_ADXTouchResponse_1_init() {
  J2OBJC_NEW_IMPL(ADXTouchResponse_1, init)
}

ADXTouchResponse_1 *create_ADXTouchResponse_1_init() {
  J2OBJC_CREATE_IMPL(ADXTouchResponse_1, init)
}

@implementation ADXTouchResponse_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXTouchResponse_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onScrollChangeWithADXNestedScrollView:(ADXNestedScrollView *)v
                                      withInt:(int32_t)scrollX
                                      withInt:(int32_t)scrollY
                                      withInt:(int32_t)oldScrollX
                                      withInt:(int32_t)oldScrollY {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onScrollChangeWithADXNestedScrollView:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onScrollChange", "LADXNestedScrollView;IIII", "LADXTouchResponse;", "setupTouch" };
  static const J2ObjcClassInfo _ADXTouchResponse_2 = { "", "androidx.constraintlayout.motion.widget", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 2, -1, 3, -1, -1 };
  return &_ADXTouchResponse_2;
}

@end

void ADXTouchResponse_2_init(ADXTouchResponse_2 *self) {
  NSObject_init(self);
}

ADXTouchResponse_2 *new_ADXTouchResponse_2_init() {
  J2OBJC_NEW_IMPL(ADXTouchResponse_2, init)
}

ADXTouchResponse_2 *create_ADXTouchResponse_2_init() {
  J2OBJC_CREATE_IMPL(ADXTouchResponse_2, init)
}
