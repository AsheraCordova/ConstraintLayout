//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\WidgetRun.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_WidgetRun")
#ifdef RESTRICT_WidgetRun
#define INCLUDE_ALL_WidgetRun 0
#else
#define INCLUDE_ALL_WidgetRun 1
#endif
#undef RESTRICT_WidgetRun

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXWidgetRun_) && (INCLUDE_ALL_WidgetRun || defined(INCLUDE_ADXWidgetRun))
#define ADXWidgetRun_

#define RESTRICT_Dependency 1
#define INCLUDE_ADXDependency 1
#include "Dependency.h"

@class ADXConstraintAnchor;
@class ADXConstraintWidget;
@class ADXConstraintWidget_DimensionBehaviour;
@class ADXDependencyNode;
@class ADXDimensionDependency;
@class ADXRunGroup;
@class ADXWidgetRun_RunType;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;

@interface ADXWidgetRun : NSObject < ADXDependency > {
 @public
  int32_t matchConstraintsType_;
  ADXConstraintWidget *widget_;
  ADXRunGroup *runGroup_;
  ADXConstraintWidget_DimensionBehaviour *dimensionBehavior_;
  ADXDimensionDependency *dimension_;
  int32_t orientation_;
  bool resolved_;
  ADXDependencyNode *start_;
  ADXDependencyNode *end_;
  ADXWidgetRun_RunType *mRunType_;
}

#pragma mark Public

- (instancetype)initWithADXConstraintWidget:(ADXConstraintWidget *)widget;

- (int64_t)getWrapDimension;

- (bool)isCenterConnection;

- (bool)isDimensionResolved;

- (bool)isResolved;

- (void)updateWithADXDependency:(id<ADXDependency>)dependency;

- (int64_t)wrapSizeWithInt:(int32_t)direction;

#pragma mark Protected

- (void)addTargetWithADXDependencyNode:(ADXDependencyNode *)node
                 withADXDependencyNode:(ADXDependencyNode *)target
                               withInt:(int32_t)margin;

- (void)addTargetWithADXDependencyNode:(ADXDependencyNode *)node
                 withADXDependencyNode:(ADXDependencyNode *)target
                               withInt:(int32_t)marginFactor
            withADXDimensionDependency:(ADXDimensionDependency *)dimensionDependency;

- (int32_t)getLimitedDimensionWithInt:(int32_t)dimension
                              withInt:(int32_t)orientation;

- (ADXDependencyNode *)getTargetWithADXConstraintAnchor:(ADXConstraintAnchor *)anchor;

- (ADXDependencyNode *)getTargetWithADXConstraintAnchor:(ADXConstraintAnchor *)anchor
                                                withInt:(int32_t)orientation;

- (void)updateRunCenterWithADXDependency:(id<ADXDependency>)dependency
                 withADXConstraintAnchor:(ADXConstraintAnchor *)startAnchor
                 withADXConstraintAnchor:(ADXConstraintAnchor *)endAnchor
                                 withInt:(int32_t)orientation;

- (void)updateRunEndWithADXDependency:(id<ADXDependency>)dependency;

- (void)updateRunStartWithADXDependency:(id<ADXDependency>)dependency;

#pragma mark Package-Private

- (void)apply;

- (void)applyToWidget;

- (void)clear;

- (void)reset;

- (bool)supportsWrapComputation;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXWidgetRun)

J2OBJC_FIELD_SETTER(ADXWidgetRun, widget_, ADXConstraintWidget *)
J2OBJC_FIELD_SETTER(ADXWidgetRun, runGroup_, ADXRunGroup *)
J2OBJC_FIELD_SETTER(ADXWidgetRun, dimensionBehavior_, ADXConstraintWidget_DimensionBehaviour *)
J2OBJC_FIELD_SETTER(ADXWidgetRun, dimension_, ADXDimensionDependency *)
J2OBJC_FIELD_SETTER(ADXWidgetRun, start_, ADXDependencyNode *)
J2OBJC_FIELD_SETTER(ADXWidgetRun, end_, ADXDependencyNode *)
J2OBJC_FIELD_SETTER(ADXWidgetRun, mRunType_, ADXWidgetRun_RunType *)

FOUNDATION_EXPORT void ADXWidgetRun_initWithADXConstraintWidget_(ADXWidgetRun *self, ADXConstraintWidget *widget);

J2OBJC_TYPE_LITERAL_HEADER(ADXWidgetRun)

@compatibility_alias AndroidxConstraintlayoutCoreWidgetsAnalyzerWidgetRun ADXWidgetRun;


#endif

#if !defined (ADXWidgetRun_RunType_) && (INCLUDE_ALL_WidgetRun || defined(INCLUDE_ADXWidgetRun_RunType))
#define ADXWidgetRun_RunType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXWidgetRun_RunType_Enum) {
  ADXWidgetRun_RunType_Enum_NONE NS_SWIFT_NAME(none) = 0,
  ADXWidgetRun_RunType_Enum_START NS_SWIFT_NAME(start) = 1,
  ADXWidgetRun_RunType_Enum_END NS_SWIFT_NAME(end) = 2,
  ADXWidgetRun_RunType_Enum_CENTER NS_SWIFT_NAME(center) = 3,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXWidgetRun_RunType_ORDINAL int32_t
#else
#define ADXWidgetRun_RunType_ORDINAL ADXWidgetRun_RunType_Enum
#endif


@interface ADXWidgetRun_RunType : JavaLangEnum

#pragma mark Public

+ (ADXWidgetRun_RunType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXWidgetRun_RunType_Enum)toNSEnum;

@property(readonly) ADXWidgetRun_RunType_Enum enumValue;
+ (ADXWidgetRun_RunType *)fromNSEnum:(ADXWidgetRun_RunType_Enum)value;

- (ADXWidgetRun_RunType_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithRunType:(ADXWidgetRun_RunType_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXWidgetRun_RunType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXWidgetRun_RunType *ADXWidgetRun_RunType_values_[];

inline ADXWidgetRun_RunType *ADXWidgetRun_RunType_get_NONE(void);
J2OBJC_ENUM_CONSTANT(ADXWidgetRun_RunType, NONE)

inline ADXWidgetRun_RunType *ADXWidgetRun_RunType_get_START(void);
J2OBJC_ENUM_CONSTANT(ADXWidgetRun_RunType, START)

inline ADXWidgetRun_RunType *ADXWidgetRun_RunType_get_END(void);
J2OBJC_ENUM_CONSTANT(ADXWidgetRun_RunType, END)

inline ADXWidgetRun_RunType *ADXWidgetRun_RunType_get_CENTER(void);
J2OBJC_ENUM_CONSTANT(ADXWidgetRun_RunType, CENTER)

FOUNDATION_EXPORT IOSObjectArray *ADXWidgetRun_RunType_values(void);

FOUNDATION_EXPORT ADXWidgetRun_RunType *ADXWidgetRun_RunType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXWidgetRun_RunType *ADXWidgetRun_RunType_fromOrdinal(ADXWidgetRun_RunType_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXWidgetRun_RunType)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_WidgetRun")
