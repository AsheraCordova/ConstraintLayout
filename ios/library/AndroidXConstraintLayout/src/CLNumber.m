//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLNumber.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CLElement.h"
#include "CLNumber.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@implementation ADXCLNumber

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLNumber_initWithCharArray_(self, content);
  return self;
}

- (instancetype)initWithFloat:(float)value {
  ADXCLNumber_initWithFloat_(self, value);
  return self;
}

+ (ADXCLElement *)allocateWithCharArray:(IOSCharArray *)content {
  return ADXCLNumber_allocateWithCharArray_(content);
}

- (NSString *)toJSON {
  float value = [self getFloat];
  int32_t intValue = JreFpToInt(value);
  if ((float) intValue == value) {
    return JreStrcat("I", intValue);
  }
  return JreStrcat("F", value);
}

- (NSString *)toFormattedJSONWithInt:(int32_t)indent
                             withInt:(int32_t)forceIndent {
  JavaLangStringBuilder *json = create_JavaLangStringBuilder_init();
  [self addIndentWithJavaLangStringBuilder:json withInt:indent];
  float value = [self getFloat];
  int32_t intValue = JreFpToInt(value);
  if ((float) intValue == value) {
    [json appendWithInt:intValue];
  }
  else {
    [json appendWithFloat:value];
  }
  return [json description];
}

- (bool)isInt {
  float value = [self getFloat];
  int32_t intValue = JreFpToInt(value);
  return (float) intValue == value;
}

- (int32_t)getInt {
  if (JavaLangFloat_isNaNWithFloat_(value_)) {
    value_ = JavaLangInteger_parseIntWithNSString_([self content]);
  }
  return JreFpToInt(value_);
}

- (float)getFloat {
  if (JavaLangFloat_isNaNWithFloat_(value_)) {
    value_ = JavaLangFloat_parseFloatWithNSString_([self content]);
  }
  return value_;
}

- (void)putValueWithFloat:(float)value {
  self->value_ = value;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x9, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(initWithFloat:);
  methods[2].selector = @selector(allocateWithCharArray:);
  methods[3].selector = @selector(toJSON);
  methods[4].selector = @selector(toFormattedJSONWithInt:withInt:);
  methods[5].selector = @selector(isInt);
  methods[6].selector = @selector(getInt);
  methods[7].selector = @selector(getFloat);
  methods[8].selector = @selector(putValueWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "F", "allocate", "toFormattedJSON", "II", "putValue" };
  static const J2ObjcClassInfo _ADXCLNumber = { "CLNumber", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_ADXCLNumber;
}

@end

void ADXCLNumber_initWithCharArray_(ADXCLNumber *self, IOSCharArray *content) {
  ADXCLElement_initWithCharArray_(self, content);
  self->value_ = JavaLangFloat_NaN;
}

ADXCLNumber *new_ADXCLNumber_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLNumber, initWithCharArray_, content)
}

ADXCLNumber *create_ADXCLNumber_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLNumber, initWithCharArray_, content)
}

void ADXCLNumber_initWithFloat_(ADXCLNumber *self, float value) {
  ADXCLElement_initWithCharArray_(self, nil);
  self->value_ = JavaLangFloat_NaN;
  self->value_ = value;
}

ADXCLNumber *new_ADXCLNumber_initWithFloat_(float value) {
  J2OBJC_NEW_IMPL(ADXCLNumber, initWithFloat_, value)
}

ADXCLNumber *create_ADXCLNumber_initWithFloat_(float value) {
  J2OBJC_CREATE_IMPL(ADXCLNumber, initWithFloat_, value)
}

ADXCLElement *ADXCLNumber_allocateWithCharArray_(IOSCharArray *content) {
  ADXCLNumber_initialize();
  return create_ADXCLNumber_initWithCharArray_(content);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLNumber)

J2OBJC_NAME_MAPPING(ADXCLNumber, "androidx.constraintlayout.core.parser", "ADX")
