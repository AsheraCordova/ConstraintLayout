//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\parse\KeyParser.java
//

#include "CLElement.h"
#include "CLKey.h"
#include "CLObject.h"
#include "CLParser.h"
#include "CLParsingException.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "KeyParser.h"
#include "TypedBundle.h"
#include "TypedValues.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@protocol ADXKeyParser_DataType;
@protocol ADXKeyParser_Ids;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADXKeyParser ()

+ (ADXTypedBundle *)parseWithNSString:(NSString *)str
                 withADXKeyParser_Ids:(id<ADXKeyParser_Ids>)table
            withADXKeyParser_DataType:(id<ADXKeyParser_DataType>)dtype;

@end

__attribute__((unused)) static ADXTypedBundle *ADXKeyParser_parseWithNSString_withADXKeyParser_Ids_withADXKeyParser_DataType_(NSString *str, id<ADXKeyParser_Ids> table, id<ADXKeyParser_DataType> dtype);

@protocol ADXKeyParser_Ids < JavaObject >

- (jint)getWithNSString:(NSString *)str;

@end

@interface ADXKeyParser_Ids : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyParser_Ids)

J2OBJC_TYPE_LITERAL_HEADER(ADXKeyParser_Ids)

@protocol ADXKeyParser_DataType < JavaObject >

- (jint)getWithInt:(jint)str;

@end

@interface ADXKeyParser_DataType : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyParser_DataType)

J2OBJC_TYPE_LITERAL_HEADER(ADXKeyParser_DataType)

@interface ADXKeyParser_$Lambda$1 : NSObject < ADXKeyParser_Ids >

- (jint)getWithNSString:(NSString *)a;

@end

J2OBJC_STATIC_INIT(ADXKeyParser_$Lambda$1)

inline ADXKeyParser_$Lambda$1 *ADXKeyParser_$Lambda$1_get_instance(void);
static ADXKeyParser_$Lambda$1 *ADXKeyParser_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyParser_$Lambda$1, instance, ADXKeyParser_$Lambda$1 *)

__attribute__((unused)) static void ADXKeyParser_$Lambda$1_init(ADXKeyParser_$Lambda$1 *self);

__attribute__((unused)) static ADXKeyParser_$Lambda$1 *new_ADXKeyParser_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyParser_$Lambda$1 *create_ADXKeyParser_$Lambda$1_init(void);

@interface ADXKeyParser_$Lambda$2 : NSObject < ADXKeyParser_DataType >

- (jint)getWithInt:(jint)a;

@end

J2OBJC_STATIC_INIT(ADXKeyParser_$Lambda$2)

inline ADXKeyParser_$Lambda$2 *ADXKeyParser_$Lambda$2_get_instance(void);
static ADXKeyParser_$Lambda$2 *ADXKeyParser_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyParser_$Lambda$2, instance, ADXKeyParser_$Lambda$2 *)

__attribute__((unused)) static void ADXKeyParser_$Lambda$2_init(ADXKeyParser_$Lambda$2 *self);

__attribute__((unused)) static ADXKeyParser_$Lambda$2 *new_ADXKeyParser_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyParser_$Lambda$2 *create_ADXKeyParser_$Lambda$2_init(void);

@implementation ADXKeyParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADXTypedBundle *)parseWithNSString:(NSString *)str
                 withADXKeyParser_Ids:(id<ADXKeyParser_Ids>)table
            withADXKeyParser_DataType:(id<ADXKeyParser_DataType>)dtype {
  return ADXKeyParser_parseWithNSString_withADXKeyParser_Ids_withADXKeyParser_DataType_(str, table, dtype);
}

+ (ADXTypedBundle *)parseAttributesWithNSString:(NSString *)str {
  return ADXKeyParser_parseAttributesWithNSString_(str);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  ADXKeyParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXTypedBundle;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXTypedBundle;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithNSString:withADXKeyParser_Ids:withADXKeyParser_DataType:);
  methods[2].selector = @selector(parseAttributesWithNSString:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parse", "LNSString;LADXKeyParser_Ids;LADXKeyParser_DataType;", "parseAttributes", "LNSString;", "main", "[LNSString;", "LADXKeyParser_Ids;LADXKeyParser_DataType;" };
  static const J2ObjcClassInfo _ADXKeyParser = { "KeyParser", "androidx.constraintlayout.core.motion.parse", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, 6, -1, -1, -1 };
  return &_ADXKeyParser;
}

@end

void ADXKeyParser_init(ADXKeyParser *self) {
  NSObject_init(self);
}

ADXKeyParser *new_ADXKeyParser_init() {
  J2OBJC_NEW_IMPL(ADXKeyParser, init)
}

ADXKeyParser *create_ADXKeyParser_init() {
  J2OBJC_CREATE_IMPL(ADXKeyParser, init)
}

ADXTypedBundle *ADXKeyParser_parseWithNSString_withADXKeyParser_Ids_withADXKeyParser_DataType_(NSString *str, id<ADXKeyParser_Ids> table, id<ADXKeyParser_DataType> dtype) {
  ADXKeyParser_initialize();
  ADXTypedBundle *bundle = create_ADXTypedBundle_init();
  @try {
    ADXCLObject *parsedContent = ADXCLParser_parseWithNSString_(str);
    jint n = [((ADXCLObject *) nil_chk(parsedContent)) size];
    for (jint i = 0; i < n; i++) {
      ADXCLKey *clkey = ((ADXCLKey *) cast_chk([parsedContent getWithInt:i], [ADXCLKey class]));
      NSString *type = JreRetainedLocalValue([((ADXCLKey *) nil_chk(clkey)) content]);
      
      ;
      ADXCLElement *value = JreRetainedLocalValue([clkey getValue]);
      jint id_ = [((id<ADXKeyParser_Ids>) nil_chk(table)) getWithNSString:type];
      if (id_ == -1) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"unknown type ", type)];
        continue;
      }
      switch ([((id<ADXKeyParser_DataType>) nil_chk(dtype)) getWithInt:id_]) {
        case ADXTypedValues_FLOAT_MASK:
        [bundle addWithInt:id_ withFloat:[((ADXCLElement *) nil_chk(value)) getFloat]];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$F", @"parse ", type, @" FLOAT_MASK > ", [value getFloat])];
        break;
        case ADXTypedValues_STRING_MASK:
        [bundle addWithInt:id_ withNSString:[((ADXCLElement *) nil_chk(value)) content]];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", @"parse ", type, @" STRING_MASK > ", [value content])];
        break;
        case ADXTypedValues_INT_MASK:
        [bundle addWithInt:id_ withInt:[((ADXCLElement *) nil_chk(value)) getInt]];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$I", @"parse ", type, @" INT_MASK > ", [value getInt])];
        break;
        case ADXTypedValues_BOOLEAN_MASK:
        [bundle addWithInt:id_ withBoolean:[parsedContent getBooleanWithInt:i]];
        break;
      }
    }
  }
  @catch (ADXCLParsingException *e) {
    [e printStackTrace];
  }
  return bundle;
}

ADXTypedBundle *ADXKeyParser_parseAttributesWithNSString_(NSString *str) {
  ADXKeyParser_initialize();
  return ADXKeyParser_parseWithNSString_withADXKeyParser_Ids_withADXKeyParser_DataType_(str, JreLoadStatic(ADXKeyParser_$Lambda$1, instance), JreLoadStatic(ADXKeyParser_$Lambda$2, instance));
}

void ADXKeyParser_mainWithNSStringArray_(IOSObjectArray *args) {
  ADXKeyParser_initialize();
  NSString *str = @"{frame:22,\ntarget:'widget1',\neasing:'easeIn',\ncurveFit:'spline',\nprogress:0.3,\nalpha:0.2,\nelevation:0.7,\nrotationZ:23,\nrotationX:25.0,\nrotationY:27.0,\npivotX:15,\npivotY:17,\npivotTarget:'32',\npathRotate:23,\nscaleX:0.5,\nscaleY:0.7,\ntranslationX:5,\ntranslationY:7,\ntranslationZ:11,\n}";
  ADXKeyParser_parseAttributesWithNSString_(str);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyParser)

@implementation ADXKeyParser_Ids

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get", "LNSString;", "LADXKeyParser;" };
  static const J2ObjcClassInfo _ADXKeyParser_Ids = { "Ids", "androidx.constraintlayout.core.motion.parse", ptrTable, methods, NULL, 7, 0x60a, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXKeyParser_Ids;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXKeyParser_Ids)

@implementation ADXKeyParser_DataType

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get", "I", "LADXKeyParser;" };
  static const J2ObjcClassInfo _ADXKeyParser_DataType = { "DataType", "androidx.constraintlayout.core.motion.parse", ptrTable, methods, NULL, 7, 0x60a, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXKeyParser_DataType;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXKeyParser_DataType)

J2OBJC_INITIALIZED_DEFN(ADXKeyParser_$Lambda$1)

@implementation ADXKeyParser_$Lambda$1

- (jint)getWithNSString:(NSString *)a {
  return ADXTypedValues_Attributes_getIdWithNSString_(a);
}

+ (void)initialize {
  if (self == [ADXKeyParser_$Lambda$1 class]) {
    JreStrongAssignAndConsume(&ADXKeyParser_$Lambda$1_instance, new_ADXKeyParser_$Lambda$1_init());
    J2OBJC_SET_INITIALIZED(ADXKeyParser_$Lambda$1)
  }
}

@end

void ADXKeyParser_$Lambda$1_init(ADXKeyParser_$Lambda$1 *self) {
  NSObject_init(self);
}

ADXKeyParser_$Lambda$1 *new_ADXKeyParser_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(ADXKeyParser_$Lambda$1, init)
}

ADXKeyParser_$Lambda$1 *create_ADXKeyParser_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(ADXKeyParser_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(ADXKeyParser_$Lambda$2)

@implementation ADXKeyParser_$Lambda$2

- (jint)getWithInt:(jint)a {
  return ADXTypedValues_Attributes_getTypeWithInt_(a);
}

+ (void)initialize {
  if (self == [ADXKeyParser_$Lambda$2 class]) {
    JreStrongAssignAndConsume(&ADXKeyParser_$Lambda$2_instance, new_ADXKeyParser_$Lambda$2_init());
    J2OBJC_SET_INITIALIZED(ADXKeyParser_$Lambda$2)
  }
}

@end

void ADXKeyParser_$Lambda$2_init(ADXKeyParser_$Lambda$2 *self) {
  NSObject_init(self);
}

ADXKeyParser_$Lambda$2 *new_ADXKeyParser_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(ADXKeyParser_$Lambda$2, init)
}

ADXKeyParser_$Lambda$2 *create_ADXKeyParser_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(ADXKeyParser_$Lambda$2, init)
}
