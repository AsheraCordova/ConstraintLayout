//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\state\State.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_State")
#ifdef RESTRICT_State
#define INCLUDE_ALL_State 0
#else
#define INCLUDE_ALL_State 1
#endif
#undef RESTRICT_State

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXState_) && (INCLUDE_ALL_State || defined(INCLUDE_ADXState))
#define ADXState_

@class ADXAlignHorizontallyReference;
@class ADXAlignVerticallyReference;
@class ADXBarrierReference;
@class ADXConstraintReference;
@class ADXConstraintWidgetContainer;
@class ADXDimension;
@class ADXGuidelineReferenceHelper;
@class ADXHelperReference;
@class ADXHorizontalChainReference;
@class ADXState_Direction;
@class ADXState_Helper;
@class ADXVerticalChainReference;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@class NSString;
@protocol ADXReference;

/*!
 @brief Represents a full state of a ConstraintLayout
 */
@interface ADXState : NSObject {
 @public
  JavaUtilHashMap *mReferences_;
  JavaUtilHashMap *mHelperReferences_;
  JavaUtilHashMap *mTags_;
  ADXConstraintReference *mParent_;
}

#pragma mark Public

- (instancetype)init;

- (void)applyWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container;

- (ADXBarrierReference *)barrierWithId:(id)key
                withADXState_Direction:(ADXState_Direction *)direction;

- (ADXAlignHorizontallyReference *)centerHorizontallyWithNSObjectArray:(IOSObjectArray *)references;

- (ADXAlignVerticallyReference *)centerVerticallyWithNSObjectArray:(IOSObjectArray *)references;

- (ADXConstraintReference *)constraintsWithId:(id)key;

/*!
 @brief Implements a conversion function for values, returning int.
 This can be used in case values (e.g. margins) are represented
  via an object, not directly an int.
 @param value the object to convert from
 */
- (int32_t)convertDimensionWithId:(id)value;

/*!
 @brief Create a new reference given a key.
 @param key
 */
- (ADXConstraintReference *)createConstraintReferenceWithId:(id)key;

- (void)directMapping;

- (JavaUtilArrayList *)getIdsForTagWithNSString:(NSString *)tag;

- (ADXGuidelineReferenceHelper *)guidelineWithId:(id)key
                                         withInt:(int32_t)orientation;

- (ADXState *)heightWithADXDimension:(ADXDimension *)dimension;

- (ADXHelperReference *)helperWithId:(id)key
                 withADXState_Helper:(ADXState_Helper *)type;

- (ADXHorizontalChainReference *)horizontalChain;

- (ADXHorizontalChainReference *)horizontalChainWithNSObjectArray:(IOSObjectArray *)references;

- (ADXGuidelineReferenceHelper *)horizontalGuidelineWithId:(id)key;

- (void)mapWithId:(id)key
           withId:(id)view;

- (void)reset;

- (bool)sameFixedHeightWithInt:(int32_t)height;

- (bool)sameFixedWidthWithInt:(int32_t)width;

- (ADXState *)setHeightWithADXDimension:(ADXDimension *)dimension;

- (void)setTagWithNSString:(NSString *)key
              withNSString:(NSString *)tag;

- (ADXState *)setWidthWithADXDimension:(ADXDimension *)dimension;

- (ADXVerticalChainReference *)verticalChain;

- (ADXVerticalChainReference *)verticalChainWithNSObjectArray:(IOSObjectArray *)references;

- (ADXGuidelineReferenceHelper *)verticalGuidelineWithId:(id)key;

- (ADXState *)widthWithADXDimension:(ADXDimension *)dimension;

#pragma mark Package-Private

- (id<ADXReference>)referenceWithId:(id)key;

@end

J2OBJC_STATIC_INIT(ADXState)

J2OBJC_FIELD_SETTER(ADXState, mReferences_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXState, mHelperReferences_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXState, mTags_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXState, mParent_, ADXConstraintReference *)

inline int32_t ADXState_get_UNKNOWN(void);
#define ADXState_UNKNOWN -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXState, UNKNOWN, int32_t)

inline int32_t ADXState_get_CONSTRAINT_SPREAD(void);
#define ADXState_CONSTRAINT_SPREAD 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXState, CONSTRAINT_SPREAD, int32_t)

inline int32_t ADXState_get_CONSTRAINT_WRAP(void);
#define ADXState_CONSTRAINT_WRAP 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXState, CONSTRAINT_WRAP, int32_t)

inline int32_t ADXState_get_CONSTRAINT_RATIO(void);
#define ADXState_CONSTRAINT_RATIO 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXState, CONSTRAINT_RATIO, int32_t)

inline JavaLangInteger *ADXState_get_PARENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *ADXState_PARENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXState, PARENT, JavaLangInteger *)

FOUNDATION_EXPORT void ADXState_init(ADXState *self);

FOUNDATION_EXPORT ADXState *new_ADXState_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXState *create_ADXState_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXState)

@compatibility_alias AndroidxConstraintlayoutCoreStateState ADXState;


#endif

#if !defined (ADXState_Constraint_) && (INCLUDE_ALL_State || defined(INCLUDE_ADXState_Constraint))
#define ADXState_Constraint_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXState_Constraint_Enum) {
  ADXState_Constraint_Enum_LEFT_TO_LEFT NS_SWIFT_NAME(leftToLeft) = 0,
  ADXState_Constraint_Enum_LEFT_TO_RIGHT NS_SWIFT_NAME(leftToRight) = 1,
  ADXState_Constraint_Enum_RIGHT_TO_LEFT NS_SWIFT_NAME(rightToLeft) = 2,
  ADXState_Constraint_Enum_RIGHT_TO_RIGHT NS_SWIFT_NAME(rightToRight) = 3,
  ADXState_Constraint_Enum_START_TO_START NS_SWIFT_NAME(startToStart) = 4,
  ADXState_Constraint_Enum_START_TO_END NS_SWIFT_NAME(startToEnd) = 5,
  ADXState_Constraint_Enum_END_TO_START NS_SWIFT_NAME(endToStart) = 6,
  ADXState_Constraint_Enum_END_TO_END NS_SWIFT_NAME(endToEnd) = 7,
  ADXState_Constraint_Enum_TOP_TO_TOP NS_SWIFT_NAME(topToTop) = 8,
  ADXState_Constraint_Enum_TOP_TO_BOTTOM NS_SWIFT_NAME(topToBottom) = 9,
  ADXState_Constraint_Enum_BOTTOM_TO_TOP NS_SWIFT_NAME(bottomToTop) = 10,
  ADXState_Constraint_Enum_BOTTOM_TO_BOTTOM NS_SWIFT_NAME(bottomToBottom) = 11,
  ADXState_Constraint_Enum_BASELINE_TO_BASELINE NS_SWIFT_NAME(baselineToBaseline) = 12,
  ADXState_Constraint_Enum_CENTER_HORIZONTALLY NS_SWIFT_NAME(centerHorizontally) = 13,
  ADXState_Constraint_Enum_CENTER_VERTICALLY NS_SWIFT_NAME(centerVertically) = 14,
  ADXState_Constraint_Enum_CIRCULAR_CONSTRAINT NS_SWIFT_NAME(circularConstraint) = 15,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXState_Constraint_ORDINAL int32_t
#else
#define ADXState_Constraint_ORDINAL ADXState_Constraint_Enum
#endif


@interface ADXState_Constraint : JavaLangEnum

#pragma mark Public

+ (ADXState_Constraint *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXState_Constraint_Enum)toNSEnum;

@property(readonly) ADXState_Constraint_Enum enumValue;
+ (ADXState_Constraint *)fromNSEnum:(ADXState_Constraint_Enum)value;

- (ADXState_Constraint_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithConstraint:(ADXState_Constraint_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXState_Constraint)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXState_Constraint *ADXState_Constraint_values_[];

inline ADXState_Constraint *ADXState_Constraint_get_LEFT_TO_LEFT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, LEFT_TO_LEFT)

inline ADXState_Constraint *ADXState_Constraint_get_LEFT_TO_RIGHT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, LEFT_TO_RIGHT)

inline ADXState_Constraint *ADXState_Constraint_get_RIGHT_TO_LEFT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, RIGHT_TO_LEFT)

inline ADXState_Constraint *ADXState_Constraint_get_RIGHT_TO_RIGHT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, RIGHT_TO_RIGHT)

inline ADXState_Constraint *ADXState_Constraint_get_START_TO_START(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, START_TO_START)

inline ADXState_Constraint *ADXState_Constraint_get_START_TO_END(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, START_TO_END)

inline ADXState_Constraint *ADXState_Constraint_get_END_TO_START(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, END_TO_START)

inline ADXState_Constraint *ADXState_Constraint_get_END_TO_END(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, END_TO_END)

inline ADXState_Constraint *ADXState_Constraint_get_TOP_TO_TOP(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, TOP_TO_TOP)

inline ADXState_Constraint *ADXState_Constraint_get_TOP_TO_BOTTOM(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, TOP_TO_BOTTOM)

inline ADXState_Constraint *ADXState_Constraint_get_BOTTOM_TO_TOP(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, BOTTOM_TO_TOP)

inline ADXState_Constraint *ADXState_Constraint_get_BOTTOM_TO_BOTTOM(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, BOTTOM_TO_BOTTOM)

inline ADXState_Constraint *ADXState_Constraint_get_BASELINE_TO_BASELINE(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, BASELINE_TO_BASELINE)

inline ADXState_Constraint *ADXState_Constraint_get_CENTER_HORIZONTALLY(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, CENTER_HORIZONTALLY)

inline ADXState_Constraint *ADXState_Constraint_get_CENTER_VERTICALLY(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, CENTER_VERTICALLY)

inline ADXState_Constraint *ADXState_Constraint_get_CIRCULAR_CONSTRAINT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Constraint, CIRCULAR_CONSTRAINT)

FOUNDATION_EXPORT IOSObjectArray *ADXState_Constraint_values(void);

FOUNDATION_EXPORT ADXState_Constraint *ADXState_Constraint_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXState_Constraint *ADXState_Constraint_fromOrdinal(ADXState_Constraint_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXState_Constraint)


#endif

#if !defined (ADXState_Direction_) && (INCLUDE_ALL_State || defined(INCLUDE_ADXState_Direction))
#define ADXState_Direction_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXState_Direction_Enum) {
  ADXState_Direction_Enum_LEFT NS_SWIFT_NAME(left) = 0,
  ADXState_Direction_Enum_RIGHT NS_SWIFT_NAME(right) = 1,
  ADXState_Direction_Enum_START NS_SWIFT_NAME(start) = 2,
  ADXState_Direction_Enum_END NS_SWIFT_NAME(end) = 3,
  ADXState_Direction_Enum_TOP NS_SWIFT_NAME(top) = 4,
  ADXState_Direction_Enum_BOTTOM NS_SWIFT_NAME(bottom) = 5,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXState_Direction_ORDINAL int32_t
#else
#define ADXState_Direction_ORDINAL ADXState_Direction_Enum
#endif


@interface ADXState_Direction : JavaLangEnum

#pragma mark Public

+ (ADXState_Direction *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXState_Direction_Enum)toNSEnum;

@property(readonly) ADXState_Direction_Enum enumValue;
+ (ADXState_Direction *)fromNSEnum:(ADXState_Direction_Enum)value;

- (ADXState_Direction_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithDirection:(ADXState_Direction_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXState_Direction)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXState_Direction *ADXState_Direction_values_[];

inline ADXState_Direction *ADXState_Direction_get_LEFT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Direction, LEFT)

inline ADXState_Direction *ADXState_Direction_get_RIGHT(void);
J2OBJC_ENUM_CONSTANT(ADXState_Direction, RIGHT)

inline ADXState_Direction *ADXState_Direction_get_START(void);
J2OBJC_ENUM_CONSTANT(ADXState_Direction, START)

inline ADXState_Direction *ADXState_Direction_get_END(void);
J2OBJC_ENUM_CONSTANT(ADXState_Direction, END)

inline ADXState_Direction *ADXState_Direction_get_TOP(void);
J2OBJC_ENUM_CONSTANT(ADXState_Direction, TOP)

inline ADXState_Direction *ADXState_Direction_get_BOTTOM(void);
J2OBJC_ENUM_CONSTANT(ADXState_Direction, BOTTOM)

FOUNDATION_EXPORT IOSObjectArray *ADXState_Direction_values(void);

FOUNDATION_EXPORT ADXState_Direction *ADXState_Direction_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXState_Direction *ADXState_Direction_fromOrdinal(ADXState_Direction_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXState_Direction)


#endif

#if !defined (ADXState_Helper_) && (INCLUDE_ALL_State || defined(INCLUDE_ADXState_Helper))
#define ADXState_Helper_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXState_Helper_Enum) {
  ADXState_Helper_Enum_HORIZONTAL_CHAIN NS_SWIFT_NAME(horizontalChain) = 0,
  ADXState_Helper_Enum_VERTICAL_CHAIN NS_SWIFT_NAME(verticalChain) = 1,
  ADXState_Helper_Enum_ALIGN_HORIZONTALLY NS_SWIFT_NAME(alignHorizontally) = 2,
  ADXState_Helper_Enum_ALIGN_VERTICALLY NS_SWIFT_NAME(alignVertically) = 3,
  ADXState_Helper_Enum_BARRIER NS_SWIFT_NAME(barrier) = 4,
  ADXState_Helper_Enum_LAYER NS_SWIFT_NAME(layer) = 5,
  ADXState_Helper_Enum_FLOW NS_SWIFT_NAME(flow) = 6,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXState_Helper_ORDINAL int32_t
#else
#define ADXState_Helper_ORDINAL ADXState_Helper_Enum
#endif


@interface ADXState_Helper : JavaLangEnum

#pragma mark Public

+ (ADXState_Helper *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXState_Helper_Enum)toNSEnum;

@property(readonly) ADXState_Helper_Enum enumValue;
+ (ADXState_Helper *)fromNSEnum:(ADXState_Helper_Enum)value;

- (ADXState_Helper_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithHelper:(ADXState_Helper_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXState_Helper)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXState_Helper *ADXState_Helper_values_[];

inline ADXState_Helper *ADXState_Helper_get_HORIZONTAL_CHAIN(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, HORIZONTAL_CHAIN)

inline ADXState_Helper *ADXState_Helper_get_VERTICAL_CHAIN(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, VERTICAL_CHAIN)

inline ADXState_Helper *ADXState_Helper_get_ALIGN_HORIZONTALLY(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, ALIGN_HORIZONTALLY)

inline ADXState_Helper *ADXState_Helper_get_ALIGN_VERTICALLY(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, ALIGN_VERTICALLY)

inline ADXState_Helper *ADXState_Helper_get_BARRIER(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, BARRIER)

inline ADXState_Helper *ADXState_Helper_get_LAYER(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, LAYER)

inline ADXState_Helper *ADXState_Helper_get_FLOW(void);
J2OBJC_ENUM_CONSTANT(ADXState_Helper, FLOW)

FOUNDATION_EXPORT IOSObjectArray *ADXState_Helper_values(void);

FOUNDATION_EXPORT ADXState_Helper *ADXState_Helper_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXState_Helper *ADXState_Helper_fromOrdinal(ADXState_Helper_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXState_Helper)


#endif

#if !defined (ADXState_Chain_) && (INCLUDE_ALL_State || defined(INCLUDE_ADXState_Chain))
#define ADXState_Chain_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXState_Chain_Enum) {
  ADXState_Chain_Enum_SPREAD NS_SWIFT_NAME(spread) = 0,
  ADXState_Chain_Enum_SPREAD_INSIDE NS_SWIFT_NAME(spreadInside) = 1,
  ADXState_Chain_Enum_PACKED NS_SWIFT_NAME(packed) = 2,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXState_Chain_ORDINAL int32_t
#else
#define ADXState_Chain_ORDINAL ADXState_Chain_Enum
#endif


@interface ADXState_Chain : JavaLangEnum

#pragma mark Public

+ (ADXState_Chain *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXState_Chain_Enum)toNSEnum;

@property(readonly) ADXState_Chain_Enum enumValue;
+ (ADXState_Chain *)fromNSEnum:(ADXState_Chain_Enum)value;

- (ADXState_Chain_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithChain:(ADXState_Chain_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXState_Chain)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXState_Chain *ADXState_Chain_values_[];

inline ADXState_Chain *ADXState_Chain_get_SPREAD(void);
J2OBJC_ENUM_CONSTANT(ADXState_Chain, SPREAD)

inline ADXState_Chain *ADXState_Chain_get_SPREAD_INSIDE(void);
J2OBJC_ENUM_CONSTANT(ADXState_Chain, SPREAD_INSIDE)

inline ADXState_Chain *ADXState_Chain_get_PACKED(void);
J2OBJC_ENUM_CONSTANT(ADXState_Chain, PACKED)

FOUNDATION_EXPORT IOSObjectArray *ADXState_Chain_values(void);

FOUNDATION_EXPORT ADXState_Chain *ADXState_Chain_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXState_Chain *ADXState_Chain_fromOrdinal(ADXState_Chain_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXState_Chain)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_State")
