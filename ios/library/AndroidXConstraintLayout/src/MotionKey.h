//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\key\MotionKey.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_MotionKey")
#ifdef RESTRICT_MotionKey
#define INCLUDE_ALL_MotionKey 0
#else
#define INCLUDE_ALL_MotionKey 1
#endif
#undef RESTRICT_MotionKey

#if !defined (ADXMotionKey_) && (INCLUDE_ALL_MotionKey || defined(INCLUDE_ADXMotionKey))
#define ADXMotionKey_

#define RESTRICT_TypedValues 1
#define INCLUDE_ADXTypedValues 1
#include "TypedValues.h"

@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class NSString;

/*!
 @brief Base class in an element in a KeyFrame
 */
@interface ADXMotionKey : NSObject < ADXTypedValues > {
 @public
  int32_t mFramePosition_;
  int32_t mTargetId_;
  NSString *mTargetString_;
  int32_t mType_;
  JavaUtilHashMap *mCustom_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Defines method to add a a view to splines derived form this key frame.
 The values are written to the spline
 @param splines splines to write values to
 */
- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines;

- (ADXMotionKey *)java_clone;

- (ADXMotionKey *)copy__WithADXMotionKey:(ADXMotionKey *)src OBJC_METHOD_FAMILY_NONE;

- (void)getAttributeNamesWithJavaUtilHashSet:(JavaUtilHashSet *)attributes;

/*!
 @brief Gets the current frame position
 */
- (int32_t)getFramePosition;

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(int32_t)type
                           withBoolean:(bool)value;

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(int32_t)type
                             withFloat:(float)value;

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(int32_t)type
                               withInt:(int32_t)value;

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(int32_t)type
                          withNSString:(NSString *)value;

/*!
 @brief sets the frame position
 @param pos
 */
- (void)setFramePositionWithInt:(int32_t)pos;

/*!
 @brief Key frame can specify the type of interpolation it wants on various attributes
  For each string it set it to -1, CurveFit.LINEAR or  CurveFit.SPLINE
 @param interpolation
 */
- (void)setInterpolationWithJavaUtilHashMap:(JavaUtilHashMap *)interpolation;

- (bool)setValueWithInt:(int32_t)type
            withBoolean:(bool)value;

- (bool)setValueWithInt:(int32_t)type
              withFloat:(float)value;

- (bool)setValueWithInt:(int32_t)type
                withInt:(int32_t)value;

- (bool)setValueWithInt:(int32_t)type
           withNSString:(NSString *)value;

- (ADXMotionKey *)setViewIdWithInt:(int32_t)id_;

#pragma mark Package-Private

- (bool)matchesWithNSString:(NSString *)constraintTag;

/*!
 @brief Return the boolean version this object if the object is a Boolean it is casted.
 @param value
 */
- (bool)toBooleanWithId:(id)value;

/*!
 @brief Return the float given a value.If the value is a "Float" object it is casted
 @param value
 */
- (float)toFloatWithId:(id)value;

/*!
 @brief Return the int version of an object if the value is an Integer object it is casted.
 @param value
 */
- (int32_t)toIntWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXMotionKey)

J2OBJC_FIELD_SETTER(ADXMotionKey, mTargetString_, NSString *)
J2OBJC_FIELD_SETTER(ADXMotionKey, mCustom_, JavaUtilHashMap *)

inline int32_t ADXMotionKey_get_UNSET(void);
inline int32_t ADXMotionKey_set_UNSET(int32_t value);
inline int32_t *ADXMotionKey_getRef_UNSET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int32_t ADXMotionKey_UNSET;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXMotionKey, UNSET, int32_t)

inline NSString *ADXMotionKey_get_ALPHA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_ALPHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, ALPHA, NSString *)

inline NSString *ADXMotionKey_get_ELEVATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_ELEVATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, ELEVATION, NSString *)

inline NSString *ADXMotionKey_get_ROTATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_ROTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, ROTATION, NSString *)

inline NSString *ADXMotionKey_get_ROTATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_ROTATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, ROTATION_X, NSString *)

inline NSString *ADXMotionKey_get_TRANSITION_PATH_ROTATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_TRANSITION_PATH_ROTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, TRANSITION_PATH_ROTATE, NSString *)

inline NSString *ADXMotionKey_get_SCALE_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_SCALE_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, SCALE_X, NSString *)

inline NSString *ADXMotionKey_get_SCALE_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_SCALE_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, SCALE_Y, NSString *)

inline NSString *ADXMotionKey_get_TRANSLATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_TRANSLATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, TRANSLATION_X, NSString *)

inline NSString *ADXMotionKey_get_TRANSLATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_TRANSLATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, TRANSLATION_Y, NSString *)

inline NSString *ADXMotionKey_get_CUSTOM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_CUSTOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, CUSTOM, NSString *)

inline NSString *ADXMotionKey_get_VISIBILITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXMotionKey_VISIBILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKey, VISIBILITY, NSString *)

FOUNDATION_EXPORT void ADXMotionKey_init(ADXMotionKey *self);

J2OBJC_TYPE_LITERAL_HEADER(ADXMotionKey)

@compatibility_alias AndroidxConstraintlayoutCoreMotionKeyMotionKey ADXMotionKey;


#endif

#pragma pop_macro("INCLUDE_ALL_MotionKey")
