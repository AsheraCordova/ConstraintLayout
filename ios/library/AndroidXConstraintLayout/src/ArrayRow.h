//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\ArrayRow.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ArrayRow")
#ifdef RESTRICT_ArrayRow
#define INCLUDE_ALL_ArrayRow 0
#else
#define INCLUDE_ALL_ArrayRow 1
#endif
#undef RESTRICT_ArrayRow

#if !defined (ADXArrayRow_) && (INCLUDE_ALL_ArrayRow || defined(INCLUDE_ADXArrayRow))
#define ADXArrayRow_

#define RESTRICT_LinearSystem 1
#define INCLUDE_ADXLinearSystem_Row 1
#include "LinearSystem.h"

@class ADXCache;
@class ADXLinearSystem;
@class ADXSolverVariable;
@class IOSBooleanArray;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaUtilArrayList;
@class NSString;
@protocol ADXArrayRow_ArrayRowVariables;

@interface ADXArrayRow : NSObject < ADXLinearSystem_Row > {
 @public
  WEAK_ ADXSolverVariable *variable_;
  float constantValue_;
  bool used_;
  JavaUtilArrayList *variablesToUpdate_;
  id<ADXArrayRow_ArrayRowVariables> variables_;
  bool isSimpleDefinition_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithADXCache:(ADXCache *)cache;

- (ADXArrayRow *)addErrorWithADXLinearSystem:(ADXLinearSystem *)system
                                     withInt:(int32_t)strength;

- (void)addErrorWithADXSolverVariable:(ADXSolverVariable *)error;

- (void)clear;

/*!
 @brief Create a constraint to express <code>A = B + (C - D)</code> * ratio
  We use this for ratio, where for example <code>Right = Left + (Bottom - Top) * percent</code>
 @param variableA variable A
 @param variableB variable B
 @param variableC variable C
 @param variableD variable D
 @param ratio ratio between AB and CD
 @return the row
 */
- (ADXArrayRow *)createRowDimensionRatioWithADXSolverVariable:(ADXSolverVariable *)variableA
                                        withADXSolverVariable:(ADXSolverVariable *)variableB
                                        withADXSolverVariable:(ADXSolverVariable *)variableC
                                        withADXSolverVariable:(ADXSolverVariable *)variableD
                                                    withFloat:(float)ratio;

- (ADXArrayRow *)createRowEqualDimensionWithFloat:(float)currentWeight
                                        withFloat:(float)totalWeights
                                        withFloat:(float)nextWeight
                            withADXSolverVariable:(ADXSolverVariable *)variableStartA
                                          withInt:(int32_t)marginStartA
                            withADXSolverVariable:(ADXSolverVariable *)variableEndA
                                          withInt:(int32_t)marginEndA
                            withADXSolverVariable:(ADXSolverVariable *)variableStartB
                                          withInt:(int32_t)marginStartB
                            withADXSolverVariable:(ADXSolverVariable *)variableEndB
                                          withInt:(int32_t)marginEndB;

- (ADXArrayRow *)createRowEqualMatchDimensionsWithFloat:(float)currentWeight
                                              withFloat:(float)totalWeights
                                              withFloat:(float)nextWeight
                                  withADXSolverVariable:(ADXSolverVariable *)variableStartA
                                  withADXSolverVariable:(ADXSolverVariable *)variableEndA
                                  withADXSolverVariable:(ADXSolverVariable *)variableStartB
                                  withADXSolverVariable:(ADXSolverVariable *)variableEndB;

- (ADXArrayRow *)createRowEqualsWithADXSolverVariable:(ADXSolverVariable *)variable
                                              withInt:(int32_t)value;

- (ADXArrayRow *)createRowEqualsWithADXSolverVariable:(ADXSolverVariable *)variableA
                                withADXSolverVariable:(ADXSolverVariable *)variableB
                                              withInt:(int32_t)margin;

- (ADXArrayRow *)createRowGreaterThanWithADXSolverVariable:(ADXSolverVariable *)a
                                                   withInt:(int32_t)b
                                     withADXSolverVariable:(ADXSolverVariable *)slack;

- (ADXArrayRow *)createRowGreaterThanWithADXSolverVariable:(ADXSolverVariable *)variableA
                                     withADXSolverVariable:(ADXSolverVariable *)variableB
                                     withADXSolverVariable:(ADXSolverVariable *)slack
                                                   withInt:(int32_t)margin;

- (ADXArrayRow *)createRowLowerThanWithADXSolverVariable:(ADXSolverVariable *)variableA
                                   withADXSolverVariable:(ADXSolverVariable *)variableB
                                   withADXSolverVariable:(ADXSolverVariable *)slack
                                                 withInt:(int32_t)margin;

/*!
 @brief Create a constraint to express At + (Ab-At)/2 = Bt + (Bb-Bt)/2 - angle
 @param at
 @param ab
 @param bt
 @param bb
 @param angleComponent
 */
- (ADXArrayRow *)createRowWithAngleWithADXSolverVariable:(ADXSolverVariable *)at
                                   withADXSolverVariable:(ADXSolverVariable *)ab
                                   withADXSolverVariable:(ADXSolverVariable *)bt
                                   withADXSolverVariable:(ADXSolverVariable *)bb
                                               withFloat:(float)angleComponent;

- (ADXSolverVariable *)getKey;

- (ADXSolverVariable *)getPivotCandidateWithADXLinearSystem:(ADXLinearSystem *)system
                                           withBooleanArray:(IOSBooleanArray *)avoid;

/*!
 @brief Used to initiate a goal from a given row (to see if we can remove an extra var)
 @param row
 */
- (void)initFromRowWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)row OBJC_METHOD_FAMILY_NONE;

- (bool)isEmpty;

- (ADXSolverVariable *)pickPivotWithADXSolverVariable:(ADXSolverVariable *)exclude;

- (void)reset;

- (NSString *)description;

- (void)updateFromFinalVariableWithADXLinearSystem:(ADXLinearSystem *)system
                             withADXSolverVariable:(ADXSolverVariable *)variable
                                       withBoolean:(bool)removeFromDefinition;

- (void)updateFromRowWithADXLinearSystem:(ADXLinearSystem *)system
                         withADXArrayRow:(ADXArrayRow *)definition
                             withBoolean:(bool)removeFromDefinition;

- (void)updateFromSynonymVariableWithADXLinearSystem:(ADXLinearSystem *)system
                               withADXSolverVariable:(ADXSolverVariable *)variable
                                         withBoolean:(bool)removeFromDefinition;

- (void)updateFromSystemWithADXLinearSystem:(ADXLinearSystem *)system;

#pragma mark Package-Private

- (ADXArrayRow *)addSingleErrorWithADXSolverVariable:(ADXSolverVariable *)error
                                             withInt:(int32_t)sign;

/*!
 @brief Pick a subject variable out of the existing ones
 .
 - if a variable is unrestricted
  - or if it's a negative new variable (not found elsewhere)
  - otherwise we have to add a new additional variable
 @return true if we added an extra variable to the system
 */
- (bool)chooseSubjectWithADXLinearSystem:(ADXLinearSystem *)system;

/*!
 @brief Pick a subject variable out of the existing ones
 .
 - if a variable is unrestricted
  - or if it's a negative new variable (not found elsewhere)
  - otherwise we return null
 @return a candidate variable we can pivot on or null if not found
 */
- (ADXSolverVariable *)chooseSubjectInVariablesWithADXLinearSystem:(ADXLinearSystem *)system;

- (ADXArrayRow *)createRowCenteringWithADXSolverVariable:(ADXSolverVariable *)variableA
                                   withADXSolverVariable:(ADXSolverVariable *)variableB
                                                 withInt:(int32_t)marginA
                                               withFloat:(float)bias
                                   withADXSolverVariable:(ADXSolverVariable *)variableC
                                   withADXSolverVariable:(ADXSolverVariable *)variableD
                                                 withInt:(int32_t)marginB;

- (ADXArrayRow *)createRowDefinitionWithADXSolverVariable:(ADXSolverVariable *)variable
                                                  withInt:(int32_t)value;

- (ADXArrayRow *)createRowDimensionPercentWithADXSolverVariable:(ADXSolverVariable *)variableA
                                          withADXSolverVariable:(ADXSolverVariable *)variableC
                                                      withFloat:(float)percent;

- (void)ensurePositiveConstant;

- (bool)hasKeyVariable;

- (bool)hasVariableWithADXSolverVariable:(ADXSolverVariable *)v;

- (void)pivotWithADXSolverVariable:(ADXSolverVariable *)v;

- (int32_t)sizeInBytes;

- (NSString *)toReadableString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXArrayRow)

J2OBJC_FIELD_SETTER(ADXArrayRow, variablesToUpdate_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXArrayRow, variables_, id<ADXArrayRow_ArrayRowVariables>)

FOUNDATION_EXPORT void ADXArrayRow_init(ADXArrayRow *self);

FOUNDATION_EXPORT ADXArrayRow *new_ADXArrayRow_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXArrayRow *create_ADXArrayRow_init(void);

FOUNDATION_EXPORT void ADXArrayRow_initWithADXCache_(ADXArrayRow *self, ADXCache *cache);

FOUNDATION_EXPORT ADXArrayRow *new_ADXArrayRow_initWithADXCache_(ADXCache *cache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXArrayRow *create_ADXArrayRow_initWithADXCache_(ADXCache *cache);

J2OBJC_TYPE_LITERAL_HEADER(ADXArrayRow)

@compatibility_alias AndroidxConstraintlayoutCoreArrayRow ADXArrayRow;


#endif

#if !defined (ADXArrayRow_ArrayRowVariables_) && (INCLUDE_ALL_ArrayRow || defined(INCLUDE_ADXArrayRow_ArrayRowVariables))
#define ADXArrayRow_ArrayRowVariables_

@class ADXArrayRow;
@class ADXSolverVariable;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;

@protocol ADXArrayRow_ArrayRowVariables < JavaObject >

- (int32_t)getCurrentSize;

- (ADXSolverVariable *)getVariableWithInt:(int32_t)i;

- (float)getVariableValueWithInt:(int32_t)i;

- (float)getWithADXSolverVariable:(ADXSolverVariable *)variable;

- (int32_t)indexOfWithADXSolverVariable:(ADXSolverVariable *)variable;

- (void)display;

- (void)clear;

- (bool)containsWithADXSolverVariable:(ADXSolverVariable *)v;

- (void)putWithADXSolverVariable:(ADXSolverVariable *)variable
                       withFloat:(float)value;

- (int32_t)sizeInBytes;

- (void)invert;

- (float)removeWithADXSolverVariable:(ADXSolverVariable *)v
                         withBoolean:(bool)removeFromDefinition;

- (void)divideByAmountWithFloat:(float)amount;

- (void)addWithADXSolverVariable:(ADXSolverVariable *)var
                       withFloat:(float)value
                     withBoolean:(bool)removeFromDefinition;

- (float)useWithADXArrayRow:(ADXArrayRow *)definition
                withBoolean:(bool)removeFromDefinition;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXArrayRow_ArrayRowVariables)

J2OBJC_TYPE_LITERAL_HEADER(ADXArrayRow_ArrayRowVariables)


#endif

#pragma pop_macro("INCLUDE_ALL_ArrayRow")
