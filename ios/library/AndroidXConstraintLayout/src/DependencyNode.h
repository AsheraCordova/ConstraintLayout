//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\DependencyNode.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DependencyNode")
#ifdef RESTRICT_DependencyNode
#define INCLUDE_ALL_DependencyNode 0
#else
#define INCLUDE_ALL_DependencyNode 1
#endif
#undef RESTRICT_DependencyNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXDependencyNode_) && (INCLUDE_ALL_DependencyNode || defined(INCLUDE_ADXDependencyNode))
#define ADXDependencyNode_

#define RESTRICT_Dependency 1
#define INCLUDE_ADXDependency 1
#include "Dependency.h"

@class ADXDependencyNode_Type;
@class ADXDimensionDependency;
@class ADXWidgetRun;
@class JavaLangBoolean;
@class JavaLangInteger;
@class NSString;
@protocol JavaUtilList;

@interface ADXDependencyNode : NSObject < ADXDependency > {
 @public
  id<ADXDependency> updateDelegate_;
  bool delegateToWidgetRun_;
  bool readyToSolve_;
  ADXWidgetRun *run_;
  ADXDependencyNode_Type *type_;
  int32_t margin_;
  int32_t value_;
  int32_t marginFactor_;
  ADXDimensionDependency *marginDependency_;
  bool resolved_;
  id<JavaUtilList> dependencies_;
  id<JavaUtilList> targets_;
}

#pragma mark Public

- (instancetype)initWithADXWidgetRun:(ADXWidgetRun *)run;

- (void)addDependencyWithADXDependency:(id<ADXDependency>)dependency;

- (void)clear;

- (NSString *)name;

- (void)resolveWithInt:(int32_t)value;

- (NSString *)description;

- (void)updateWithADXDependency:(id<ADXDependency>)node;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXDependencyNode)

J2OBJC_FIELD_SETTER(ADXDependencyNode, updateDelegate_, id<ADXDependency>)
J2OBJC_FIELD_SETTER(ADXDependencyNode, run_, ADXWidgetRun *)
J2OBJC_FIELD_SETTER(ADXDependencyNode, type_, ADXDependencyNode_Type *)
J2OBJC_FIELD_SETTER(ADXDependencyNode, marginDependency_, ADXDimensionDependency *)
J2OBJC_FIELD_SETTER(ADXDependencyNode, dependencies_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXDependencyNode, targets_, id<JavaUtilList>)

FOUNDATION_EXPORT void ADXDependencyNode_initWithADXWidgetRun_(ADXDependencyNode *self, ADXWidgetRun *run);

FOUNDATION_EXPORT ADXDependencyNode *new_ADXDependencyNode_initWithADXWidgetRun_(ADXWidgetRun *run) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXDependencyNode *create_ADXDependencyNode_initWithADXWidgetRun_(ADXWidgetRun *run);

J2OBJC_TYPE_LITERAL_HEADER(ADXDependencyNode)

@compatibility_alias AndroidxConstraintlayoutCoreWidgetsAnalyzerDependencyNode ADXDependencyNode;


#endif

#if !defined (ADXDependencyNode_Type_) && (INCLUDE_ALL_DependencyNode || defined(INCLUDE_ADXDependencyNode_Type))
#define ADXDependencyNode_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXDependencyNode_Type_Enum) {
  ADXDependencyNode_Type_Enum_UNKNOWN NS_SWIFT_NAME(unknown) = 0,
  ADXDependencyNode_Type_Enum_HORIZONTAL_DIMENSION NS_SWIFT_NAME(horizontalDimension) = 1,
  ADXDependencyNode_Type_Enum_VERTICAL_DIMENSION NS_SWIFT_NAME(verticalDimension) = 2,
  ADXDependencyNode_Type_Enum_LEFT NS_SWIFT_NAME(left) = 3,
  ADXDependencyNode_Type_Enum_RIGHT NS_SWIFT_NAME(right) = 4,
  ADXDependencyNode_Type_Enum_TOP NS_SWIFT_NAME(top) = 5,
  ADXDependencyNode_Type_Enum_BOTTOM NS_SWIFT_NAME(bottom) = 6,
  ADXDependencyNode_Type_Enum_BASELINE NS_SWIFT_NAME(baseline) = 7,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXDependencyNode_Type_ORDINAL int32_t
#else
#define ADXDependencyNode_Type_ORDINAL ADXDependencyNode_Type_Enum
#endif


@interface ADXDependencyNode_Type : JavaLangEnum

#pragma mark Public

+ (ADXDependencyNode_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXDependencyNode_Type_Enum)toNSEnum;

@property(readonly) ADXDependencyNode_Type_Enum enumValue;
+ (ADXDependencyNode_Type *)fromNSEnum:(ADXDependencyNode_Type_Enum)value;

- (ADXDependencyNode_Type_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithType:(ADXDependencyNode_Type_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXDependencyNode_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXDependencyNode_Type *ADXDependencyNode_Type_values_[];

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, UNKNOWN)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_HORIZONTAL_DIMENSION(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, HORIZONTAL_DIMENSION)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_VERTICAL_DIMENSION(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, VERTICAL_DIMENSION)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_LEFT(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, LEFT)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_RIGHT(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, RIGHT)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_TOP(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, TOP)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_BOTTOM(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, BOTTOM)

inline ADXDependencyNode_Type *ADXDependencyNode_Type_get_BASELINE(void);
J2OBJC_ENUM_CONSTANT(ADXDependencyNode_Type, BASELINE)

FOUNDATION_EXPORT IOSObjectArray *ADXDependencyNode_Type_values(void);

FOUNDATION_EXPORT ADXDependencyNode_Type *ADXDependencyNode_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXDependencyNode_Type *ADXDependencyNode_Type_fromOrdinal(ADXDependencyNode_Type_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXDependencyNode_Type)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_DependencyNode")
