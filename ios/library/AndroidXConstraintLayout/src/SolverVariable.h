//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\SolverVariable.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SolverVariable")
#ifdef RESTRICT_SolverVariable
#define INCLUDE_ALL_SolverVariable 0
#else
#define INCLUDE_ALL_SolverVariable 1
#endif
#undef RESTRICT_SolverVariable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXSolverVariable_) && (INCLUDE_ALL_SolverVariable || defined(INCLUDE_ADXSolverVariable))
#define ADXSolverVariable_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class ADXArrayRow;
@class ADXLinearSystem;
@class ADXSolverVariable_Type;
@class IOSFloatArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaUtilHashSet;
@class NSString;

/*!
 @brief Represents a given variable used in the <code>linear expression solver</code>.
 */
@interface ADXSolverVariable : NSObject < JavaLangComparable > {
 @public
  bool inGoal_;
  int32_t id__;
  int32_t definitionId_;
  int32_t strength_;
  float computedValue_;
  bool isFinalValue_;
  IOSFloatArray *strengthVector_;
  IOSFloatArray *goalStrengthVector_;
  ADXSolverVariable_Type *mType_;
  IOSObjectArray *mClientEquations_;
  int32_t mClientEquationsCount_;
  int32_t usageInRowCount_;
  bool isSynonym_;
  int32_t synonym_;
  float synonymDelta_;
  JavaUtilHashSet *inRows_;
}

#pragma mark Public

/*!
 @brief Base constructor
 @param name the variable name
 @param type the type of the variable
 */
- (instancetype)initWithNSString:(NSString *)name
      withADXSolverVariable_Type:(ADXSolverVariable_Type *)type;

- (instancetype)initWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                                  withNSString:(NSString *)prefix;

- (void)addToRowWithADXArrayRow:(ADXArrayRow *)row;

- (int32_t)compareToWithId:(ADXSolverVariable *)v;

/*!
 @brief Accessor for the name
 @return the name of the variable
 */
- (NSString *)getName;

- (void)removeFromRowWithADXArrayRow:(ADXArrayRow *)row;

- (void)reset;

- (void)setFinalValueWithADXLinearSystem:(ADXLinearSystem *)system
                               withFloat:(float)value;

- (void)setNameWithNSString:(NSString *)name;

- (void)setSynonymWithADXLinearSystem:(ADXLinearSystem *)system
                withADXSolverVariable:(ADXSolverVariable *)synonymVariable
                            withFloat:(float)value;

- (void)setTypeWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                             withNSString:(NSString *)prefix;

/*!
 @brief Override the toString() method to display the variable
 */
- (NSString *)description;

- (void)updateReferencesWithNewDefinitionWithADXLinearSystem:(ADXLinearSystem *)system
                                             withADXArrayRow:(ADXArrayRow *)definition;

#pragma mark Package-Private

- (void)clearStrengths;

+ (void)increaseErrorId;

- (NSString *)strengthsToString;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSolverVariable)

J2OBJC_FIELD_SETTER(ADXSolverVariable, strengthVector_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ADXSolverVariable, goalStrengthVector_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ADXSolverVariable, mType_, ADXSolverVariable_Type *)
J2OBJC_FIELD_SETTER(ADXSolverVariable, mClientEquations_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXSolverVariable, inRows_, JavaUtilHashSet *)

inline int32_t ADXSolverVariable_get_STRENGTH_NONE(void);
#define ADXSolverVariable_STRENGTH_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_NONE, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_LOW(void);
#define ADXSolverVariable_STRENGTH_LOW 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_LOW, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_MEDIUM(void);
#define ADXSolverVariable_STRENGTH_MEDIUM 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_MEDIUM, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_HIGH(void);
#define ADXSolverVariable_STRENGTH_HIGH 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_HIGH, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_HIGHEST(void);
#define ADXSolverVariable_STRENGTH_HIGHEST 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_HIGHEST, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_EQUALITY(void);
#define ADXSolverVariable_STRENGTH_EQUALITY 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_EQUALITY, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_BARRIER(void);
#define ADXSolverVariable_STRENGTH_BARRIER 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_BARRIER, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_CENTERING(void);
#define ADXSolverVariable_STRENGTH_CENTERING 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_CENTERING, int32_t)

inline int32_t ADXSolverVariable_get_STRENGTH_FIXED(void);
#define ADXSolverVariable_STRENGTH_FIXED 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, STRENGTH_FIXED, int32_t)

inline int32_t ADXSolverVariable_get_MAX_STRENGTH(void);
#define ADXSolverVariable_MAX_STRENGTH 9
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, MAX_STRENGTH, int32_t)

FOUNDATION_EXPORT void ADXSolverVariable_increaseErrorId(void);

FOUNDATION_EXPORT void ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(ADXSolverVariable *self, NSString *name, ADXSolverVariable_Type *type);

FOUNDATION_EXPORT ADXSolverVariable *new_ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(NSString *name, ADXSolverVariable_Type *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXSolverVariable *create_ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(NSString *name, ADXSolverVariable_Type *type);

FOUNDATION_EXPORT void ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(ADXSolverVariable *self, ADXSolverVariable_Type *type, NSString *prefix);

FOUNDATION_EXPORT ADXSolverVariable *new_ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(ADXSolverVariable_Type *type, NSString *prefix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXSolverVariable *create_ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(ADXSolverVariable_Type *type, NSString *prefix);

J2OBJC_TYPE_LITERAL_HEADER(ADXSolverVariable)

@compatibility_alias AndroidxConstraintlayoutCoreSolverVariable ADXSolverVariable;


#endif

#if !defined (ADXSolverVariable_Type_) && (INCLUDE_ALL_SolverVariable || defined(INCLUDE_ADXSolverVariable_Type))
#define ADXSolverVariable_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXSolverVariable_Type_Enum) {
  ADXSolverVariable_Type_Enum_UNRESTRICTED NS_SWIFT_NAME(unrestricted) = 0,
  ADXSolverVariable_Type_Enum_CONSTANT NS_SWIFT_NAME(constant) = 1,
  ADXSolverVariable_Type_Enum_SLACK NS_SWIFT_NAME(slack) = 2,
  ADXSolverVariable_Type_Enum_ERROR NS_SWIFT_NAME(error) = 3,
  ADXSolverVariable_Type_Enum_UNKNOWN NS_SWIFT_NAME(unknown) = 4,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXSolverVariable_Type_ORDINAL int32_t
#else
#define ADXSolverVariable_Type_ORDINAL ADXSolverVariable_Type_Enum
#endif


/*!
 @brief Type of variables
 */
@interface ADXSolverVariable_Type : JavaLangEnum

#pragma mark Public

+ (ADXSolverVariable_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXSolverVariable_Type_Enum)toNSEnum;

@property(readonly) ADXSolverVariable_Type_Enum enumValue;
+ (ADXSolverVariable_Type *)fromNSEnum:(ADXSolverVariable_Type_Enum)value;

- (ADXSolverVariable_Type_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithType:(ADXSolverVariable_Type_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXSolverVariable_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXSolverVariable_Type *ADXSolverVariable_Type_values_[];

/*!
 @brief The variable can take negative or positive values
 */
inline ADXSolverVariable_Type *ADXSolverVariable_Type_get_UNRESTRICTED(void);
J2OBJC_ENUM_CONSTANT(ADXSolverVariable_Type, UNRESTRICTED)

/*!
 @brief The variable is actually not a variable :) , but a constant number
 */
inline ADXSolverVariable_Type *ADXSolverVariable_Type_get_CONSTANT(void);
J2OBJC_ENUM_CONSTANT(ADXSolverVariable_Type, CONSTANT)

/*!
 @brief The variable is restricted to positive values and represents a slack
 */
inline ADXSolverVariable_Type *ADXSolverVariable_Type_get_SLACK(void);
J2OBJC_ENUM_CONSTANT(ADXSolverVariable_Type, SLACK)

/*!
 @brief The variable is restricted to positive values and represents an error
 */
inline ADXSolverVariable_Type *ADXSolverVariable_Type_get_ERROR(void);
J2OBJC_ENUM_CONSTANT(ADXSolverVariable_Type, ERROR)

/*!
 @brief Unknown (invalid) type.
 */
inline ADXSolverVariable_Type *ADXSolverVariable_Type_get_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(ADXSolverVariable_Type, UNKNOWN)

FOUNDATION_EXPORT IOSObjectArray *ADXSolverVariable_Type_values(void);

FOUNDATION_EXPORT ADXSolverVariable_Type *ADXSolverVariable_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXSolverVariable_Type *ADXSolverVariable_Type_fromOrdinal(ADXSolverVariable_Type_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXSolverVariable_Type)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_SolverVariable")
