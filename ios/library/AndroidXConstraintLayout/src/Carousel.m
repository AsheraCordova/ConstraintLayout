//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\helper\widget\Carousel.java
//

#include "Carousel.h"
#include "ConstraintSet.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "MotionHelper.h"
#include "MotionLayout.h"
#include "MotionScene.h"
#include "View.h"
#include "ViewParent.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"

@class JavaUtilArrayList;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADXCarousel () {
 @public
  id<ADXCarousel_Adapter> mAdapter_;
  JavaUtilArrayList *mList_;
  jint mPreviousIndex_;
  jint mIndex_;
  ADXMotionLayout *mMotionLayout_;
  jint firstViewReference_;
  jboolean infiniteCarousel_;
  jint backwardTransition_;
  jint forwardTransition_;
  jint previousState_;
  jint nextState_;
  jfloat dampening_;
  jint startIndex_;
  jint emptyViewBehavior_;
  jint touchUpMode_;
  jfloat velocityThreshold_;
  jint mTargetIndex_;
  jint mAnimateTargetDelay_;
}

- (void)enableAllTransitionsWithBoolean:(jboolean)enable;

- (jboolean)enableTransitionWithInt:(jint)transitionID
                        withBoolean:(jboolean)enable;

- (jboolean)updateViewVisibilityWithADView:(ADView *)view
                                   withInt:(jint)visibility;

- (jboolean)updateViewVisibilityWithInt:(jint)constraintSetId
                             withADView:(ADView *)view
                                withInt:(jint)visibility;

@end

J2OBJC_FIELD_SETTER(ADXCarousel, mAdapter_, id<ADXCarousel_Adapter>)
J2OBJC_FIELD_SETTER(ADXCarousel, mList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXCarousel, mMotionLayout_, ADXMotionLayout *)

inline jboolean ADXCarousel_get_DEBUG(void);
#define ADXCarousel_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXCarousel, DEBUG, jboolean)

inline NSString *ADXCarousel_get_TAG(void);
static NSString *ADXCarousel_TAG = @"Carousel";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXCarousel, TAG, NSString *)

__attribute__((unused)) static void ADXCarousel_enableAllTransitionsWithBoolean_(ADXCarousel *self, jboolean enable);

__attribute__((unused)) static jboolean ADXCarousel_enableTransitionWithInt_withBoolean_(ADXCarousel *self, jint transitionID, jboolean enable);

__attribute__((unused)) static jboolean ADXCarousel_updateViewVisibilityWithADView_withInt_(ADXCarousel *self, ADView *view, jint visibility);

__attribute__((unused)) static jboolean ADXCarousel_updateViewVisibilityWithInt_withADView_withInt_(ADXCarousel *self, jint constraintSetId, ADView *view, jint visibility);

@interface ADXCarousel_Adapter : NSObject

@end

@interface ADXCarousel_1 : NSObject < JavaLangRunnable > {
 @public
  ADXCarousel *this$0_;
}

- (instancetype)initWithADXCarousel:(ADXCarousel *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCarousel_1)

__attribute__((unused)) static void ADXCarousel_1_initWithADXCarousel_(ADXCarousel_1 *self, ADXCarousel *outer$);

__attribute__((unused)) static ADXCarousel_1 *new_ADXCarousel_1_initWithADXCarousel_(ADXCarousel *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCarousel_1 *create_ADXCarousel_1_initWithADXCarousel_(ADXCarousel *outer$);

@interface ADXCarousel_1_1 : NSObject < JavaLangRunnable > {
 @public
  ADXCarousel_1 *this$0_;
  jfloat val$v_;
}

- (instancetype)initWithADXCarousel_1:(ADXCarousel_1 *)outer$
                            withFloat:(jfloat)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCarousel_1_1)

__attribute__((unused)) static void ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(ADXCarousel_1_1 *self, ADXCarousel_1 *outer$, jfloat capture$0);

__attribute__((unused)) static ADXCarousel_1_1 *new_ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(ADXCarousel_1 *outer$, jfloat capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCarousel_1_1 *create_ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(ADXCarousel_1 *outer$, jfloat capture$0);

@interface ADXCarousel_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ADXCarousel *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCarousel_$Lambda$1)

__attribute__((unused)) static void ADXCarousel_$Lambda$1_initWithADXCarousel_(ADXCarousel_$Lambda$1 *self, ADXCarousel *outer$);

__attribute__((unused)) static ADXCarousel_$Lambda$1 *new_ADXCarousel_$Lambda$1_initWithADXCarousel_(ADXCarousel *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCarousel_$Lambda$1 *create_ADXCarousel_$Lambda$1_initWithADXCarousel_(ADXCarousel *outer$);

@implementation ADXCarousel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCarousel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setAdapterWithADXCarousel_Adapter:(id<ADXCarousel_Adapter>)adapter {
  JreStrongAssign(&mAdapter_, adapter);
}

- (jint)getCount {
  if (mAdapter_ != nil) {
    return [mAdapter_ count];
  }
  return 0;
}

- (jint)getCurrentIndex {
  return mIndex_;
}

- (void)transitionToIndexWithInt:(jint)index
                         withInt:(jint)delay {
  mTargetIndex_ = JavaLangMath_maxWithInt_withInt_(0, JavaLangMath_minWithInt_withInt_([self getCount] - 1, index));
  mAnimateTargetDelay_ = JavaLangMath_maxWithInt_withInt_(0, delay);
  [((ADXMotionLayout *) nil_chk(mMotionLayout_)) setTransitionDurationWithInt:mAnimateTargetDelay_];
  if (index < mIndex_) {
    [((ADXMotionLayout *) nil_chk(mMotionLayout_)) transitionToStateWithInt:previousState_ withInt:mAnimateTargetDelay_];
  }
  else {
    [((ADXMotionLayout *) nil_chk(mMotionLayout_)) transitionToStateWithInt:nextState_ withInt:mAnimateTargetDelay_];
  }
}

- (void)jumpToIndexWithInt:(jint)index {
  mIndex_ = JavaLangMath_maxWithInt_withInt_(0, JavaLangMath_minWithInt_withInt_([self getCount] - 1, index));
  [self refresh];
}

- (void)refresh {
  jint count = [((JavaUtilArrayList *) nil_chk(mList_)) size];
  for (jint i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([mList_ getWithInt:i]);
    if ([((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count] == 0) {
      ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, emptyViewBehavior_);
    }
    else {
      ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, ADView_VISIBLE);
    }
  }
  [((ADXMotionLayout *) nil_chk(mMotionLayout_)) rebuildScene];
  [self updateItems];
  [((ADXMotionLayout *) nil_chk(mMotionLayout_)) remeasure];
}

- (void)onTransitionChangeWithADXMotionLayout:(ADXMotionLayout *)motionLayout
                                      withInt:(jint)startId
                                      withInt:(jint)endId
                                    withFloat:(jfloat)progress {
  mLastStartId_ = startId;
}

- (void)onTransitionCompletedWithADXMotionLayout:(ADXMotionLayout *)motionLayout
                                         withInt:(jint)currentId {
  mPreviousIndex_ = mIndex_;
  if (currentId == nextState_) {
    mIndex_++;
  }
  else if (currentId == previousState_) {
    mIndex_--;
  }
  if (infiniteCarousel_) {
    if (mIndex_ >= [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) {
      mIndex_ = 0;
    }
    if (mIndex_ < 0) {
      mIndex_ = [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count] - 1;
    }
  }
  else {
    if (mIndex_ >= [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) {
      mIndex_ = [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count] - 1;
    }
    if (mIndex_ < 0) {
      mIndex_ = 0;
    }
  }
  if (mPreviousIndex_ != mIndex_) {
    [((ADXMotionLayout *) nil_chk(mMotionLayout_)) postWithJavaLangRunnable:mUpdateRunnable_];
  }
}

- (void)enableAllTransitionsWithBoolean:(jboolean)enable {
  ADXCarousel_enableAllTransitionsWithBoolean_(self, enable);
}

- (jboolean)enableTransitionWithInt:(jint)transitionID
                        withBoolean:(jboolean)enable {
  return ADXCarousel_enableTransitionWithInt_withBoolean_(self, transitionID, enable);
}

- (void)onAttachedToWindow {
  [super onAttachedToWindow];
  ADXMotionLayout *container = nil;
  if ([[self getParent] isKindOfClass:[ADXMotionLayout class]]) {
    container = (ADXMotionLayout *) cast_chk([self getParent], [ADXMotionLayout class]);
  }
  else {
    return;
  }
  for (jint i = 0; i < mCount_; i++) {
    jint id_ = IOSIntArray_Get(nil_chk(mIds_), i);
    ADView *view = JreRetainedLocalValue([((ADXMotionLayout *) nil_chk(container)) getViewByIdWithInt:id_]);
    if (firstViewReference_ == id_) {
      startIndex_ = i;
    }
    [((JavaUtilArrayList *) nil_chk(mList_)) addWithId:view];
  }
  JreStrongAssign(&mMotionLayout_, container);
  if (touchUpMode_ == ADXCarousel_TOUCH_UP_CARRY_ON) {
    ADXMotionScene_Transition *forward = JreRetainedLocalValue([((ADXMotionLayout *) nil_chk(mMotionLayout_)) getTransitionWithInt:forwardTransition_]);
    if (forward != nil) {
      [forward setOnTouchUpWithInt:ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE];
    }
    ADXMotionScene_Transition *backward = JreRetainedLocalValue([((ADXMotionLayout *) nil_chk(mMotionLayout_)) getTransitionWithInt:backwardTransition_]);
    if (backward != nil) {
      [backward setOnTouchUpWithInt:ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE];
    }
  }
  [self updateItems];
  [((ADXMotionLayout *) nil_chk(mMotionLayout_)) remeasure];
}

- (jboolean)updateViewVisibilityWithADView:(ADView *)view
                                   withInt:(jint)visibility {
  return ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, visibility);
}

- (jboolean)updateViewVisibilityWithInt:(jint)constraintSetId
                             withADView:(ADView *)view
                                withInt:(jint)visibility {
  return ADXCarousel_updateViewVisibilityWithInt_withADView_withInt_(self, constraintSetId, view, visibility);
}

- (void)updateItems {
  if (mAdapter_ == nil) {
    return;
  }
  if (mMotionLayout_ == nil) {
    return;
  }
  if ([mAdapter_ count] == 0) {
    return;
  }
  jint viewCount = [((JavaUtilArrayList *) nil_chk(mList_)) size];
  for (jint i = 0; i < viewCount; i++) {
    ADView *view = JreRetainedLocalValue([mList_ getWithInt:i]);
    jint index = mIndex_ + i - startIndex_;
    if (infiniteCarousel_) {
      if (index < 0) {
        if (emptyViewBehavior_ != ADView_INVISIBLE) {
          ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, emptyViewBehavior_);
        }
        else {
          ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, ADView_VISIBLE);
        }
        if (JreIntMod(index, [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) == 0) {
          [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) populateWithADView:view withInt:0];
        }
        else {
          [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) populateWithADView:view withInt:[mAdapter_ count] + (JreIntMod(index, [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]))];
        }
      }
      else if (index >= [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) {
        if (index == [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) {
          index = 0;
        }
        else if (index > [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) {
          index = JreIntMod(index, [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]);
        }
        if (emptyViewBehavior_ != ADView_INVISIBLE) {
          ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, emptyViewBehavior_);
        }
        else {
          ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, ADView_VISIBLE);
        }
        [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) populateWithADView:view withInt:index];
      }
      else {
        ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, ADView_VISIBLE);
        [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) populateWithADView:view withInt:index];
      }
    }
    else {
      if (index < 0) {
        ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, emptyViewBehavior_);
      }
      else if (index >= [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count]) {
        ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, emptyViewBehavior_);
      }
      else {
        ADXCarousel_updateViewVisibilityWithADView_withInt_(self, view, ADView_VISIBLE);
        [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) populateWithADView:view withInt:index];
      }
    }
  }
  if (mTargetIndex_ != -1 && mTargetIndex_ != mIndex_) {
    [((ADXMotionLayout *) nil_chk(mMotionLayout_)) postWithJavaLangRunnable:create_ADXCarousel_$Lambda$1_initWithADXCarousel_(self)];
  }
  else if (mTargetIndex_ == mIndex_) {
    mTargetIndex_ = -1;
  }
  if (backwardTransition_ == -1 || forwardTransition_ == -1) {
    ADLog_wWithNSString_withNSString_(ADXCarousel_TAG, @"No backward or forward transitions defined for Carousel!");
    return;
  }
  if (infiniteCarousel_) {
    return;
  }
  jint count = [((id<ADXCarousel_Adapter>) nil_chk(mAdapter_)) count];
  if (mIndex_ == 0) {
    ADXCarousel_enableTransitionWithInt_withBoolean_(self, backwardTransition_, false);
  }
  else {
    ADXCarousel_enableTransitionWithInt_withBoolean_(self, backwardTransition_, true);
    [((ADXMotionLayout *) nil_chk(mMotionLayout_)) setTransitionWithInt:backwardTransition_];
  }
  if (mIndex_ == count - 1) {
    ADXCarousel_enableTransitionWithInt_withBoolean_(self, forwardTransition_, false);
  }
  else {
    ADXCarousel_enableTransitionWithInt_withBoolean_(self, forwardTransition_, true);
    [((ADXMotionLayout *) nil_chk(mMotionLayout_)) setTransitionWithInt:forwardTransition_];
  }
}

- (jint)getBackwardTransition {
  return backwardTransition_;
}

- (void)setBackwardTransitionWithInt:(jint)backwardTransition {
  self->backwardTransition_ = backwardTransition;
}

- (jint)getForwardTransition {
  return forwardTransition_;
}

- (void)setForwardTransitionWithInt:(jint)forwardTransition {
  self->forwardTransition_ = forwardTransition;
}

- (jint)getPreviousState {
  return previousState_;
}

- (void)setPreviousStateWithInt:(jint)previousState {
  self->previousState_ = previousState;
}

- (jint)getNextState {
  return nextState_;
}

- (void)setNextStateWithInt:(jint)nextState {
  self->nextState_ = nextState;
}

- (jfloat)getDampening {
  return dampening_;
}

- (void)setDampeningWithFloat:(jfloat)dampening {
  self->dampening_ = dampening;
}

- (jint)getEmptyViewBehavior {
  return emptyViewBehavior_;
}

- (void)setEmptyViewBehaviorWithInt:(jint)emptyViewBehavior {
  self->emptyViewBehavior_ = emptyViewBehavior;
}

- (jint)getTouchUpMode {
  return touchUpMode_;
}

- (void)setTouchUpModeWithInt:(jint)touchUpMode {
  self->touchUpMode_ = touchUpMode;
}

- (jfloat)getVelocityThreshold {
  return velocityThreshold_;
}

- (void)setVelocityThresholdWithFloat:(jfloat)velocityThreshold {
  self->velocityThreshold_ = velocityThreshold;
}

- (jint)getFirstViewReference {
  return firstViewReference_;
}

- (void)setFirstViewReferenceWithInt:(jint)firstViewReference {
  self->firstViewReference_ = firstViewReference;
}

- (jboolean)isInfiniteCarousel {
  return infiniteCarousel_;
}

- (void)setInfiniteCarouselWithBoolean:(jboolean)infiniteCarousel {
  self->infiniteCarousel_ = infiniteCarousel;
}

- (void)dealloc {
  RELEASE_(mAdapter_);
  RELEASE_(mList_);
  RELEASE_(mMotionLayout_);
  RELEASE_(mUpdateRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setAdapterWithADXCarousel_Adapter:);
  methods[2].selector = @selector(getCount);
  methods[3].selector = @selector(getCurrentIndex);
  methods[4].selector = @selector(transitionToIndexWithInt:withInt:);
  methods[5].selector = @selector(jumpToIndexWithInt:);
  methods[6].selector = @selector(refresh);
  methods[7].selector = @selector(onTransitionChangeWithADXMotionLayout:withInt:withInt:withFloat:);
  methods[8].selector = @selector(onTransitionCompletedWithADXMotionLayout:withInt:);
  methods[9].selector = @selector(enableAllTransitionsWithBoolean:);
  methods[10].selector = @selector(enableTransitionWithInt:withBoolean:);
  methods[11].selector = @selector(onAttachedToWindow);
  methods[12].selector = @selector(updateViewVisibilityWithADView:withInt:);
  methods[13].selector = @selector(updateViewVisibilityWithInt:withADView:withInt:);
  methods[14].selector = @selector(updateItems);
  methods[15].selector = @selector(getBackwardTransition);
  methods[16].selector = @selector(setBackwardTransitionWithInt:);
  methods[17].selector = @selector(getForwardTransition);
  methods[18].selector = @selector(setForwardTransitionWithInt:);
  methods[19].selector = @selector(getPreviousState);
  methods[20].selector = @selector(setPreviousStateWithInt:);
  methods[21].selector = @selector(getNextState);
  methods[22].selector = @selector(setNextStateWithInt:);
  methods[23].selector = @selector(getDampening);
  methods[24].selector = @selector(setDampeningWithFloat:);
  methods[25].selector = @selector(getEmptyViewBehavior);
  methods[26].selector = @selector(setEmptyViewBehaviorWithInt:);
  methods[27].selector = @selector(getTouchUpMode);
  methods[28].selector = @selector(setTouchUpModeWithInt:);
  methods[29].selector = @selector(getVelocityThreshold);
  methods[30].selector = @selector(setVelocityThresholdWithFloat:);
  methods[31].selector = @selector(getFirstViewReference);
  methods[32].selector = @selector(setFirstViewReferenceWithInt:);
  methods[33].selector = @selector(isInfiniteCarousel);
  methods[34].selector = @selector(setInfiniteCarouselWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXCarousel_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "mAdapter_", "LADXCarousel_Adapter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "mPreviousIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMotionLayout_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstViewReference_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "infiniteCarousel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "backwardTransition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forwardTransition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "previousState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dampening_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "emptyViewBehavior_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TOUCH_UP_IMMEDIATE_STOP", "I", .constantValue.asInt = ADXCarousel_TOUCH_UP_IMMEDIATE_STOP, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_CARRY_ON", "I", .constantValue.asInt = ADXCarousel_TOUCH_UP_CARRY_ON, 0x19, -1, -1, -1, -1 },
    { "touchUpMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "velocityThreshold_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTargetIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAnimateTargetDelay_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastStartId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUpdateRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAdapter", "LADXCarousel_Adapter;", "transitionToIndex", "II", "jumpToIndex", "I", "onTransitionChange", "LADXMotionLayout;IIF", "onTransitionCompleted", "LADXMotionLayout;I", "enableAllTransitions", "Z", "enableTransition", "IZ", "updateViewVisibility", "LADView;I", "ILADView;I", "setBackwardTransition", "setForwardTransition", "setPreviousState", "setNextState", "setDampening", "F", "setEmptyViewBehavior", "setTouchUpMode", "setVelocityThreshold", "setFirstViewReference", "setInfiniteCarousel", &ADXCarousel_TAG, "Ljava/util/ArrayList<Lr/android/view/View;>;" };
  static const J2ObjcClassInfo _ADXCarousel = { "Carousel", "androidx.constraintlayout.helper.widget", ptrTable, methods, fields, 7, 0x1, 35, 24, -1, 1, -1, -1, -1 };
  return &_ADXCarousel;
}

@end

void ADXCarousel_init(ADXCarousel *self) {
  ADXMotionHelper_init(self);
  JreStrongAssign(&self->mAdapter_, nil);
  JreStrongAssignAndConsume(&self->mList_, new_JavaUtilArrayList_init());
  self->mPreviousIndex_ = 0;
  self->mIndex_ = 0;
  self->firstViewReference_ = -1;
  self->infiniteCarousel_ = false;
  self->backwardTransition_ = -1;
  self->forwardTransition_ = -1;
  self->previousState_ = -1;
  self->nextState_ = -1;
  self->dampening_ = 0.9f;
  self->startIndex_ = 0;
  self->emptyViewBehavior_ = ADView_INVISIBLE;
  self->touchUpMode_ = ADXCarousel_TOUCH_UP_IMMEDIATE_STOP;
  self->velocityThreshold_ = 2.0f;
  self->mTargetIndex_ = -1;
  self->mAnimateTargetDelay_ = 200;
  self->mLastStartId_ = -1;
  JreStrongAssignAndConsume(&self->mUpdateRunnable_, new_ADXCarousel_1_initWithADXCarousel_(self));
}

ADXCarousel *new_ADXCarousel_init() {
  J2OBJC_NEW_IMPL(ADXCarousel, init)
}

ADXCarousel *create_ADXCarousel_init() {
  J2OBJC_CREATE_IMPL(ADXCarousel, init)
}

void ADXCarousel_enableAllTransitionsWithBoolean_(ADXCarousel *self, jboolean enable) {
  JavaUtilArrayList *transitions = JreRetainedLocalValue([((ADXMotionLayout *) nil_chk(self->mMotionLayout_)) getDefinedTransitions]);
  for (ADXMotionScene_Transition * __strong transition in nil_chk(transitions)) {
    [((ADXMotionScene_Transition *) nil_chk(transition)) setEnabledWithBoolean:enable];
  }
}

jboolean ADXCarousel_enableTransitionWithInt_withBoolean_(ADXCarousel *self, jint transitionID, jboolean enable) {
  if (transitionID == -1) {
    return false;
  }
  if (self->mMotionLayout_ == nil) {
    return false;
  }
  ADXMotionScene_Transition *transition = JreRetainedLocalValue([self->mMotionLayout_ getTransitionWithInt:transitionID]);
  if (transition == nil) {
    return false;
  }
  if (enable == [transition isEnabled]) {
    return false;
  }
  [transition setEnabledWithBoolean:enable];
  return true;
}

jboolean ADXCarousel_updateViewVisibilityWithADView_withInt_(ADXCarousel *self, ADView *view, jint visibility) {
  if (self->mMotionLayout_ == nil) {
    return false;
  }
  jboolean needsMotionSceneRebuild = false;
  IOSIntArray *constraintSets = [self->mMotionLayout_ getConstraintSetIds];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(constraintSets))->size_; i++) {
    needsMotionSceneRebuild |= ADXCarousel_updateViewVisibilityWithInt_withADView_withInt_(self, IOSIntArray_Get(constraintSets, i), view, visibility);
  }
  return needsMotionSceneRebuild;
}

jboolean ADXCarousel_updateViewVisibilityWithInt_withADView_withInt_(ADXCarousel *self, jint constraintSetId, ADView *view, jint visibility) {
  ADXConstraintSet *constraintSet = JreRetainedLocalValue([((ADXMotionLayout *) nil_chk(self->mMotionLayout_)) getConstraintSetWithInt:constraintSetId]);
  if (constraintSet == nil) {
    return false;
  }
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([constraintSet getConstraintWithInt:[((ADView *) nil_chk(view)) getId]]);
  if (constraint == nil) {
    return false;
  }
  ((ADXConstraintSet_PropertySet *) nil_chk(constraint->propertySet_))->mVisibilityMode_ = ADXConstraintSet_VISIBILITY_MODE_IGNORE;
  [view setVisibilityWithInt:visibility];
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCarousel)

@implementation ADXCarousel_Adapter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(count);
  methods[1].selector = @selector(populateWithADView:withInt:);
  methods[2].selector = @selector(onNewItemWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "populate", "LADView;I", "onNewItem", "I", "LADXCarousel;" };
  static const J2ObjcClassInfo _ADXCarousel_Adapter = { "Adapter", "androidx.constraintlayout.helper.widget", ptrTable, methods, NULL, 7, 0x609, 3, 0, 4, -1, -1, -1, -1 };
  return &_ADXCarousel_Adapter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXCarousel_Adapter)

@implementation ADXCarousel_1

- (instancetype)initWithADXCarousel:(ADXCarousel *)outer$ {
  ADXCarousel_1_initWithADXCarousel_(self, outer$);
  return self;
}

- (void)run {
  [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) setRedrawWithBoolean:false];
  [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) setProgressWithFloat:0];
  [this$0_ updateItems];
  [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) remeasure];
  [((id<ADXCarousel_Adapter>) nil_chk(this$0_->mAdapter_)) onNewItemWithInt:this$0_->mIndex_];
  [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) setRedrawWithBoolean:true];
  jfloat velocity = [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) getVelocity];
  if (this$0_->touchUpMode_ == ADXCarousel_TOUCH_UP_CARRY_ON && velocity > this$0_->velocityThreshold_ && this$0_->mIndex_ < [((id<ADXCarousel_Adapter>) nil_chk(this$0_->mAdapter_)) count] - 1) {
    jfloat v = velocity * this$0_->dampening_;
    if (this$0_->mIndex_ == 0 && this$0_->mPreviousIndex_ > this$0_->mIndex_) {
      return;
    }
    if (this$0_->mIndex_ == [((id<ADXCarousel_Adapter>) nil_chk(this$0_->mAdapter_)) count] - 1 && this$0_->mPreviousIndex_ < this$0_->mIndex_) {
      return;
    }
    [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) postWithJavaLangRunnable:create_ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(self, v)];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXCarousel:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXCarousel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCarousel;" };
  static const J2ObjcClassInfo _ADXCarousel_1 = { "", "androidx.constraintlayout.helper.widget", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, -1, -1, -1 };
  return &_ADXCarousel_1;
}

@end

void ADXCarousel_1_initWithADXCarousel_(ADXCarousel_1 *self, ADXCarousel *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXCarousel_1 *new_ADXCarousel_1_initWithADXCarousel_(ADXCarousel *outer$) {
  J2OBJC_NEW_IMPL(ADXCarousel_1, initWithADXCarousel_, outer$)
}

ADXCarousel_1 *create_ADXCarousel_1_initWithADXCarousel_(ADXCarousel *outer$) {
  J2OBJC_CREATE_IMPL(ADXCarousel_1, initWithADXCarousel_, outer$)
}

@implementation ADXCarousel_1_1

- (instancetype)initWithADXCarousel_1:(ADXCarousel_1 *)outer$
                            withFloat:(jfloat)capture$0 {
  ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(self, outer$, capture$0);
  return self;
}

- (void)run {
  [((ADXMotionLayout *) nil_chk(this$0_->this$0_->mMotionLayout_)) touchAnimateToWithInt:ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE withFloat:1 withFloat:val$v_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXCarousel_1:withFloat:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXCarousel_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$v_", "F", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCarousel_1;F", "LADXCarousel_1;", "run" };
  static const J2ObjcClassInfo _ADXCarousel_1_1 = { "", "androidx.constraintlayout.helper.widget", ptrTable, methods, fields, 7, 0x8010, 2, 2, 1, -1, 2, -1, -1 };
  return &_ADXCarousel_1_1;
}

@end

void ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(ADXCarousel_1_1 *self, ADXCarousel_1 *outer$, jfloat capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$v_ = capture$0;
  NSObject_init(self);
}

ADXCarousel_1_1 *new_ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(ADXCarousel_1 *outer$, jfloat capture$0) {
  J2OBJC_NEW_IMPL(ADXCarousel_1_1, initWithADXCarousel_1_withFloat_, outer$, capture$0)
}

ADXCarousel_1_1 *create_ADXCarousel_1_1_initWithADXCarousel_1_withFloat_(ADXCarousel_1 *outer$, jfloat capture$0) {
  J2OBJC_CREATE_IMPL(ADXCarousel_1_1, initWithADXCarousel_1_withFloat_, outer$, capture$0)
}

@implementation ADXCarousel_$Lambda$1

- (void)run {
  [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) setTransitionDurationWithInt:this$0_->mAnimateTargetDelay_];
  if (this$0_->mTargetIndex_ < this$0_->mIndex_) {
    [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) transitionToStateWithInt:this$0_->previousState_ withInt:this$0_->mAnimateTargetDelay_];
  }
  else {
    [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) transitionToStateWithInt:this$0_->nextState_ withInt:this$0_->mAnimateTargetDelay_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

@end

void ADXCarousel_$Lambda$1_initWithADXCarousel_(ADXCarousel_$Lambda$1 *self, ADXCarousel *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXCarousel_$Lambda$1 *new_ADXCarousel_$Lambda$1_initWithADXCarousel_(ADXCarousel *outer$) {
  J2OBJC_NEW_IMPL(ADXCarousel_$Lambda$1, initWithADXCarousel_, outer$)
}

ADXCarousel_$Lambda$1 *create_ADXCarousel_$Lambda$1_initWithADXCarousel_(ADXCarousel *outer$) {
  J2OBJC_CREATE_IMPL(ADXCarousel_$Lambda$1, initWithADXCarousel_, outer$)
}
