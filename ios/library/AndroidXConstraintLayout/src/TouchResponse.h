//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\TouchResponse.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TouchResponse")
#ifdef RESTRICT_TouchResponse
#define INCLUDE_ALL_TouchResponse 0
#else
#define INCLUDE_ALL_TouchResponse 1
#endif
#undef RESTRICT_TouchResponse

#if !defined (ADXTouchResponse_) && (INCLUDE_ALL_TouchResponse || defined(INCLUDE_ADXTouchResponse))
#define ADXTouchResponse_

@class ADMotionEvent;
@class ADRectF;
@class ADViewGroup;
@class ADXMotionLayout;
@class ADXMotionScene;
@class ADXOnSwipe;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class NSString;
@protocol ADXMotionLayout_MotionTracker;

/*!
 @brief This class is used to manage Touch behaviour
 */
@interface ADXTouchResponse : NSObject {
 @public
  float mRotateCenterX_;
  float mRotateCenterY_;
  bool mIsRotateMode_;
}

#pragma mark Public

- (instancetype)initPackagePrivateWithADXMotionLayout:(ADXMotionLayout *)layout
                                       withADXOnSwipe:(ADXOnSwipe *)onSwipe;

/*!
 @brief Get the view being used as anchor
 */
- (int32_t)getAnchorId;

/*!
 @brief Get how the drag progress will return to the start or end state on touch up.
 Can be ether COMPLETE_MODE_CONTINUOUS_VELOCITY (default) or COMPLETE_MODE_SPRING
 */
- (int32_t)getAutoCompleteMode;

/*!
 @brief flags to control
 */
- (int32_t)getFlags;

/*!
 @brief Gets the maximum velocity allowed on touch up.
 Velocity is the rate of change in "progress" per second.
 */
- (float)getMaxVelocity;

/*!
 @brief The spring's behaviour when it hits 0 or 1.It can be made ot overshoot or bounce
  overshoot = 0
  bounceStart = 1
  bounceEnd = 2
  bounceBoth = 3
 @return Bounce mode
 */
- (int32_t)getSpringBoundary;

/*!
 @brief the damping of the spring if using spring
  c in "a = (-k*x-c*v)/m" equation for the acceleration of a spring
 @return NaN if not set
 */
- (float)getSpringDamping;

/*!
 @brief the Mass of the spring if using spring
   m in "a = (-k*x-c*v)/m" equation for the acceleration of a spring
 @return default is 1
 */
- (float)getSpringMass;

/*!
 @brief the stiffness of the spring if using spring
   K in "a = (-k*x-c*v)/m" equation for the acceleration of a spring
 @return NaN if not set
 */
- (float)getSpringStiffness;

/*!
 @brief The threshold below
 @return NaN if not set
 */
- (float)getSpringStopThreshold;

/*!
 @brief set the id of the anchor
 @param id_
 */
- (void)setAnchorIdWithInt:(int32_t)id_;

/*!
 @brief set the maximum Acceleration allowed for a motion.
 Acceleration is the rate of change velocity per second.
 @param acceleration
 */
- (void)setMaxAccelerationWithFloat:(float)acceleration;

/*!
 @brief Sets the maximum velocity allowed on touch up.
 Velocity is the rate of change in "progress" per second.
 @param velocity in progress per second 1 = one second to do the entire animation
 */
- (void)setMaxVelocityWithFloat:(float)velocity;

- (void)setRTLWithBoolean:(bool)rtl;

/*!
 @brief Set the location in the view to be the touch anchor
 @param x location in x 0 = left, 1 = right
 @param y location in y 0 = top, 1 = bottom
 */
- (void)setTouchAnchorLocationWithFloat:(float)x
                              withFloat:(float)y;

- (void)setTouchUpModeWithInt:(int32_t)touchUpMode;

- (NSString *)description;

#pragma mark Package-Private

- (float)dotWithFloat:(float)dx
            withFloat:(float)dy;

/*!
 @brief This calculates the bounds of the mTouchRegionId view.
 This reuses rect for efficiency as this class will be called many times.
 @param layout The layout containing the view (findViewId)
 @param rect the rectangle to fill provided so this function does not have to create memory
 @return the rect or null
 */
- (ADRectF *)getLimitBoundsToWithADViewGroup:(ADViewGroup *)layout
                                 withADRectF:(ADRectF *)rect;

- (int32_t)getLimitBoundsToId;

- (float)getMaxAcceleration;

- (bool)getMoveWhenScrollAtTop;

/*!
 @brief Calculate if a drag in this direction results in an increase or decrease in progress.
 @param dx drag direction in x
 @param dy drag direction in y
 @return the change in progress given that dx and dy
 */
- (float)getProgressDirectionWithFloat:(float)dx
                             withFloat:(float)dy;

/*!
 @brief This calculates the bounds of the mTouchRegionId view.
 This reuses rect for efficiency as this class will be called many times.
 @param layout The layout containing the view (findViewId)
 @param rect the rectangle to fill provided so this function does not have to create memory
 @return the rect or null
 */
- (ADRectF *)getTouchRegionWithADViewGroup:(ADViewGroup *)layout
                               withADRectF:(ADRectF *)rect;

- (int32_t)getTouchRegionId;

/*!
 @brief Process touch events
 @param event The event coming from the touch
 @param currentState
 @param motionScene The relevant MotionScene
 */
- (void)processTouchEventWithADMotionEvent:(ADMotionEvent *)event
         withADXMotionLayout_MotionTracker:(id<ADXMotionLayout_MotionTracker>)velocityTracker
                                   withInt:(int32_t)currentState
                        withADXMotionScene:(ADXMotionScene *)motionScene;

/*!
 @param event
 @param velocityTracker
 @param currentState
 @param motionScene
 */
- (void)processTouchRotateEventWithADMotionEvent:(ADMotionEvent *)event
               withADXMotionLayout_MotionTracker:(id<ADXMotionLayout_MotionTracker>)velocityTracker
                                         withInt:(int32_t)currentState
                              withADXMotionScene:(ADXMotionScene *)motionScene;

- (void)scrollMoveWithFloat:(float)dx
                  withFloat:(float)dy;

- (void)scrollUpWithFloat:(float)dx
                withFloat:(float)dy;

/*!
 @brief set how the drag progress will return to the start or end state on touch up.
 */
- (void)setAutoCompleteModeWithInt:(int32_t)autoCompleteMode;

- (void)setDownWithFloat:(float)lastTouchX
               withFloat:(float)lastTouchY;

- (void)setupTouch;

- (void)setUpTouchEventWithFloat:(float)lastTouchX
                       withFloat:(float)lastTouchY;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ADXTouchResponse)

inline int32_t ADXTouchResponse_get_FLAG_DISABLE_POST_SCROLL(void);
#define ADXTouchResponse_FLAG_DISABLE_POST_SCROLL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, FLAG_DISABLE_POST_SCROLL, int32_t)

inline int32_t ADXTouchResponse_get_FLAG_DISABLE_SCROLL(void);
#define ADXTouchResponse_FLAG_DISABLE_SCROLL 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, FLAG_DISABLE_SCROLL, int32_t)

inline int32_t ADXTouchResponse_get_FLAG_SUPPORT_SCROLL_UP(void);
#define ADXTouchResponse_FLAG_SUPPORT_SCROLL_UP 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, FLAG_SUPPORT_SCROLL_UP, int32_t)

inline int32_t ADXTouchResponse_get_COMPLETE_MODE_CONTINUOUS_VELOCITY(void);
#define ADXTouchResponse_COMPLETE_MODE_CONTINUOUS_VELOCITY 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, COMPLETE_MODE_CONTINUOUS_VELOCITY, int32_t)

inline int32_t ADXTouchResponse_get_COMPLETE_MODE_SPRING(void);
#define ADXTouchResponse_COMPLETE_MODE_SPRING 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXTouchResponse, COMPLETE_MODE_SPRING, int32_t)

FOUNDATION_EXPORT void ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(ADXTouchResponse *self, ADXMotionLayout *layout, ADXOnSwipe *onSwipe);

FOUNDATION_EXPORT ADXTouchResponse *new_ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(ADXMotionLayout *layout, ADXOnSwipe *onSwipe) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXTouchResponse *create_ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(ADXMotionLayout *layout, ADXOnSwipe *onSwipe);

J2OBJC_TYPE_LITERAL_HEADER(ADXTouchResponse)

@compatibility_alias AndroidxConstraintlayoutMotionWidgetTouchResponse ADXTouchResponse;


#endif

#pragma pop_macro("INCLUDE_ALL_TouchResponse")
