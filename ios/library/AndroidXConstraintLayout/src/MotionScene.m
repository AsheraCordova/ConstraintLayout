//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\MotionScene.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AccelerateDecelerateInterpolator.h"
#include "AccelerateInterpolator.h"
#include "AnimationUtils.h"
#include "AnticipateInterpolator.h"
#include "BounceInterpolator.h"
#include "CLDebug.h"
#include "CLStateSet.h"
#include "ConstraintSet.h"
#include "Context.h"
#include "DecelerateInterpolator.h"
#include "Easing.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Interpolator.h"
#include "J2ObjC_source.h"
#include "KeyFrames.h"
#include "Log.h"
#include "MotionController.h"
#include "MotionEvent.h"
#include "MotionLayout.h"
#include "MotionScene.h"
#include "OnSwipe.h"
#include "OvershootInterpolator.h"
#include "RectF.h"
#include "Resources.h"
#include "SparseArray.h"
#include "SparseIntArray.h"
#include "TouchResponse.h"
#include "View.h"
#include "ViewTransitionController.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXMotionScene () {
 @public
  ADXMotionLayout *mMotionLayout_;
  bool mDisableAutoTransition_;
  JavaUtilArrayList *mTransitionList_;
  ADXMotionScene_Transition *mDefaultTransition_;
  JavaUtilArrayList *mAbstractTransitionList_;
  ADSparseArray *mConstraintSetMap_;
  ADSparseIntArray *mDeriveMap_;
  bool DEBUG_DESKTOP_;
  ADMotionEvent *mLastTouchDown_;
  bool mIgnoreTouch_;
  bool mMotionOutsideRegion_;
  id<ADXMotionLayout_MotionTracker> mVelocityTracker_;
  bool mRtl_;
}

- (int32_t)getIndexWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition;

- (int32_t)getRealIDWithInt:(int32_t)stateId;

- (bool)isProcessingTouch;

- (bool)hasCycleDependencyWithInt:(int32_t)key;

- (void)readConstraintChainWithInt:(int32_t)key
               withADXMotionLayout:(ADXMotionLayout *)motionLayout;

@end

J2OBJC_FIELD_SETTER(ADXMotionScene, mMotionLayout_, ADXMotionLayout *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mTransitionList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mDefaultTransition_, ADXMotionScene_Transition *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mAbstractTransitionList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mConstraintSetMap_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mDeriveMap_, ADSparseIntArray *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mLastTouchDown_, ADMotionEvent *)
J2OBJC_FIELD_SETTER(ADXMotionScene, mVelocityTracker_, id<ADXMotionLayout_MotionTracker>)

inline NSString *ADXMotionScene_get_TAG(void);
static NSString *ADXMotionScene_TAG = @"MotionScene";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionScene, TAG, NSString *)

inline bool ADXMotionScene_get_DEBUG(void);
#define ADXMotionScene_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionScene, DEBUG, bool)

inline int32_t ADXMotionScene_get_MIN_DURATION(void);
#define ADXMotionScene_MIN_DURATION 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionScene, MIN_DURATION, int32_t)

inline int32_t ADXMotionScene_get_SPLINE_STRING(void);
#define ADXMotionScene_SPLINE_STRING -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionScene, SPLINE_STRING, int32_t)

inline int32_t ADXMotionScene_get_INTERPOLATOR_REFERENCE_ID(void);
#define ADXMotionScene_INTERPOLATOR_REFERENCE_ID -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionScene, INTERPOLATOR_REFERENCE_ID, int32_t)

__attribute__((unused)) static int32_t ADXMotionScene_getIndexWithADXMotionScene_Transition_(ADXMotionScene *self, ADXMotionScene_Transition *transition);

__attribute__((unused)) static int32_t ADXMotionScene_getRealIDWithInt_(ADXMotionScene *self, int32_t stateId);

__attribute__((unused)) static bool ADXMotionScene_isProcessingTouch(ADXMotionScene *self);

__attribute__((unused)) static bool ADXMotionScene_hasCycleDependencyWithInt_(ADXMotionScene *self, int32_t key);

__attribute__((unused)) static void ADXMotionScene_readConstraintChainWithInt_withADXMotionLayout_(ADXMotionScene *self, int32_t key, ADXMotionLayout *motionLayout);

@interface ADXMotionScene_Transition () {
 @public
  bool mIsAbstract_;
  NSString *mDefaultInterpolatorString_;
  ADXMotionScene *mMotionScene_;
  JavaUtilArrayList *mKeyFramesList_;
  ADXTouchResponse *mTouchResponse_;
  JavaUtilArrayList *mOnClicks_;
  bool mDisable_;
}

@end

J2OBJC_FIELD_SETTER(ADXMotionScene_Transition, mDefaultInterpolatorString_, NSString *)
J2OBJC_FIELD_SETTER(ADXMotionScene_Transition, mMotionScene_, ADXMotionScene *)
J2OBJC_FIELD_SETTER(ADXMotionScene_Transition, mKeyFramesList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionScene_Transition, mTouchResponse_, ADXTouchResponse *)
J2OBJC_FIELD_SETTER(ADXMotionScene_Transition, mOnClicks_, JavaUtilArrayList *)

@interface ADXMotionScene_Transition_TransitionOnClick () {
 @public
  ADXMotionScene_Transition *mTransition_;
}

@end

J2OBJC_FIELD_SETTER(ADXMotionScene_Transition_TransitionOnClick, mTransition_, ADXMotionScene_Transition *)

@interface ADXMotionScene_1 : NSObject < ADInterpolator > {
 @public
  ADXEasing *val$easing_;
}

- (instancetype)initWithADXEasing:(ADXEasing *)capture$0;

- (float)getInterpolationWithFloat:(float)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXMotionScene_1)

__attribute__((unused)) static void ADXMotionScene_1_initWithADXEasing_(ADXMotionScene_1 *self, ADXEasing *capture$0);

__attribute__((unused)) static ADXMotionScene_1 *new_ADXMotionScene_1_initWithADXEasing_(ADXEasing *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXMotionScene_1 *create_ADXMotionScene_1_initWithADXEasing_(ADXEasing *capture$0);


@implementation ADXMotionScene

- (void)setTransitionWithInt:(int32_t)beginId
                     withInt:(int32_t)endId {
  int32_t start = beginId;
  int32_t end = endId;
  if (mStateSet_ != nil) {
    int32_t tmp = [mStateSet_ stateGetConstraintIDWithInt:beginId withInt:-1 withInt:-1];
    if (tmp != -1) {
      start = tmp;
    }
    tmp = [((ADXCLStateSet *) nil_chk(mStateSet_)) stateGetConstraintIDWithInt:endId withInt:-1 withInt:-1];
    if (tmp != -1) {
      end = tmp;
    }
  }
  if (mCurrentTransition_ != nil) {
    if (mCurrentTransition_->mConstraintSetEnd_ == endId && mCurrentTransition_->mConstraintSetStart_ == beginId) {
      return;
    }
  }
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mTransitionList_)) {
    if ((((ADXMotionScene_Transition *) nil_chk(transition))->mConstraintSetEnd_ == end && transition->mConstraintSetStart_ == start) || (transition->mConstraintSetEnd_ == endId && transition->mConstraintSetStart_ == beginId)) {
      JreStrongAssign(&mCurrentTransition_, transition);
      if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
        [mCurrentTransition_->mTouchResponse_ setRTLWithBoolean:mRtl_];
      }
      return;
    }
  }
  ADXMotionScene_Transition *matchTransition = JreRetainedLocalValue(mDefaultTransition_);
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mAbstractTransitionList_)) {
    if (((ADXMotionScene_Transition *) nil_chk(transition))->mConstraintSetEnd_ == endId) {
      matchTransition = transition;
    }
  }
  ADXMotionScene_Transition *t = create_ADXMotionScene_Transition_initWithADXMotionScene_withADXMotionScene_Transition_(self, matchTransition);
  t->mConstraintSetStart_ = start;
  t->mConstraintSetEnd_ = end;
  if (start != ADXMotionScene_UNSET) {
    [((JavaUtilArrayList *) nil_chk(mTransitionList_)) addWithId:t];
  }
  JreStrongAssign(&mCurrentTransition_, t);
}

- (void)addTransitionWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition {
  int32_t index = ADXMotionScene_getIndexWithADXMotionScene_Transition_(self, transition);
  if (index == -1) {
    [((JavaUtilArrayList *) nil_chk(mTransitionList_)) addWithId:transition];
  }
  else {
    [((JavaUtilArrayList *) nil_chk(mTransitionList_)) setWithInt:index withId:transition];
  }
}

- (void)removeTransitionWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition {
  int32_t index = ADXMotionScene_getIndexWithADXMotionScene_Transition_(self, transition);
  if (index != -1) {
    [((JavaUtilArrayList *) nil_chk(mTransitionList_)) removeWithInt:index];
  }
}

- (int32_t)getIndexWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition {
  return ADXMotionScene_getIndexWithADXMotionScene_Transition_(self, transition);
}

- (bool)validateLayoutWithADXMotionLayout:(ADXMotionLayout *)layout {
  return (JreObjectEqualsEquals(layout, mMotionLayout_) && JreObjectEqualsEquals(((ADXMotionLayout *) nil_chk(layout))->mScene_, self));
}

- (void)setTransitionWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition {
  JreStrongAssign(&mCurrentTransition_, transition);
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    [mCurrentTransition_->mTouchResponse_ setRTLWithBoolean:mRtl_];
  }
}

- (int32_t)getRealIDWithInt:(int32_t)stateId {
  return ADXMotionScene_getRealIDWithInt_(self, stateId);
}

- (id<JavaUtilList>)getTransitionsWithStateWithInt:(int32_t)stateId {
  stateId = ADXMotionScene_getRealIDWithInt_(self, stateId);
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mTransitionList_)) {
    if (((ADXMotionScene_Transition *) nil_chk(transition))->mConstraintSetStart_ == stateId || transition->mConstraintSetEnd_ == stateId) {
      [ret addWithId:transition];
    }
  }
  return ret;
}

- (void)addOnClickListenersWithADXMotionLayout:(ADXMotionLayout *)motionLayout
                                       withInt:(int32_t)currentState {
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mTransitionList_)) {
    if ([((JavaUtilArrayList *) nil_chk(((ADXMotionScene_Transition *) nil_chk(transition))->mOnClicks_)) size] > 0) {
      for (ADXMotionScene_Transition_TransitionOnClick * __strong onClick in nil_chk(transition->mOnClicks_)) {
        [((ADXMotionScene_Transition_TransitionOnClick *) nil_chk(onClick)) removeOnClickListenersWithADXMotionLayout:motionLayout];
      }
    }
  }
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mAbstractTransitionList_)) {
    if ([((JavaUtilArrayList *) nil_chk(((ADXMotionScene_Transition *) nil_chk(transition))->mOnClicks_)) size] > 0) {
      for (ADXMotionScene_Transition_TransitionOnClick * __strong onClick in nil_chk(transition->mOnClicks_)) {
        [((ADXMotionScene_Transition_TransitionOnClick *) nil_chk(onClick)) removeOnClickListenersWithADXMotionLayout:motionLayout];
      }
    }
  }
  for (ADXMotionScene_Transition * __strong transition in mTransitionList_) {
    if ([((JavaUtilArrayList *) nil_chk(((ADXMotionScene_Transition *) nil_chk(transition))->mOnClicks_)) size] > 0) {
      for (ADXMotionScene_Transition_TransitionOnClick * __strong onClick in nil_chk(transition->mOnClicks_)) {
        [((ADXMotionScene_Transition_TransitionOnClick *) nil_chk(onClick)) addOnClickListenersWithADXMotionLayout:motionLayout withInt:currentState withADXMotionScene_Transition:transition];
      }
    }
  }
  for (ADXMotionScene_Transition * __strong transition in mAbstractTransitionList_) {
    if ([((JavaUtilArrayList *) nil_chk(((ADXMotionScene_Transition *) nil_chk(transition))->mOnClicks_)) size] > 0) {
      for (ADXMotionScene_Transition_TransitionOnClick * __strong onClick in nil_chk(transition->mOnClicks_)) {
        [((ADXMotionScene_Transition_TransitionOnClick *) nil_chk(onClick)) addOnClickListenersWithADXMotionLayout:motionLayout withInt:currentState withADXMotionScene_Transition:transition];
      }
    }
  }
}

- (ADXMotionScene_Transition *)bestTransitionForWithInt:(int32_t)currentState
                                              withFloat:(float)dx
                                              withFloat:(float)dy
                                      withADMotionEvent:(ADMotionEvent *)lastTouchDown {
  id<JavaUtilList> candidates = nil;
  if (currentState != -1) {
    candidates = [self getTransitionsWithStateWithInt:currentState];
    float max = 0;
    ADXMotionScene_Transition *best = nil;
    ADRectF *cache = create_ADRectF_init();
    for (ADXMotionScene_Transition * __strong transition in nil_chk(candidates)) {
      if (((ADXMotionScene_Transition *) nil_chk(transition))->mDisable_) {
        continue;
      }
      if (transition->mTouchResponse_ != nil) {
        [transition->mTouchResponse_ setRTLWithBoolean:mRtl_];
        ADRectF *region = JreRetainedLocalValue([((ADXTouchResponse *) nil_chk(transition->mTouchResponse_)) getTouchRegionWithADViewGroup:mMotionLayout_ withADRectF:cache]);
        if (region != nil && lastTouchDown != nil && (![region containsWithFloat:[lastTouchDown getX] withFloat:[lastTouchDown getY]])) {
          continue;
        }
        region = [((ADXTouchResponse *) nil_chk(transition->mTouchResponse_)) getLimitBoundsToWithADViewGroup:mMotionLayout_ withADRectF:cache];
        if (region != nil && lastTouchDown != nil && (![region containsWithFloat:[lastTouchDown getX] withFloat:[lastTouchDown getY]])) {
          continue;
        }
        float val = [((ADXTouchResponse *) nil_chk(transition->mTouchResponse_)) dotWithFloat:dx withFloat:dy];
        if (((ADXTouchResponse *) nil_chk(transition->mTouchResponse_))->mIsRotateMode_ && lastTouchDown != nil) {
          float startX = [lastTouchDown getX] - ((ADXTouchResponse *) nil_chk(transition->mTouchResponse_))->mRotateCenterX_;
          float startY = [lastTouchDown getY] - ((ADXTouchResponse *) nil_chk(transition->mTouchResponse_))->mRotateCenterY_;
          float endX = dx + startX;
          float endY = dy + startY;
          double endAngle = JavaLangMath_atan2WithDouble_withDouble_(endY, endX);
          double startAngle = JavaLangMath_atan2WithDouble_withDouble_(startX, startY);
          val = (float) (endAngle - startAngle) * 10;
        }
        if (transition->mConstraintSetEnd_ == currentState) {
          JreTimesAssignFloatF(&val, -1);
        }
        else {
          JreTimesAssignFloatF(&val, 1.1f);
        }
        if (val > max) {
          max = val;
          best = transition;
        }
      }
    }
    return best;
  }
  return mCurrentTransition_;
}

- (JavaUtilArrayList *)getDefinedTransitions {
  return mTransitionList_;
}

- (ADXMotionScene_Transition *)getTransitionByIdWithInt:(int32_t)id_ {
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mTransitionList_)) {
    if (((ADXMotionScene_Transition *) nil_chk(transition))->mId_ == id_) {
      return transition;
    }
  }
  return nil;
}

- (IOSIntArray *)getConstraintSetIds {
  IOSIntArray *ids = [IOSIntArray arrayWithLength:[((ADSparseArray *) nil_chk(mConstraintSetMap_)) size]];
  for (int32_t i = 0; i < ids->size_; i++) {
    *IOSIntArray_GetRef(ids, i) = [((ADSparseArray *) nil_chk(mConstraintSetMap_)) keyAtWithInt:i];
  }
  return ids;
}

- (bool)autoTransitionWithADXMotionLayout:(ADXMotionLayout *)motionLayout
                                  withInt:(int32_t)currentState {
  if (ADXMotionScene_isProcessingTouch(self)) {
    return false;
  }
  if (mDisableAutoTransition_) {
    return false;
  }
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mTransitionList_)) {
    if (((ADXMotionScene_Transition *) nil_chk(transition))->mAutoTransition_ == ADXMotionScene_Transition_AUTO_NONE) {
      continue;
    }
    if (JreObjectEqualsEquals(mCurrentTransition_, transition) && [((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_)) isTransitionFlagWithInt:ADXMotionScene_Transition_TRANSITION_FLAG_INTRA_AUTO]) {
      continue;
    }
    if (currentState == transition->mConstraintSetStart_ && (transition->mAutoTransition_ == ADXMotionScene_Transition_AUTO_ANIMATE_TO_END || transition->mAutoTransition_ == ADXMotionScene_Transition_AUTO_JUMP_TO_END)) {
      [((ADXMotionLayout *) nil_chk(motionLayout)) setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      [motionLayout setTransitionWithADXMotionScene_Transition:transition];
      if (transition->mAutoTransition_ == ADXMotionScene_Transition_AUTO_ANIMATE_TO_END) {
        [motionLayout transitionToEnd];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
      }
      else {
        [motionLayout setProgressWithFloat:1];
        [motionLayout evaluateWithBoolean:true];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
        [motionLayout onNewStateAttachHandlers];
      }
      return true;
    }
    if (currentState == transition->mConstraintSetEnd_ && (transition->mAutoTransition_ == ADXMotionScene_Transition_AUTO_ANIMATE_TO_START || transition->mAutoTransition_ == ADXMotionScene_Transition_AUTO_JUMP_TO_START)) {
      [((ADXMotionLayout *) nil_chk(motionLayout)) setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      [motionLayout setTransitionWithADXMotionScene_Transition:transition];
      if (transition->mAutoTransition_ == ADXMotionScene_Transition_AUTO_ANIMATE_TO_START) {
        [motionLayout transitionToStart];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
      }
      else {
        [motionLayout setProgressWithFloat:0];
        [motionLayout evaluateWithBoolean:true];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
        [motionLayout setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
        [motionLayout onNewStateAttachHandlers];
      }
      return true;
    }
  }
  return false;
}

- (bool)isProcessingTouch {
  return ADXMotionScene_isProcessingTouch(self);
}

- (void)viewTransitionWithInt:(int32_t)id_
              withADViewArray:(IOSObjectArray *)view {
  [((ADXViewTransitionController *) nil_chk(mViewTransitionController_)) viewTransitionWithInt:id_ withADViewArray:view];
}

- (ADXConstraintSet *)getConstraintSetWithADContext:(ADContext *)context
                                       withNSString:(NSString *)id_ {
  if (DEBUG_DESKTOP_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"id ", id_)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"size ", [((ADSparseArray *) nil_chk(mConstraintSetMap_)) size])];
  }
  for (int32_t i = 0; i < [((ADSparseArray *) nil_chk(mConstraintSetMap_)) size]; i++) {
    int32_t key = [((ADSparseArray *) nil_chk(mConstraintSetMap_)) keyAtWithInt:i];
    NSString *IdAsString = JreRetainedLocalValue([((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getResourceNameWithInt:key]);
    if (DEBUG_DESKTOP_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$$$C", @"Id for <", i, @"> is <", IdAsString, @"> looking for <", id_, '>')];
    }
    if ([((NSString *) nil_chk(id_)) isEqual:IdAsString]) {
      return [((ADSparseArray *) nil_chk(mConstraintSetMap_)) getWithInt:key];
    }
  }
  return nil;
}

- (ADXConstraintSet *)getConstraintSetWithInt:(int32_t)id_ {
  return [self getConstraintSetWithInt:id_ withInt:-1 withInt:-1];
}

- (ADXConstraintSet *)getConstraintSetWithInt:(int32_t)id_
                                      withInt:(int32_t)width
                                      withInt:(int32_t)height {
  if (DEBUG_DESKTOP_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"id ", id_)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"size ", [((ADSparseArray *) nil_chk(mConstraintSetMap_)) size])];
  }
  if (mStateSet_ != nil) {
    int32_t cid = [mStateSet_ stateGetConstraintIDWithInt:id_ withInt:width withInt:height];
    if (cid != -1) {
      id_ = cid;
    }
  }
  if ([((ADSparseArray *) nil_chk(mConstraintSetMap_)) getWithInt:id_] == nil) {
    ADLog_eWithNSString_withNSString_(ADXMotionScene_TAG, JreStrcat("$I$", @"Warning could not find ConstraintSet id/", ADXCLDebug_getNameWithADContext_withInt_([((ADXMotionLayout *) nil_chk(mMotionLayout_)) getContext], id_), @" In MotionScene"));
    return [((ADSparseArray *) nil_chk(mConstraintSetMap_)) getWithInt:[mConstraintSetMap_ keyAtWithInt:0]];
  }
  return [((ADSparseArray *) nil_chk(mConstraintSetMap_)) getWithInt:id_];
}

- (void)setConstraintSetWithInt:(int32_t)id_
           withADXConstraintSet:(ADXConstraintSet *)set {
  [((ADSparseArray *) nil_chk(mConstraintSetMap_)) putWithInt:id_ withId:set];
}

- (void)getKeyFramesWithADXMotionController:(ADXMotionController *)motionController {
  if (mCurrentTransition_ == nil) {
    if (mDefaultTransition_ != nil) {
      for (ADXKeyFrames * __strong keyFrames in nil_chk(mDefaultTransition_->mKeyFramesList_)) {
        [((ADXKeyFrames *) nil_chk(keyFrames)) addFramesWithADXMotionController:motionController];
      }
    }
    return;
  }
  for (ADXKeyFrames * __strong keyFrames in nil_chk(mCurrentTransition_->mKeyFramesList_)) {
    [((ADXKeyFrames *) nil_chk(keyFrames)) addFramesWithADXMotionController:motionController];
  }
}

- (bool)supportTouch {
  for (ADXMotionScene_Transition * __strong transition in nil_chk(mTransitionList_)) {
    if (((ADXMotionScene_Transition *) nil_chk(transition))->mTouchResponse_ != nil) {
      return true;
    }
  }
  return mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil;
}

- (void)processTouchEventWithADMotionEvent:(ADMotionEvent *)event
                                   withInt:(int32_t)currentState
                       withADXMotionLayout:(ADXMotionLayout *)motionLayout {
  ADRectF *cache = create_ADRectF_init();
  if (mVelocityTracker_ == nil) {
    JreStrongAssign(&mVelocityTracker_, [((ADXMotionLayout *) nil_chk(mMotionLayout_)) obtainVelocityTracker]);
  }
  [((id<ADXMotionLayout_MotionTracker>) nil_chk(mVelocityTracker_)) addMovementWithADMotionEvent:event];
  if (currentState != -1) {
    ADRectF *region;
    {
      float dy;
      float dx;
      ADXMotionScene_Transition *transition;
      switch ([((ADMotionEvent *) nil_chk(event)) getAction]) {
        case ADMotionEvent_ACTION_DOWN:
        mLastTouchX_ = [event getRawX];
        mLastTouchY_ = [event getRawY];
        JreStrongAssign(&mLastTouchDown_, event);
        mIgnoreTouch_ = false;
        if (((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mTouchResponse_ != nil) {
          region = [mCurrentTransition_->mTouchResponse_ getLimitBoundsToWithADViewGroup:mMotionLayout_ withADRectF:cache];
          if (region != nil && ![region containsWithFloat:[((ADMotionEvent *) nil_chk(mLastTouchDown_)) getX] withFloat:[((ADMotionEvent *) nil_chk(mLastTouchDown_)) getY]]) {
            JreStrongAssign(&mLastTouchDown_, nil);
            mIgnoreTouch_ = true;
            return;
          }
          region = [((ADXTouchResponse *) nil_chk(((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mTouchResponse_)) getTouchRegionWithADViewGroup:mMotionLayout_ withADRectF:cache];
          if (region != nil && (![region containsWithFloat:[((ADMotionEvent *) nil_chk(mLastTouchDown_)) getX] withFloat:[((ADMotionEvent *) nil_chk(mLastTouchDown_)) getY]])) {
            mMotionOutsideRegion_ = true;
          }
          else {
            mMotionOutsideRegion_ = false;
          }
          [((ADXTouchResponse *) nil_chk(((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mTouchResponse_)) setDownWithFloat:mLastTouchX_ withFloat:mLastTouchY_];
        }
        return;
        case ADMotionEvent_ACTION_MOVE:
        if (mIgnoreTouch_) {
          break;
        }
        dy = [event getRawY] - mLastTouchY_;
        dx = [event getRawX] - mLastTouchX_;
        if ((dx == 0.0 && dy == 0.0) || mLastTouchDown_ == nil) {
          return;
        }
        transition = JreRetainedLocalValue([self bestTransitionForWithInt:currentState withFloat:dx withFloat:dy withADMotionEvent:mLastTouchDown_]);
        if (transition != nil) {
          [((ADXMotionLayout *) nil_chk(motionLayout)) setTransitionWithADXMotionScene_Transition:transition];
          region = [((ADXTouchResponse *) nil_chk(((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mTouchResponse_)) getTouchRegionWithADViewGroup:mMotionLayout_ withADRectF:cache];
          mMotionOutsideRegion_ = (region != nil && (![region containsWithFloat:[((ADMotionEvent *) nil_chk(mLastTouchDown_)) getX] withFloat:[((ADMotionEvent *) nil_chk(mLastTouchDown_)) getY]]));
          [((ADXTouchResponse *) nil_chk(((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mTouchResponse_)) setUpTouchEventWithFloat:mLastTouchX_ withFloat:mLastTouchY_];
        }
      }
    }
  }
  if (mIgnoreTouch_) {
    return;
  }
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil && !mMotionOutsideRegion_) {
    [mCurrentTransition_->mTouchResponse_ processTouchEventWithADMotionEvent:event withADXMotionLayout_MotionTracker:mVelocityTracker_ withInt:currentState withADXMotionScene:self];
  }
  mLastTouchX_ = [((ADMotionEvent *) nil_chk(event)) getRawX];
  mLastTouchY_ = [event getRawY];
  if ([event getAction] == ADMotionEvent_ACTION_UP) {
    if (mVelocityTracker_ != nil) {
      [mVelocityTracker_ recycle];
      JreStrongAssign(&mVelocityTracker_, nil);
      if (((ADXMotionLayout *) nil_chk(motionLayout))->mCurrentState_ != ADXMotionScene_UNSET) {
        [self autoTransitionWithADXMotionLayout:motionLayout withInt:motionLayout->mCurrentState_];
      }
    }
  }
}

- (int32_t)getStartId {
  if (mCurrentTransition_ == nil) {
    return -1;
  }
  return mCurrentTransition_->mConstraintSetStart_;
}

- (int32_t)getEndId {
  if (mCurrentTransition_ == nil) {
    return -1;
  }
  return mCurrentTransition_->mConstraintSetEnd_;
}

- (id<ADInterpolator>)getInterpolator {
  {
    ADXEasing *easing;
    switch (((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mDefaultInterpolator_) {
      case ADXMotionScene_SPLINE_STRING:
      easing = ADXEasing_getInterpolatorWithNSString_(mCurrentTransition_->mDefaultInterpolatorString_);
      return create_ADXMotionScene_1_initWithADXEasing_(easing);
      case ADXMotionScene_INTERPOLATOR_REFERENCE_ID:
      return ADAnimationUtils_loadInterpolatorWithADContext_withInt_([((ADXMotionLayout *) nil_chk(mMotionLayout_)) getContext], ((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mDefaultInterpolatorID_);
      case ADXMotionScene_EASE_IN_OUT:
      return create_ADAccelerateDecelerateInterpolator_init();
      case ADXMotionScene_EASE_IN:
      return create_ADAccelerateInterpolator_init();
      case ADXMotionScene_EASE_OUT:
      return create_ADDecelerateInterpolator_init();
      case ADXMotionScene_LINEAR:
      return nil;
      case ADXMotionScene_ANTICIPATE:
      return create_ADAnticipateInterpolator_init();
      case ADXMotionScene_OVERSHOOT:
      return create_ADOvershootInterpolator_init();
      case ADXMotionScene_BOUNCE:
      return create_ADBounceInterpolator_init();
    }
  }
  return nil;
}

- (int32_t)getDuration {
  if (mCurrentTransition_ != nil) {
    return mCurrentTransition_->mDuration_;
  }
  return mDefaultDuration_;
}

- (void)setDurationWithInt:(int32_t)duration {
  if (mCurrentTransition_ != nil) {
    [mCurrentTransition_ setDurationWithInt:duration];
  }
  else {
    mDefaultDuration_ = duration;
  }
}

- (int32_t)gatPathMotionArc {
  return (mCurrentTransition_ != nil) ? ((ADXMotionScene_Transition *) nil_chk(mCurrentTransition_))->mPathMotionArc_ : ADXMotionScene_UNSET;
}

- (float)getStaggered {
  if (mCurrentTransition_ != nil) {
    return mCurrentTransition_->mStagger_;
  }
  return 0;
}

- (float)getMaxAcceleration {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getMaxAcceleration];
  }
  return 0;
}

- (float)getMaxVelocity {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getMaxVelocity];
  }
  return 0;
}

- (float)getSpringStiffiness {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getSpringStiffness];
  }
  return 0;
}

- (float)getSpringMass {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getSpringMass];
  }
  return 0;
}

- (float)getSpringDamping {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getSpringDamping];
  }
  return 0;
}

- (float)getSpringStopThreshold {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getSpringStopThreshold];
  }
  return 0;
}

- (int32_t)getSpringBoundary {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getSpringBoundary];
  }
  return 0;
}

- (int32_t)getAutoCompleteMode {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    return [mCurrentTransition_->mTouchResponse_ getAutoCompleteMode];
  }
  return 0;
}

- (void)setupTouch {
  if (mCurrentTransition_ != nil && mCurrentTransition_->mTouchResponse_ != nil) {
    [mCurrentTransition_->mTouchResponse_ setupTouch];
  }
}

- (void)readFallbackWithADXMotionLayout:(ADXMotionLayout *)motionLayout {
  for (int32_t i = 0; i < [((ADSparseArray *) nil_chk(mConstraintSetMap_)) size]; i++) {
    int32_t key = [((ADSparseArray *) nil_chk(mConstraintSetMap_)) keyAtWithInt:i];
    if (ADXMotionScene_hasCycleDependencyWithInt_(self, key)) {
      ADLog_eWithNSString_withNSString_(ADXMotionScene_TAG, @"Cannot be derived from yourself");
      return;
    }
    ADXMotionScene_readConstraintChainWithInt_withADXMotionLayout_(self, key, motionLayout);
  }
}

- (bool)hasCycleDependencyWithInt:(int32_t)key {
  return ADXMotionScene_hasCycleDependencyWithInt_(self, key);
}

- (void)readConstraintChainWithInt:(int32_t)key
               withADXMotionLayout:(ADXMotionLayout *)motionLayout {
  ADXMotionScene_readConstraintChainWithInt_withADXMotionLayout_(self, key, motionLayout);
}

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)layout {
  ADXMotionScene_initWithADXMotionLayout_(self, layout);
  return self;
}

- (void)putDerivedIdWithInt:(int32_t)id_
                    withInt:(int32_t)derivedId {
  [((ADSparseIntArray *) nil_chk(mDeriveMap_)) putWithInt:id_ withInt:derivedId];
}

- (void)copyDerivedContraintsWithADXConstraintSet:(ADXConstraintSet *)cs
                                          withInt:(int32_t)key
                              withADXMotionLayout:(ADXMotionLayout *)motionLayout {
  JreStrongAssign(&((ADXConstraintSet *) nil_chk(cs))->derivedState_, cs->mIdString_);
  int32_t derivedFromId = [((ADSparseIntArray *) nil_chk(mDeriveMap_)) getWithInt:key];
  if (derivedFromId > 0) {
    ADXConstraintSet *derivedFrom = JreRetainedLocalValue([((ADSparseArray *) nil_chk(mConstraintSetMap_)) getWithInt:derivedFromId]);
    if (derivedFrom == nil) {
      ADLog_eWithNSString_withNSString_(ADXMotionScene_TAG, JreStrcat("$I", @"ERROR! invalid deriveConstraintsFrom: @id/", ADXCLDebug_getNameWithADContext_withInt_([((ADXMotionLayout *) nil_chk(mMotionLayout_)) getContext], derivedFromId)));
      return;
    }
    JreStrAppendStrong(&cs->derivedState_, "C$", '/', derivedFrom->derivedState_);
    [cs readFallbackWithADXConstraintSet:derivedFrom];
  }
}

- (void)dealloc {
  RELEASE_(mMotionLayout_);
  RELEASE_(mStateSet_);
  RELEASE_(mCurrentTransition_);
  RELEASE_(mTransitionList_);
  RELEASE_(mDefaultTransition_);
  RELEASE_(mAbstractTransitionList_);
  RELEASE_(mConstraintSetMap_);
  RELEASE_(mDeriveMap_);
  RELEASE_(mLastTouchDown_);
  RELEASE_(mVelocityTracker_);
  RELEASE_(mViewTransitionController_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 10, 9, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXMotionScene_Transition;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LADXMotionScene_Transition;", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 18, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 19, 20, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet;", 0x0, 21, 9, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet;", 0x0, 21, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADInterpolator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 32, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setTransitionWithInt:withInt:);
  methods[1].selector = @selector(addTransitionWithADXMotionScene_Transition:);
  methods[2].selector = @selector(removeTransitionWithADXMotionScene_Transition:);
  methods[3].selector = @selector(getIndexWithADXMotionScene_Transition:);
  methods[4].selector = @selector(validateLayoutWithADXMotionLayout:);
  methods[5].selector = @selector(setTransitionWithADXMotionScene_Transition:);
  methods[6].selector = @selector(getRealIDWithInt:);
  methods[7].selector = @selector(getTransitionsWithStateWithInt:);
  methods[8].selector = @selector(addOnClickListenersWithADXMotionLayout:withInt:);
  methods[9].selector = @selector(bestTransitionForWithInt:withFloat:withFloat:withADMotionEvent:);
  methods[10].selector = @selector(getDefinedTransitions);
  methods[11].selector = @selector(getTransitionByIdWithInt:);
  methods[12].selector = @selector(getConstraintSetIds);
  methods[13].selector = @selector(autoTransitionWithADXMotionLayout:withInt:);
  methods[14].selector = @selector(isProcessingTouch);
  methods[15].selector = @selector(viewTransitionWithInt:withADViewArray:);
  methods[16].selector = @selector(getConstraintSetWithADContext:withNSString:);
  methods[17].selector = @selector(getConstraintSetWithInt:);
  methods[18].selector = @selector(getConstraintSetWithInt:withInt:withInt:);
  methods[19].selector = @selector(setConstraintSetWithInt:withADXConstraintSet:);
  methods[20].selector = @selector(getKeyFramesWithADXMotionController:);
  methods[21].selector = @selector(supportTouch);
  methods[22].selector = @selector(processTouchEventWithADMotionEvent:withInt:withADXMotionLayout:);
  methods[23].selector = @selector(getStartId);
  methods[24].selector = @selector(getEndId);
  methods[25].selector = @selector(getInterpolator);
  methods[26].selector = @selector(getDuration);
  methods[27].selector = @selector(setDurationWithInt:);
  methods[28].selector = @selector(gatPathMotionArc);
  methods[29].selector = @selector(getStaggered);
  methods[30].selector = @selector(getMaxAcceleration);
  methods[31].selector = @selector(getMaxVelocity);
  methods[32].selector = @selector(getSpringStiffiness);
  methods[33].selector = @selector(getSpringMass);
  methods[34].selector = @selector(getSpringDamping);
  methods[35].selector = @selector(getSpringStopThreshold);
  methods[36].selector = @selector(getSpringBoundary);
  methods[37].selector = @selector(getAutoCompleteMode);
  methods[38].selector = @selector(setupTouch);
  methods[39].selector = @selector(readFallbackWithADXMotionLayout:);
  methods[40].selector = @selector(hasCycleDependencyWithInt:);
  methods[41].selector = @selector(readConstraintChainWithInt:withADXMotionLayout:);
  methods[42].selector = @selector(initWithADXMotionLayout:);
  methods[43].selector = @selector(putDerivedIdWithInt:withInt:);
  methods[44].selector = @selector(copyDerivedContraintsWithADXConstraintSet:withInt:withADXMotionLayout:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXMotionScene_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "MIN_DURATION", "I", .constantValue.asInt = ADXMotionScene_MIN_DURATION, 0x1a, -1, -1, -1, -1 },
    { "TRANSITION_BACKWARD", "I", .constantValue.asInt = ADXMotionScene_TRANSITION_BACKWARD, 0x18, -1, -1, -1, -1 },
    { "TRANSITION_FORWARD", "I", .constantValue.asInt = ADXMotionScene_TRANSITION_FORWARD, 0x18, -1, -1, -1, -1 },
    { "SPLINE_STRING", "I", .constantValue.asInt = ADXMotionScene_SPLINE_STRING, 0x1a, -1, -1, -1, -1 },
    { "INTERPOLATOR_REFERENCE_ID", "I", .constantValue.asInt = ADXMotionScene_INTERPOLATOR_REFERENCE_ID, 0x1a, -1, -1, -1, -1 },
    { "UNSET", "I", .constantValue.asInt = ADXMotionScene_UNSET, 0x19, -1, -1, -1, -1 },
    { "mMotionLayout_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mStateSet_", "LADXCLStateSet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentTransition_", "LADXMotionScene_Transition;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDisableAutoTransition_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mDefaultTransition_", "LADXMotionScene_Transition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAbstractTransitionList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mConstraintSetMap_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
    { "mDeriveMap_", "LADSparseIntArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEBUG_DESKTOP_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultDuration_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mLayoutDuringTransition_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "LAYOUT_IGNORE_REQUEST", "I", .constantValue.asInt = ADXMotionScene_LAYOUT_IGNORE_REQUEST, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_HONOR_REQUEST", "I", .constantValue.asInt = ADXMotionScene_LAYOUT_HONOR_REQUEST, 0x19, -1, -1, -1, -1 },
    { "mLastTouchDown_", "LADMotionEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIgnoreTouch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMotionOutsideRegion_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVelocityTracker_", "LADXMotionLayout_MotionTracker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRtl_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mViewTransitionController_", "LADXViewTransitionController;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mLastTouchX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastTouchY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EASE_IN_OUT", "I", .constantValue.asInt = ADXMotionScene_EASE_IN_OUT, 0x18, -1, -1, -1, -1 },
    { "EASE_IN", "I", .constantValue.asInt = ADXMotionScene_EASE_IN, 0x18, -1, -1, -1, -1 },
    { "EASE_OUT", "I", .constantValue.asInt = ADXMotionScene_EASE_OUT, 0x18, -1, -1, -1, -1 },
    { "LINEAR", "I", .constantValue.asInt = ADXMotionScene_LINEAR, 0x18, -1, -1, -1, -1 },
    { "BOUNCE", "I", .constantValue.asInt = ADXMotionScene_BOUNCE, 0x18, -1, -1, -1, -1 },
    { "OVERSHOOT", "I", .constantValue.asInt = ADXMotionScene_OVERSHOOT, 0x18, -1, -1, -1, -1 },
    { "ANTICIPATE", "I", .constantValue.asInt = ADXMotionScene_ANTICIPATE, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTransition", "II", "addTransition", "LADXMotionScene_Transition;", "removeTransition", "getIndex", "validateLayout", "LADXMotionLayout;", "getRealID", "I", "getTransitionsWithState", "(I)Ljava/util/List<Landroidx/constraintlayout/motion/widget/MotionScene$Transition;>;", "addOnClickListeners", "LADXMotionLayout;I", "bestTransitionFor", "IFFLADMotionEvent;", "()Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/MotionScene$Transition;>;", "getTransitionById", "autoTransition", "viewTransition", "I[LADView;", "getConstraintSet", "LADContext;LNSString;", "III", "setConstraintSet", "ILADXConstraintSet;", "getKeyFrames", "LADXMotionController;", "processTouchEvent", "LADMotionEvent;ILADXMotionLayout;", "setDuration", "readFallback", "hasCycleDependency", "readConstraintChain", "ILADXMotionLayout;", "putDerivedId", "copyDerivedContraints", "LADXConstraintSet;ILADXMotionLayout;", &ADXMotionScene_TAG, "Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/MotionScene$Transition;>;", "Lr/android/util/SparseArray<Landroidx/constraintlayout/widget/ConstraintSet;>;" };
  static const J2ObjcClassInfo _ADXMotionScene = { "MotionScene", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x1, 45, 37, -1, 3, -1, -1, -1 };
  return &_ADXMotionScene;
}

@end

int32_t ADXMotionScene_getIndexWithADXMotionScene_Transition_(ADXMotionScene *self, ADXMotionScene_Transition *transition) {
  int32_t id_ = ((ADXMotionScene_Transition *) nil_chk(transition))->mId_;
  if (id_ == ADXMotionScene_UNSET) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The transition must have an id");
  }
  int32_t index = 0;
  for (; index < [((JavaUtilArrayList *) nil_chk(self->mTransitionList_)) size]; index++) {
    if (((ADXMotionScene_Transition *) nil_chk([((JavaUtilArrayList *) nil_chk(self->mTransitionList_)) getWithInt:index]))->mId_ == id_) {
      return index;
    }
  }
  return -1;
}

int32_t ADXMotionScene_getRealIDWithInt_(ADXMotionScene *self, int32_t stateId) {
  if (self->mStateSet_ != nil) {
    int32_t tmp = [self->mStateSet_ stateGetConstraintIDWithInt:stateId withInt:-1 withInt:-1];
    if (tmp != -1) {
      return tmp;
    }
  }
  return stateId;
}

bool ADXMotionScene_isProcessingTouch(ADXMotionScene *self) {
  return (self->mVelocityTracker_ != nil);
}

bool ADXMotionScene_hasCycleDependencyWithInt_(ADXMotionScene *self, int32_t key) {
  int32_t derived = [((ADSparseIntArray *) nil_chk(self->mDeriveMap_)) getWithInt:key];
  int32_t len = [((ADSparseIntArray *) nil_chk(self->mDeriveMap_)) size];
  while (derived > 0) {
    if (derived == key) {
      return true;
    }
    if (len-- < 0) {
      return true;
    }
    derived = [((ADSparseIntArray *) nil_chk(self->mDeriveMap_)) getWithInt:derived];
  }
  return false;
}

void ADXMotionScene_readConstraintChainWithInt_withADXMotionLayout_(ADXMotionScene *self, int32_t key, ADXMotionLayout *motionLayout) {
  ADXConstraintSet *cs = JreRetainedLocalValue([((ADSparseArray *) nil_chk(self->mConstraintSetMap_)) getWithInt:key]);
  JreStrongAssign(&((ADXConstraintSet *) nil_chk(cs))->derivedState_, cs->mIdString_);
  int32_t derivedFromId = [((ADSparseIntArray *) nil_chk(self->mDeriveMap_)) getWithInt:key];
  if (derivedFromId > 0) {
    ADXMotionScene_readConstraintChainWithInt_withADXMotionLayout_(self, derivedFromId, motionLayout);
    ADXConstraintSet *derivedFrom = JreRetainedLocalValue([((ADSparseArray *) nil_chk(self->mConstraintSetMap_)) getWithInt:derivedFromId]);
    if (derivedFrom == nil) {
      ADLog_eWithNSString_withNSString_(ADXMotionScene_TAG, JreStrcat("$I", @"ERROR! invalid deriveConstraintsFrom: @id/", ADXCLDebug_getNameWithADContext_withInt_([((ADXMotionLayout *) nil_chk(self->mMotionLayout_)) getContext], derivedFromId)));
      return;
    }
    JreStrAppendStrong(&cs->derivedState_, "C$", '/', derivedFrom->derivedState_);
    [cs readFallbackWithADXConstraintSet:derivedFrom];
  }
  else {
    JreStrAppendStrong(&cs->derivedState_, "$", @"  layout");
    [cs readFallbackWithADXConstraintLayout:motionLayout];
  }
  [cs applyDeltaFromWithADXConstraintSet:cs];
}

void ADXMotionScene_initWithADXMotionLayout_(ADXMotionScene *self, ADXMotionLayout *layout) {
  NSObject_init(self);
  JreStrongAssign(&self->mStateSet_, nil);
  JreStrongAssign(&self->mCurrentTransition_, nil);
  self->mDisableAutoTransition_ = false;
  JreStrongAssignAndConsume(&self->mTransitionList_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mDefaultTransition_, nil);
  JreStrongAssignAndConsume(&self->mAbstractTransitionList_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mConstraintSetMap_, new_ADSparseArray_init());
  JreStrongAssignAndConsume(&self->mDeriveMap_, new_ADSparseIntArray_init());
  self->DEBUG_DESKTOP_ = false;
  self->mDefaultDuration_ = 400;
  self->mLayoutDuringTransition_ = 0;
  self->mIgnoreTouch_ = false;
  self->mMotionOutsideRegion_ = false;
  JreStrongAssign(&self->mMotionLayout_, layout);
  JreStrongAssignAndConsume(&self->mViewTransitionController_, new_ADXViewTransitionController_initWithADXMotionLayout_(layout));
}

ADXMotionScene *new_ADXMotionScene_initWithADXMotionLayout_(ADXMotionLayout *layout) {
  J2OBJC_NEW_IMPL(ADXMotionScene, initWithADXMotionLayout_, layout)
}

ADXMotionScene *create_ADXMotionScene_initWithADXMotionLayout_(ADXMotionLayout *layout) {
  J2OBJC_CREATE_IMPL(ADXMotionScene, initWithADXMotionLayout_, layout)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionScene)

J2OBJC_NAME_MAPPING(ADXMotionScene, "androidx.constraintlayout.motion.widget", "ADX")

@implementation ADXMotionScene_Transition

- (void)setOnSwipeWithADXOnSwipe:(ADXOnSwipe *)onSwipe {
  JreStrongAssign(&mTouchResponse_, (onSwipe == nil) ? nil : create_ADXTouchResponse_initPackagePrivateWithADXMotionLayout_withADXOnSwipe_(((ADXMotionScene *) nil_chk(mMotionScene_))->mMotionLayout_, onSwipe));
}

- (void)addOnClickWithInt:(int32_t)id_
                  withInt:(int32_t)action {
  for (ADXMotionScene_Transition_TransitionOnClick * __strong onClick in nil_chk(mOnClicks_)) {
    if (((ADXMotionScene_Transition_TransitionOnClick *) nil_chk(onClick))->mTargetId_ == id_) {
      onClick->mMode_ = action;
      return;
    }
  }
  ADXMotionScene_Transition_TransitionOnClick *click = create_ADXMotionScene_Transition_TransitionOnClick_initWithADXMotionScene_Transition_withInt_withInt_(self, id_, action);
  [((JavaUtilArrayList *) nil_chk(mOnClicks_)) addWithId:click];
}

- (void)removeOnClickWithInt:(int32_t)id_ {
  ADXMotionScene_Transition_TransitionOnClick *toRemove = nil;
  for (ADXMotionScene_Transition_TransitionOnClick * __strong onClick in nil_chk(mOnClicks_)) {
    if (((ADXMotionScene_Transition_TransitionOnClick *) nil_chk(onClick))->mTargetId_ == id_) {
      toRemove = onClick;
      break;
    }
  }
  if (toRemove != nil) {
    [mOnClicks_ removeWithId:toRemove];
  }
}

- (int32_t)getLayoutDuringTransition {
  return mLayoutDuringTransition_;
}

- (void)setLayoutDuringTransitionWithInt:(int32_t)mode {
  mLayoutDuringTransition_ = mode;
}

- (void)setAutoTransitionWithInt:(int32_t)type {
  mAutoTransition_ = type;
}

- (int32_t)getAutoTransition {
  return mAutoTransition_;
}

- (int32_t)getId {
  return mId_;
}

- (int32_t)getEndConstraintSetId {
  return mConstraintSetEnd_;
}

- (int32_t)getStartConstraintSetId {
  return mConstraintSetStart_;
}

- (void)setDurationWithInt:(int32_t)duration {
  self->mDuration_ = JavaLangMath_maxWithInt_withInt_(duration, ADXMotionScene_MIN_DURATION);
}

- (int32_t)getDuration {
  return mDuration_;
}

- (float)getStagger {
  return mStagger_;
}

- (id<JavaUtilList>)getKeyFrameList {
  return mKeyFramesList_;
}

- (void)addKeyFrameWithADXKeyFrames:(ADXKeyFrames *)keyFrames {
  [((JavaUtilArrayList *) nil_chk(mKeyFramesList_)) addWithId:keyFrames];
}

- (id<JavaUtilList>)getOnClickList {
  return mOnClicks_;
}

- (ADXTouchResponse *)getTouchResponse {
  return mTouchResponse_;
}

- (void)setStaggerWithFloat:(float)stagger {
  mStagger_ = stagger;
}

- (void)setPathMotionArcWithInt:(int32_t)arcMode {
  mPathMotionArc_ = arcMode;
}

- (int32_t)getPathMotionArc {
  return mPathMotionArc_;
}

- (bool)isEnabled {
  return !mDisable_;
}

- (void)setEnableWithBoolean:(bool)enable {
  [self setEnabledWithBoolean:enable];
}

- (void)setEnabledWithBoolean:(bool)enable {
  mDisable_ = !enable;
}

- (NSString *)debugStringWithADContext:(ADContext *)context {
  NSString *ret;
  if (mConstraintSetStart_ == ADXMotionScene_UNSET) {
    ret = @"null";
  }
  else {
    ret = [((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getResourceEntryNameWithInt:mConstraintSetStart_];
  }
  if (mConstraintSetEnd_ == ADXMotionScene_UNSET) {
    JreStrAppend(&ret, "$", @" -> null");
  }
  else {
    JreStrAppend(&ret, "$$", @" -> ", [((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getResourceEntryNameWithInt:mConstraintSetEnd_]);
  }
  return ret;
}

- (bool)isTransitionFlagWithInt:(int32_t)flag {
  return 0 != (mTransitionFlags_ & flag);
}

- (void)setTransitionFlagWithInt:(int32_t)flag {
  mTransitionFlags_ = flag;
}

- (void)setOnTouchUpWithInt:(int32_t)touchUpMode {
  ADXTouchResponse *touchResponse = JreRetainedLocalValue([self getTouchResponse]);
  if (touchResponse != nil) {
    [touchResponse setTouchUpModeWithInt:touchUpMode];
  }
}

- (instancetype)initWithADXMotionScene:(ADXMotionScene *)motionScene
         withADXMotionScene_Transition:(ADXMotionScene_Transition *)global {
  ADXMotionScene_Transition_initWithADXMotionScene_withADXMotionScene_Transition_(self, motionScene, global);
  return self;
}

- (instancetype)initWithInt:(int32_t)id_
         withADXMotionScene:(ADXMotionScene *)motionScene
                    withInt:(int32_t)constraintSetStartId
                    withInt:(int32_t)constraintSetEndId {
  ADXMotionScene_Transition_initWithInt_withADXMotionScene_withInt_withInt_(self, id_, motionScene, constraintSetStartId, constraintSetEndId);
  return self;
}

- (void)setInterpolatorInfoWithInt:(int32_t)interpolator
                      withNSString:(NSString *)interpolatorString
                           withInt:(int32_t)interpolatorID {
  mDefaultInterpolator_ = interpolator;
  JreStrongAssign(&mDefaultInterpolatorString_, interpolatorString);
  mDefaultInterpolatorID_ = interpolatorID;
}

- (void)dealloc {
  RELEASE_(mDefaultInterpolatorString_);
  RELEASE_(mMotionScene_);
  RELEASE_(mKeyFramesList_);
  RELEASE_(mTouchResponse_);
  RELEASE_(mOnClicks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LADXTouchResponse;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 24, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setOnSwipeWithADXOnSwipe:);
  methods[1].selector = @selector(addOnClickWithInt:withInt:);
  methods[2].selector = @selector(removeOnClickWithInt:);
  methods[3].selector = @selector(getLayoutDuringTransition);
  methods[4].selector = @selector(setLayoutDuringTransitionWithInt:);
  methods[5].selector = @selector(setAutoTransitionWithInt:);
  methods[6].selector = @selector(getAutoTransition);
  methods[7].selector = @selector(getId);
  methods[8].selector = @selector(getEndConstraintSetId);
  methods[9].selector = @selector(getStartConstraintSetId);
  methods[10].selector = @selector(setDurationWithInt:);
  methods[11].selector = @selector(getDuration);
  methods[12].selector = @selector(getStagger);
  methods[13].selector = @selector(getKeyFrameList);
  methods[14].selector = @selector(addKeyFrameWithADXKeyFrames:);
  methods[15].selector = @selector(getOnClickList);
  methods[16].selector = @selector(getTouchResponse);
  methods[17].selector = @selector(setStaggerWithFloat:);
  methods[18].selector = @selector(setPathMotionArcWithInt:);
  methods[19].selector = @selector(getPathMotionArc);
  methods[20].selector = @selector(isEnabled);
  methods[21].selector = @selector(setEnableWithBoolean:);
  methods[22].selector = @selector(setEnabledWithBoolean:);
  methods[23].selector = @selector(debugStringWithADContext:);
  methods[24].selector = @selector(isTransitionFlagWithInt:);
  methods[25].selector = @selector(setTransitionFlagWithInt:);
  methods[26].selector = @selector(setOnTouchUpWithInt:);
  methods[27].selector = @selector(initWithADXMotionScene:withADXMotionScene_Transition:);
  methods[28].selector = @selector(initWithInt:withADXMotionScene:withInt:withInt:);
  methods[29].selector = @selector(setInterpolatorInfoWithInt:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mId_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mIsAbstract_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConstraintSetEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mConstraintSetStart_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDefaultInterpolator_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDefaultInterpolatorString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultInterpolatorID_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDuration_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStagger_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMotionScene_", "LADXMotionScene;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mKeyFramesList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 28, -1 },
    { "mTouchResponse_", "LADXTouchResponse;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnClicks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "mAutoTransition_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "AUTO_NONE", "I", .constantValue.asInt = ADXMotionScene_Transition_AUTO_NONE, 0x19, -1, -1, -1, -1 },
    { "AUTO_JUMP_TO_START", "I", .constantValue.asInt = ADXMotionScene_Transition_AUTO_JUMP_TO_START, 0x19, -1, -1, -1, -1 },
    { "AUTO_JUMP_TO_END", "I", .constantValue.asInt = ADXMotionScene_Transition_AUTO_JUMP_TO_END, 0x19, -1, -1, -1, -1 },
    { "AUTO_ANIMATE_TO_START", "I", .constantValue.asInt = ADXMotionScene_Transition_AUTO_ANIMATE_TO_START, 0x19, -1, -1, -1, -1 },
    { "AUTO_ANIMATE_TO_END", "I", .constantValue.asInt = ADXMotionScene_Transition_AUTO_ANIMATE_TO_END, 0x19, -1, -1, -1, -1 },
    { "mDisable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPathMotionArc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mLayoutDuringTransition_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTransitionFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "TRANSITION_FLAG_FIRST_DRAW", "I", .constantValue.asInt = ADXMotionScene_Transition_TRANSITION_FLAG_FIRST_DRAW, 0x18, -1, -1, -1, -1 },
    { "TRANSITION_FLAG_INTRA_AUTO", "I", .constantValue.asInt = ADXMotionScene_Transition_TRANSITION_FLAG_INTRA_AUTO, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setOnSwipe", "LADXOnSwipe;", "addOnClick", "II", "removeOnClick", "I", "setLayoutDuringTransition", "setAutoTransition", "setDuration", "()Ljava/util/List<Landroidx/constraintlayout/motion/widget/KeyFrames;>;", "addKeyFrame", "LADXKeyFrames;", "()Ljava/util/List<Landroidx/constraintlayout/motion/widget/MotionScene$Transition$TransitionOnClick;>;", "setStagger", "F", "setPathMotionArc", "setEnable", "Z", "setEnabled", "debugString", "LADContext;", "isTransitionFlag", "setTransitionFlag", "setOnTouchUp", "LADXMotionScene;LADXMotionScene_Transition;", "ILADXMotionScene;II", "setInterpolatorInfo", "ILNSString;I", "Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/KeyFrames;>;", "Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/MotionScene$Transition$TransitionOnClick;>;", "LADXMotionScene;", "LADXMotionScene_Transition_TransitionOnClick;" };
  static const J2ObjcClassInfo _ADXMotionScene_Transition = { "Transition", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x9, 30, 25, 30, 31, -1, -1, -1 };
  return &_ADXMotionScene_Transition;
}

@end

void ADXMotionScene_Transition_initWithADXMotionScene_withADXMotionScene_Transition_(ADXMotionScene_Transition *self, ADXMotionScene *motionScene, ADXMotionScene_Transition *global) {
  NSObject_init(self);
  self->mId_ = ADXMotionScene_UNSET;
  self->mIsAbstract_ = false;
  self->mConstraintSetEnd_ = -1;
  self->mConstraintSetStart_ = -1;
  self->mDefaultInterpolator_ = 0;
  JreStrongAssign(&self->mDefaultInterpolatorString_, nil);
  self->mDefaultInterpolatorID_ = -1;
  self->mDuration_ = 400;
  self->mStagger_ = 0.0f;
  JreStrongAssignAndConsume(&self->mKeyFramesList_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mTouchResponse_, nil);
  JreStrongAssignAndConsume(&self->mOnClicks_, new_JavaUtilArrayList_init());
  self->mAutoTransition_ = 0;
  self->mDisable_ = false;
  self->mPathMotionArc_ = ADXMotionScene_UNSET;
  self->mLayoutDuringTransition_ = 0;
  self->mTransitionFlags_ = 0;
  JreStrongAssign(&self->mMotionScene_, motionScene);
  self->mDuration_ = ((ADXMotionScene *) nil_chk(motionScene))->mDefaultDuration_;
  if (global != nil) {
    self->mPathMotionArc_ = global->mPathMotionArc_;
    self->mDefaultInterpolator_ = global->mDefaultInterpolator_;
    JreStrongAssign(&self->mDefaultInterpolatorString_, global->mDefaultInterpolatorString_);
    self->mDefaultInterpolatorID_ = global->mDefaultInterpolatorID_;
    self->mDuration_ = global->mDuration_;
    JreStrongAssign(&self->mKeyFramesList_, global->mKeyFramesList_);
    self->mStagger_ = global->mStagger_;
    self->mLayoutDuringTransition_ = global->mLayoutDuringTransition_;
  }
}

ADXMotionScene_Transition *new_ADXMotionScene_Transition_initWithADXMotionScene_withADXMotionScene_Transition_(ADXMotionScene *motionScene, ADXMotionScene_Transition *global) {
  J2OBJC_NEW_IMPL(ADXMotionScene_Transition, initWithADXMotionScene_withADXMotionScene_Transition_, motionScene, global)
}

ADXMotionScene_Transition *create_ADXMotionScene_Transition_initWithADXMotionScene_withADXMotionScene_Transition_(ADXMotionScene *motionScene, ADXMotionScene_Transition *global) {
  J2OBJC_CREATE_IMPL(ADXMotionScene_Transition, initWithADXMotionScene_withADXMotionScene_Transition_, motionScene, global)
}

void ADXMotionScene_Transition_initWithInt_withADXMotionScene_withInt_withInt_(ADXMotionScene_Transition *self, int32_t id_, ADXMotionScene *motionScene, int32_t constraintSetStartId, int32_t constraintSetEndId) {
  NSObject_init(self);
  self->mId_ = ADXMotionScene_UNSET;
  self->mIsAbstract_ = false;
  self->mConstraintSetEnd_ = -1;
  self->mConstraintSetStart_ = -1;
  self->mDefaultInterpolator_ = 0;
  JreStrongAssign(&self->mDefaultInterpolatorString_, nil);
  self->mDefaultInterpolatorID_ = -1;
  self->mDuration_ = 400;
  self->mStagger_ = 0.0f;
  JreStrongAssignAndConsume(&self->mKeyFramesList_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mTouchResponse_, nil);
  JreStrongAssignAndConsume(&self->mOnClicks_, new_JavaUtilArrayList_init());
  self->mAutoTransition_ = 0;
  self->mDisable_ = false;
  self->mPathMotionArc_ = ADXMotionScene_UNSET;
  self->mLayoutDuringTransition_ = 0;
  self->mTransitionFlags_ = 0;
  self->mId_ = id_;
  JreStrongAssign(&self->mMotionScene_, motionScene);
  self->mConstraintSetStart_ = constraintSetStartId;
  self->mConstraintSetEnd_ = constraintSetEndId;
  self->mDuration_ = ((ADXMotionScene *) nil_chk(motionScene))->mDefaultDuration_;
  self->mLayoutDuringTransition_ = motionScene->mLayoutDuringTransition_;
}

ADXMotionScene_Transition *new_ADXMotionScene_Transition_initWithInt_withADXMotionScene_withInt_withInt_(int32_t id_, ADXMotionScene *motionScene, int32_t constraintSetStartId, int32_t constraintSetEndId) {
  J2OBJC_NEW_IMPL(ADXMotionScene_Transition, initWithInt_withADXMotionScene_withInt_withInt_, id_, motionScene, constraintSetStartId, constraintSetEndId)
}

ADXMotionScene_Transition *create_ADXMotionScene_Transition_initWithInt_withADXMotionScene_withInt_withInt_(int32_t id_, ADXMotionScene *motionScene, int32_t constraintSetStartId, int32_t constraintSetEndId) {
  J2OBJC_CREATE_IMPL(ADXMotionScene_Transition, initWithInt_withADXMotionScene_withInt_withInt_, id_, motionScene, constraintSetStartId, constraintSetEndId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionScene_Transition)

@implementation ADXMotionScene_Transition_TransitionOnClick

- (instancetype)initWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                          withInt:(int32_t)id_
                                          withInt:(int32_t)action {
  ADXMotionScene_Transition_TransitionOnClick_initWithADXMotionScene_Transition_withInt_withInt_(self, transition, id_, action);
  return self;
}

- (void)addOnClickListenersWithADXMotionLayout:(ADXMotionLayout *)motionLayout
                                       withInt:(int32_t)currentState
                 withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition {
  ADView *v = mTargetId_ == ADXMotionScene_UNSET ? motionLayout : [((ADXMotionLayout *) nil_chk(motionLayout)) findViewByIdWithInt:mTargetId_];
  if (v == nil) {
    ADLog_eWithNSString_withNSString_(ADXMotionScene_TAG, JreStrcat("$I", @"OnClick could not find id ", mTargetId_));
    return;
  }
  int32_t start = ((ADXMotionScene_Transition *) nil_chk(transition))->mConstraintSetStart_;
  int32_t end = transition->mConstraintSetEnd_;
  if (start == ADXMotionScene_UNSET) {
    [v setMyAttributeWithNSString:@"onClick" withId:self];
    return;
  }
  bool listen = ((mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_END) != 0) && currentState == start;
  listen |= (((mMode_ & ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_END) != 0) && currentState == start);
  listen |= (((mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_END) != 0) && currentState == start);
  listen |= (((mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_START) != 0) && currentState == end);
  listen |= (((mMode_ & ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_START) != 0) && currentState == end);
  if (listen) {
    [v setMyAttributeWithNSString:@"onClick" withId:self];
  }
}

- (void)removeOnClickListenersWithADXMotionLayout:(ADXMotionLayout *)motionLayout {
  if (mTargetId_ == ADXMotionScene_UNSET) {
    return;
  }
  ADView *v = JreRetainedLocalValue([((ADXMotionLayout *) nil_chk(motionLayout)) findViewByIdWithInt:mTargetId_]);
  if (v == nil) {
    ADLog_eWithNSString_withNSString_(ADXMotionScene_TAG, JreStrcat("$I", @" (*)  could not find id ", mTargetId_));
    return;
  }
  [v setMyAttributeWithNSString:@"onClick" withId:nil];
}

- (bool)isTransitionViableWithADXMotionScene_Transition:(ADXMotionScene_Transition *)current
                                    withADXMotionLayout:(ADXMotionLayout *)tl {
  if (JreObjectEqualsEquals(mTransition_, current)) {
    return true;
  }
  int32_t dest = ((ADXMotionScene_Transition *) nil_chk(mTransition_))->mConstraintSetEnd_;
  int32_t from = mTransition_->mConstraintSetStart_;
  if (from == ADXMotionScene_UNSET) {
    return ((ADXMotionLayout *) nil_chk(tl))->mCurrentState_ != dest;
  }
  return (((ADXMotionLayout *) nil_chk(tl))->mCurrentState_ == from) || (tl->mCurrentState_ == dest);
}

- (void)onClickWithADView:(ADView *)view {
  ADXMotionLayout *tl = JreRetainedLocalValue(((ADXMotionScene *) nil_chk(((ADXMotionScene_Transition *) nil_chk(mTransition_))->mMotionScene_))->mMotionLayout_);
  if (![((ADXMotionLayout *) nil_chk(tl)) isInteractionEnabled]) {
    return;
  }
  if (mTransition_->mConstraintSetStart_ == ADXMotionScene_UNSET) {
    int32_t currentState = [tl getCurrentState];
    if (currentState == ADXMotionScene_UNSET) {
      [tl transitionToStateWithInt:mTransition_->mConstraintSetEnd_];
      return;
    }
    ADXMotionScene_Transition *t = create_ADXMotionScene_Transition_initWithADXMotionScene_withADXMotionScene_Transition_(mTransition_->mMotionScene_, mTransition_);
    t->mConstraintSetStart_ = currentState;
    t->mConstraintSetEnd_ = mTransition_->mConstraintSetEnd_;
    [tl setTransitionWithADXMotionScene_Transition:t];
    [tl transitionToEnd];
    return;
  }
  ADXMotionScene_Transition *current = JreRetainedLocalValue(mTransition_->mMotionScene_->mCurrentTransition_);
  bool forward = ((mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_END) != 0 || (mMode_ & ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_END) != 0);
  bool backward = ((mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_START) != 0 || (mMode_ & ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_START) != 0);
  bool bidirectional = forward && backward;
  if (bidirectional) {
    if (!JreObjectEqualsEquals(mTransition_->mMotionScene_->mCurrentTransition_, mTransition_)) {
      [tl setTransitionWithADXMotionScene_Transition:mTransition_];
    }
    if ([tl getCurrentState] == [tl getEndState] || [tl getProgress] > 0.5f) {
      forward = false;
    }
    else {
      backward = false;
    }
  }
  if ([self isTransitionViableWithADXMotionScene_Transition:current withADXMotionLayout:tl]) {
    if (forward && (mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_END) != 0) {
      [tl setTransitionWithADXMotionScene_Transition:mTransition_];
      [tl transitionToEnd];
    }
    else if (backward && (mMode_ & ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_START) != 0) {
      [tl setTransitionWithADXMotionScene_Transition:mTransition_];
      [tl transitionToStart];
    }
    else if (forward && (mMode_ & ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_END) != 0) {
      [tl setTransitionWithADXMotionScene_Transition:mTransition_];
      [tl setProgressWithFloat:1];
    }
    else if (backward && (mMode_ & ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_START) != 0) {
      [tl setTransitionWithADXMotionScene_Transition:mTransition_];
      [tl setProgressWithFloat:0];
    }
  }
}

- (void)dealloc {
  RELEASE_(mTransition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMotionScene_Transition:withInt:withInt:);
  methods[1].selector = @selector(addOnClickListenersWithADXMotionLayout:withInt:withADXMotionScene_Transition:);
  methods[2].selector = @selector(removeOnClickListenersWithADXMotionLayout:);
  methods[3].selector = @selector(isTransitionViableWithADXMotionScene_Transition:withADXMotionLayout:);
  methods[4].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTransition_", "LADXMotionScene_Transition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTargetId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ANIM_TO_END", "I", .constantValue.asInt = ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_END, 0x19, -1, -1, -1, -1 },
    { "ANIM_TOGGLE", "I", .constantValue.asInt = ADXMotionScene_Transition_TransitionOnClick_ANIM_TOGGLE, 0x19, -1, -1, -1, -1 },
    { "ANIM_TO_START", "I", .constantValue.asInt = ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_START, 0x19, -1, -1, -1, -1 },
    { "JUMP_TO_END", "I", .constantValue.asInt = ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_END, 0x19, -1, -1, -1, -1 },
    { "JUMP_TO_START", "I", .constantValue.asInt = ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_START, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionScene_Transition;II", "addOnClickListeners", "LADXMotionLayout;ILADXMotionScene_Transition;", "removeOnClickListeners", "LADXMotionLayout;", "isTransitionViable", "LADXMotionScene_Transition;LADXMotionLayout;", "onClick", "LADView;", "LADXMotionScene_Transition;" };
  static const J2ObjcClassInfo _ADXMotionScene_Transition_TransitionOnClick = { "TransitionOnClick", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x9, 5, 8, 9, -1, -1, -1, -1 };
  return &_ADXMotionScene_Transition_TransitionOnClick;
}

@end

void ADXMotionScene_Transition_TransitionOnClick_initWithADXMotionScene_Transition_withInt_withInt_(ADXMotionScene_Transition_TransitionOnClick *self, ADXMotionScene_Transition *transition, int32_t id_, int32_t action) {
  NSObject_init(self);
  self->mTargetId_ = ADXMotionScene_UNSET;
  self->mMode_ = (int32_t) 0x11;
  JreStrongAssign(&self->mTransition_, transition);
  self->mTargetId_ = id_;
  self->mMode_ = action;
}

ADXMotionScene_Transition_TransitionOnClick *new_ADXMotionScene_Transition_TransitionOnClick_initWithADXMotionScene_Transition_withInt_withInt_(ADXMotionScene_Transition *transition, int32_t id_, int32_t action) {
  J2OBJC_NEW_IMPL(ADXMotionScene_Transition_TransitionOnClick, initWithADXMotionScene_Transition_withInt_withInt_, transition, id_, action)
}

ADXMotionScene_Transition_TransitionOnClick *create_ADXMotionScene_Transition_TransitionOnClick_initWithADXMotionScene_Transition_withInt_withInt_(ADXMotionScene_Transition *transition, int32_t id_, int32_t action) {
  J2OBJC_CREATE_IMPL(ADXMotionScene_Transition_TransitionOnClick, initWithADXMotionScene_Transition_withInt_withInt_, transition, id_, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionScene_Transition_TransitionOnClick)

@implementation ADXMotionScene_1

- (instancetype)initWithADXEasing:(ADXEasing *)capture$0 {
  ADXMotionScene_1_initWithADXEasing_(self, capture$0);
  return self;
}

- (float)getInterpolationWithFloat:(float)v {
  return (float) [((ADXEasing *) nil_chk(val$easing_)) getWithDouble:v];
}

- (void)dealloc {
  RELEASE_(val$easing_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXEasing:);
  methods[1].selector = @selector(getInterpolationWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$easing_", "LADXEasing;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXEasing;", "getInterpolation", "F", "LADXMotionScene;", "getInterpolator" };
  static const J2ObjcClassInfo _ADXMotionScene_1 = { "", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x8000, 2, 1, 3, -1, 4, -1, -1 };
  return &_ADXMotionScene_1;
}

@end

void ADXMotionScene_1_initWithADXEasing_(ADXMotionScene_1 *self, ADXEasing *capture$0) {
  JreStrongAssign(&self->val$easing_, capture$0);
  NSObject_init(self);
}

ADXMotionScene_1 *new_ADXMotionScene_1_initWithADXEasing_(ADXEasing *capture$0) {
  J2OBJC_NEW_IMPL(ADXMotionScene_1, initWithADXEasing_, capture$0)
}

ADXMotionScene_1 *create_ADXMotionScene_1_initWithADXEasing_(ADXEasing *capture$0) {
  J2OBJC_CREATE_IMPL(ADXMotionScene_1, initWithADXEasing_, capture$0)
}
