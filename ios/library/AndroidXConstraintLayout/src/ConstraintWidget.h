//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\ConstraintWidget.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ConstraintWidget")
#ifdef RESTRICT_ConstraintWidget
#define INCLUDE_ALL_ConstraintWidget 0
#else
#define INCLUDE_ALL_ConstraintWidget 1
#endif
#undef RESTRICT_ConstraintWidget

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXConstraintWidget_) && (INCLUDE_ALL_ConstraintWidget || defined(INCLUDE_ADXConstraintWidget))
#define ADXConstraintWidget_

@class ADXCache;
@class ADXChainRun;
@class ADXConstraintAnchor;
@class ADXConstraintAnchor_Type;
@class ADXConstraintWidgetContainer;
@class ADXConstraintWidget_DimensionBehaviour;
@class ADXHorizontalWidgetRun;
@class ADXLinearSystem;
@class ADXVerticalWidgetRun;
@class ADXWidgetFrame;
@class ADXWidgetRun;
@class IOSBooleanArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangStringBuilder;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class NSString;

/*!
 @brief Implements a constraint Widget model supporting constraints relations between other widgets.
 <p>
  The widget has various anchors (i.e. Left, Top, Right, Bottom, representing their respective
  sides, as well as Baseline, Center_X and Center_Y). Connecting anchors from one widget to another
  represents a constraint relation between the two anchors; the <code>LinearSystem</code> will then
  be able to use this model to try to minimize the distances between connected anchors. 
 </p>
  <p>
  If opposite anchors are connected (e.g. Left and Right anchors), if they have the same strength,
  the widget will be equally pulled toward their respective target anchor positions; if the widget
  has a fixed size, this means that the widget will be centered between the two target anchors. If
  the widget's size is allowed to adjust, the size of the widget will change to be as large as
  necessary so that the widget's anchors and the target anchors' distances are zero. 
 </p>
  Constraints are set by connecting a widget's anchor to another via the 
 <code>connect</code> function.
 */
@interface ADXConstraintWidget : NSObject {
 @public
  bool measured_;
  IOSObjectArray *run_;
  ADXChainRun *horizontalChainRun_;
  ADXChainRun *verticalChainRun_;
  ADXHorizontalWidgetRun *horizontalRun_;
  ADXVerticalWidgetRun *verticalRun_;
  IOSBooleanArray *isTerminalWidget_;
  bool mResolvedHasRatio_;
  ADXWidgetFrame *frame_;
  NSString *stringId_;
  int32_t mHorizontalResolution_;
  int32_t mVerticalResolution_;
  int32_t mMatchConstraintDefaultWidth_;
  int32_t mMatchConstraintDefaultHeight_;
  IOSIntArray *mResolvedMatchConstraintDefault_;
  int32_t mMatchConstraintMinWidth_;
  int32_t mMatchConstraintMaxWidth_;
  float mMatchConstraintPercentWidth_;
  int32_t mMatchConstraintMinHeight_;
  int32_t mMatchConstraintMaxHeight_;
  float mMatchConstraintPercentHeight_;
  bool mIsWidthWrapContent_;
  bool mIsHeightWrapContent_;
  int32_t mResolvedDimensionRatioSide_;
  float mResolvedDimensionRatio_;
  ADXConstraintAnchor *mLeft_;
  ADXConstraintAnchor *mTop_;
  ADXConstraintAnchor *mRight_;
  ADXConstraintAnchor *mBottom_;
  ADXConstraintAnchor *mBaseline_;
  ADXConstraintAnchor *mCenterX_;
  ADXConstraintAnchor *mCenterY_;
  ADXConstraintAnchor *mCenter_;
  IOSObjectArray *mListAnchors_;
  JavaUtilArrayList *mAnchors_;
  IOSObjectArray *mListDimensionBehaviors_;
  WEAK_ ADXConstraintWidget *mParent_;
  int32_t mWidth_;
  int32_t mHeight_;
  float mDimensionRatio_;
  int32_t mDimensionRatioSide_;
  int32_t mX_;
  int32_t mY_;
  int32_t mRelX_;
  int32_t mRelY_;
  int32_t mOffsetX_;
  int32_t mOffsetY_;
  int32_t mBaselineDistance_;
  int32_t mMinWidth_;
  int32_t mMinHeight_;
  float mHorizontalBiasPercent_;
  float mVerticalBiasPercent_;
  int32_t mDistToTop_;
  int32_t mDistToLeft_;
  int32_t mDistToRight_;
  int32_t mDistToBottom_;
  bool mLeftHasCentered_;
  bool mRightHasCentered_;
  bool mTopHasCentered_;
  bool mBottomHasCentered_;
  bool mHorizontalWrapVisited_;
  bool mVerticalWrapVisited_;
  bool mGroupsToSolver_;
  int32_t mHorizontalChainStyle_;
  int32_t mVerticalChainStyle_;
  bool mHorizontalChainFixedPosition_;
  bool mVerticalChainFixedPosition_;
  IOSFloatArray *mWeight_;
  IOSObjectArray *mListNextMatchConstraintsWidget_;
  IOSObjectArray *mNextChainWidget_;
  ADXConstraintWidget *mHorizontalNextWidget_;
  ADXConstraintWidget *mVerticalNextWidget_;
  int32_t horizontalGroup_;
  int32_t verticalGroup_;
}

#pragma mark Public

/*!
 @brief Default constructor
 */
- (instancetype)init;

/*!
 @brief Constructor
 @param width width of the layout
 @param height height of the layout
 */
- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height;

/*!
 @brief Constructor
 @param x x position
 @param y y position
 @param width width of the layout
 @param height height of the layout
 */
- (instancetype)initWithInt:(int32_t)x
                    withInt:(int32_t)y
                    withInt:(int32_t)width
                    withInt:(int32_t)height;

- (instancetype)initWithNSString:(NSString *)debugName;

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(int32_t)width
                         withInt:(int32_t)height;

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(int32_t)x
                         withInt:(int32_t)y
                         withInt:(int32_t)width
                         withInt:(int32_t)height;

- (void)addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                                    withADXLinearSystem:(ADXLinearSystem *)system
                                                    withJavaUtilHashSet:(JavaUtilHashSet *)widgets
                                                                withInt:(int32_t)orientation
                                                            withBoolean:(bool)addSelf;

/*!
 @brief Add this widget to the solver
 @param system the solver we want to add the widget to
 @param optimize true if <code>Optimizer.OPTIMIZATION_GRAPH</code>  is on
 */
- (void)addToSolverWithADXLinearSystem:(ADXLinearSystem *)system
                           withBoolean:(bool)optimize;

/*!
 @brief Returns true if this widget should be used in a barrier
 */
- (bool)allowedInBarrier;

/*!
 @brief Connect the given anchors together (the from anchor should be owned by this widget)
 @param from the anchor we are connecting from (of this widget)
 @param to the anchor we are connecting to
 @param margin how much margin we want to have
 */
- (void)connectWithADXConstraintAnchor:(ADXConstraintAnchor *)from
               withADXConstraintAnchor:(ADXConstraintAnchor *)to
                               withInt:(int32_t)margin;

/*!
 @brief Connect a given anchor of this widget to another anchor of a target widget
 @param constraintFrom which anchor of this widget to connect from
 @param target the target widget
 @param constraintTo the target anchor on the target widget
 */
- (void)connectWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintFrom
                    withADXConstraintWidget:(ADXConstraintWidget *)target
               withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintTo;

/*!
 @brief Connect a given anchor of this widget to another anchor of a target widget
 @param constraintFrom which anchor of this widget to connect from
 @param target the target widget
 @param constraintTo the target anchor on the target widget
 @param margin how much margin we want to keep as a minimum distance between the two anchors
 */
- (void)connectWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintFrom
                    withADXConstraintWidget:(ADXConstraintWidget *)target
               withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintTo
                                    withInt:(int32_t)margin;

/*!
 @brief Set a circular constraint
 @param target the target widget we will use as the center of the circle
 @param angle the angle (from 0 to 360)
 @param radius the radius used
 */
- (void)connectCircularConstraintWithADXConstraintWidget:(ADXConstraintWidget *)target
                                               withFloat:(float)angle
                                                 withInt:(int32_t)radius;

- (void)copy__WithADXConstraintWidget:(ADXConstraintWidget *)src
                  withJavaUtilHashMap:(JavaUtilHashMap *)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Create all the system variables for this widget
 @param system
 */
- (void)createObjectVariablesWithADXLinearSystem:(ADXLinearSystem *)system;

- (void)ensureMeasureRequested;

- (void)ensureWidgetRuns;

/*!
 @brief Given a type of anchor, returns the corresponding anchor.
 @param anchorType type of the anchor (LEFT, TOP, RIGHT, BOTTOM, BASELINE, CENTER_X, CENTER_Y)
 @return the matching anchor
 */
- (ADXConstraintAnchor *)getAnchorWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)anchorType;

/*!
 @brief Return the array of anchors of this widget
 @return array of anchors
 */
- (JavaUtilArrayList *)getAnchors;

/*!
 @brief Return the baseline distance relative to the top of the widget
 @return baseline
 */
- (int32_t)getBaselineDistance;

/*!
 @brief Return the percentage bias that is used when two opposite connections exist of the same
  strength in a particular orientation.
 @param orientation Orientation <code>HORIZONTAL</code> /<code>VERTICAL</code> .
 @return Respective percentage bias.
 */
- (float)getBiasPercentWithInt:(int32_t)orientation;

/*!
 @brief Return the bottom position of the widget
 @return bottom position of the widget
 */
- (int32_t)getBottom;

/*!
 @brief Return the companion widget.Typically, this would be the real
  widget we represent with this instance of ConstraintWidget.
 @return the companion widget, if set.
 */
- (id)getCompanionWidget;

/*!
 @brief Accessor for the skip value
 @return skip value
 */
- (int32_t)getContainerItemSkip;

/*!
 @brief Returns the name of this widget (used for debug purposes)
 @return the debug name
 */
- (NSString *)getDebugName;

/*!
 @brief Get the widget's <code>DimensionBehaviour</code> in an specific orientation.
 @param orientation
 @return The <code>DimensionBehaviour</code> of the widget.
 */
- (ADXConstraintWidget_DimensionBehaviour *)getDimensionBehaviourWithInt:(int32_t)orientation;

/*!
 @brief Return the current ratio of this widget
 @return the dimension ratio (HORIZONTAL, VERTICAL, or UNKNOWN)
 */
- (float)getDimensionRatio;

/*!
 @brief Return the current side on which ratio will be applied
 @return HORIZONTAL, VERTICAL, or UNKNOWN
 */
- (int32_t)getDimensionRatioSide;

- (bool)getHasBaseline;

/*!
 @brief Return the height of the widget
 @return height height
 */
- (int32_t)getHeight;

/*!
 @brief Return the horizontal percentage bias that is used when two opposite connections
  exist of the same strength.
 @return horizontal percentage bias
 */
- (float)getHorizontalBiasPercent;

/*!
 @brief if in a horizontal chain return the left most widget in the chain.
 @return left most widget in chain or null
 */
- (ADXConstraintWidget *)getHorizontalChainControlWidget;

/*!
 @brief get the chain starting from this widget to be packed.
 The horizontal bias will control how elements of the chain are positioned.
 @return Horizontal Chain Style
 */
- (int32_t)getHorizontalChainStyle;

/*!
 @brief Accessor for the horizontal dimension behaviour
 @return dimension behaviour
 */
- (ADXConstraintWidget_DimensionBehaviour *)getHorizontalDimensionBehaviour;

/*!
 @brief Returns all the horizontal margin of the widget.
 */
- (int32_t)getHorizontalMargin;

- (int32_t)getLastHorizontalMeasureSpec;

- (int32_t)getLastVerticalMeasureSpec;

/*!
 @brief Return the left position of the widget (similar to <code>getX()</code>)
 @return left position of the widget
 */
- (int32_t)getLeft;

/*!
 @brief Get a dimension of the widget in a particular orientation.
 @param orientation
 @return The dimension of the specified orientation.
 */
- (int32_t)getLengthWithInt:(int32_t)orientation;

- (int32_t)getMaxHeight;

- (int32_t)getMaxWidth;

/*!
 @brief Return the minimum height of the widget
 @return minimum height
 */
- (int32_t)getMinHeight;

/*!
 @brief Return the minimum width of the widget
 @return minimum width
 */
- (int32_t)getMinWidth;

/*!
 @brief Return the next chain member if one exists
 @param orientation HORIZONTAL or VERTICAL
 @return the next chain member or null if we are the last chain element
 */
- (ADXConstraintWidget *)getNextChainMemberWithInt:(int32_t)orientation;

- (int32_t)getOptimizerWrapHeight;

- (int32_t)getOptimizerWrapWidth;

/*!
 @brief Returns the parent of this widget if there is one
 @return parent
 */
- (ADXConstraintWidget *)getParent;

/*!
 @brief Return the previous chain member if one exists
 @param orientation HORIZONTAL or VERTICAL
 @return the previous chain member or null if we are the first chain element
 */
- (ADXConstraintWidget *)getPreviousChainMemberWithInt:(int32_t)orientation;

/*!
 @brief Return the right position of the widget
 @return right position of the widget
 */
- (int32_t)getRight;

- (ADXWidgetRun *)getRunWithInt:(int32_t)orientation;

/*!
 @brief Return the top position of the widget (similar to <code>getY()</code>)
 @return top position of the widget
 */
- (int32_t)getTop;

/*!
 @brief Returns the type string if set
 @return type (null if not set)
 */
- (NSString *)getType;

/*!
 @brief Return the vertical percentage bias that is used when two opposite connections
  exist of the same strength.
 @return vertical percentage bias
 */
- (float)getVerticalBiasPercent;

/*!
 @brief if in a vertical chain return the top most widget in the chain.
 @return top most widget in chain or null
 */
- (ADXConstraintWidget *)getVerticalChainControlWidget;

/*!
 @brief Set the chain starting from this widget to be packed.
 The vertical bias will control how elements of the chain are positioned.
 */
- (int32_t)getVerticalChainStyle;

/*!
 @brief Accessor for the vertical dimension behaviour
 @return dimension behaviour
 */
- (ADXConstraintWidget_DimensionBehaviour *)getVerticalDimensionBehaviour;

/*!
 @brief Returns all the vertical margin of the widget
 */
- (int32_t)getVerticalMargin;

/*!
 @brief Returns the current visibility value for this widget
 @return the visibility (VISIBLE, INVISIBLE, or GONE)
 */
- (int32_t)getVisibility;

/*!
 @brief Return the width of the widget
 @return width width
 */
- (int32_t)getWidth;

- (int32_t)getWrapBehaviorInParent;

/*!
 @brief Return the x position of the widget, relative to its container
 @return x position
 */
- (int32_t)getX;

/*!
 @brief Return the y position of the widget, relative to its container
 @return y position
 */
- (int32_t)getY;

/*!
 @brief Return true if this widget has a baseline
 @return true if the widget has a baseline, false otherwise
 */
- (bool)hasBaseline;

- (bool)hasDanglingDimensionWithInt:(int32_t)orientation;

- (bool)hasDependencies;

- (bool)hasDimensionOverride;

- (bool)hasResolvedTargetsWithInt:(int32_t)orientation
                          withInt:(int32_t)size;

/*!
 @brief Immediate connection to an anchor without any checks.
 @param startType The type of anchor on this widget
 @param target The target widget
 @param endType The type of anchor on the target widget
 @param margin How much margin we want to keep as a minimum distance between the two anchors
 @param goneMargin How much margin we want to keep if the target is set to <code>View.GONE</code>
 */
- (void)immediateConnectWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)startType
                             withADXConstraintWidget:(ADXConstraintWidget *)target
                        withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)endType
                                             withInt:(int32_t)margin
                                             withInt:(int32_t)goneMargin;

/*!
 @brief Returns true if height is set to wrap_content
 */
- (bool)isHeightWrapContent;

- (bool)isHorizontalSolvingPassDone;

- (bool)isInBarrierWithInt:(int32_t)orientation;

/*!
 @brief Test if you are in a Horizontal chain
 @return true if in a horizontal chain
 */
- (bool)isInHorizontalChain;

- (bool)isInPlaceholder;

/*!
 @brief Test if you are in a vertical chain
 @return true if in a vertical chain
 */
- (bool)isInVerticalChain;

- (bool)isInVirtualLayout;

- (bool)isMeasureRequested;

- (bool)isResolvedHorizontally;

- (bool)isResolvedVertically;

/*!
 @brief Returns true if the widget is the root widget
 @return true if root widget, false otherwise
 */
- (bool)isRoot;

- (bool)isSpreadHeight;

- (bool)isSpreadWidth;

- (bool)isVerticalSolvingPassDone;

/*!
 @brief Returns true if width is set to wrap_content
 */
- (bool)isWidthWrapContent;

- (void)markHorizontalSolvingPassDone;

- (void)markVerticalSolvingPassDone;

- (bool)oppositeDimensionDependsOnWithInt:(int32_t)orientation;

- (bool)oppositeDimensionsTied;

- (void)reset;

/*!
 @brief Reset all the constraints set on this widget
 */
- (void)resetAllConstraints;

/*!
 @brief Reset the given anchor
 @param anchor the anchor we want to reset
 */
- (void)resetAnchorWithADXConstraintAnchor:(ADXConstraintAnchor *)anchor;

/*!
 @brief Reset all connections
 */
- (void)resetAnchors;

- (void)resetFinalResolution;

/*!
 @brief Reset the solver variables of the anchors
 */
- (void)resetSolverVariablesWithADXCache:(ADXCache *)cache;

- (void)resetSolvingPassFlag;

- (JavaLangStringBuilder *)serializeWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret;

/*!
 @brief Set the baseline distance relative to the top of the widget
 @param baseline the distance of the baseline relative to the widget's top
 */
- (void)setBaselineDistanceWithInt:(int32_t)baseline;

/*!
 @brief Set the companion widget.Typically, this would be the real widget we
  represent with this instance of ConstraintWidget.
 @param companion
 */
- (void)setCompanionWidgetWithId:(id)companion;

/*!
 @brief Set the skip value for this widget.This can be used when a widget is in a container,
  so that container can position the widget as if it was positioned further in the list
  of widgets.
 For example, with Table, this is used to skip empty cells
  (the widget after an empty cell will have a skip value of one)
 @param skip
 */
- (void)setContainerItemSkipWithInt:(int32_t)skip;

/*!
 @brief Set the debug name of this widget
 */
- (void)setDebugNameWithNSString:(NSString *)name;

/*!
 @brief Utility debug function.Sets the names of the anchors in the solver given
  a widget's name.
 The given name is used as a prefix, resulting in anchors' names
  of the form: 
 <p>
  <ul>
  <li>{name}.left</li>
  <li>{name}.top</li>
  <li>{name}.right</li>
  <li>{name}.bottom</li>
  <li>{name}.baseline</li>
  </ul>
 @param system solver used
 @param name name of the widget
 */
- (void)setDebugSolverNameWithADXLinearSystem:(ADXLinearSystem *)system
                                 withNSString:(NSString *)name;

/*!
 @brief Set both width and height of the widget
 @param w width
 @param h height
 */
- (void)setDimensionWithInt:(int32_t)w
                    withInt:(int32_t)h;

/*!
 @brief Set the ratio of the widget
  The ratio will be applied if at least one of the dimension (width or height) is set to a behaviour
  of DimensionBehaviour.MATCH_CONSTRAINT -- the dimension's value will be set to the other dimension * ratio.
 @param ratio A float value that describes W/H or H/W depending on the provided dimensionRatioSide
 @param dimensionRatioSide The side the ratio should be calculated on, HORIZONTAL, VERTICAL, or UNKNOWN
 */
- (void)setDimensionRatioWithFloat:(float)ratio
                           withInt:(int32_t)dimensionRatioSide;

/*!
 @brief Set the ratio of the widget
 @param ratio given string of format [H|V],[float|x:y] or [float|x:y]
 */
- (void)setDimensionRatioWithNSString:(NSString *)ratio;

- (void)setFinalBaselineWithInt:(int32_t)baselineValue;

- (void)setFinalFrameWithInt:(int32_t)left
                     withInt:(int32_t)top
                     withInt:(int32_t)right
                     withInt:(int32_t)bottom
                     withInt:(int32_t)baseline
                     withInt:(int32_t)orientation;

- (void)setFinalHorizontalWithInt:(int32_t)x1
                          withInt:(int32_t)x2;

- (void)setFinalLeftWithInt:(int32_t)x1;

- (void)setFinalTopWithInt:(int32_t)y1;

- (void)setFinalVerticalWithInt:(int32_t)y1
                        withInt:(int32_t)y2;

/*!
 @brief Set the position+dimension of the widget based on starting/ending positions on one dimension.
 @param start Left/Top side position of the widget.
 @param end Right/Bottom side position of the widget.
 @param orientation Orientation being set (HORIZONTAL/VERTICAL).
 */
- (void)setFrameWithInt:(int32_t)start
                withInt:(int32_t)end
                withInt:(int32_t)orientation;

/*!
 @brief Set the position+dimension of the widget given left/top/right/bottom
 @param left left side position of the widget
 @param top top side position of the widget
 @param right right side position of the widget
 @param bottom bottom side position of the widget
 */
- (void)setFrameWithInt:(int32_t)left
                withInt:(int32_t)top
                withInt:(int32_t)right
                withInt:(int32_t)bottom;

/*!
 @brief Set the margin to be used when connected to a widget with a visibility of GONE
 @param type the anchor to set the margin on
 @param goneMargin the margin value to use
 */
- (void)setGoneMarginWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)type
                                          withInt:(int32_t)goneMargin;

- (void)setHasBaselineWithBoolean:(bool)hasBaseline;

/*!
 @brief Set the height of the widget
 @param h height
 */
- (void)setHeightWithInt:(int32_t)h;

/*!
 @brief Keep track of wrap_content for height
 @param heightWrapContent
 */
- (void)setHeightWrapContentWithBoolean:(bool)heightWrapContent;

/*!
 @brief Set the horizontal bias percent to apply when we have two opposite constraints of
  equal strength
 @param horizontalBiasPercent the percentage used
 */
- (void)setHorizontalBiasPercentWithFloat:(float)horizontalBiasPercent;

/*!
 @brief Set the chain starting from this widget to be packed.
 The horizontal bias will control how elements of the chain are positioned.
 @param horizontalChainStyle (CHAIN_SPREAD, CHAIN_SPREAD_INSIDE, CHAIN_PACKED)
 */
- (void)setHorizontalChainStyleWithInt:(int32_t)horizontalChainStyle;

/*!
 @brief Set the positions for the horizontal dimension only
 @param left left side position of the widget
 @param right right side position of the widget
 */
- (void)setHorizontalDimensionWithInt:(int32_t)left
                              withInt:(int32_t)right;

/*!
 @brief Set the widget's behaviour for the horizontal dimension
 @param behaviour the horizontal dimension's behaviour
 */
- (void)setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)behaviour;

/*!
 @brief Set the horizontal style when MATCH_CONSTRAINT is set
 @param horizontalMatchStyle MATCH_CONSTRAINT_SPREAD or MATCH_CONSTRAINT_WRAP
 @param min minimum value
 @param max maximum value
 @param percent Percent width
 */
- (void)setHorizontalMatchStyleWithInt:(int32_t)horizontalMatchStyle
                               withInt:(int32_t)min
                               withInt:(int32_t)max
                             withFloat:(float)percent;

/*!
 @brief Set the horizontal weight (only used in chains)
 @param horizontalWeight Floating point value weight
 */
- (void)setHorizontalWeightWithFloat:(float)horizontalWeight;

- (void)setInPlaceholderWithBoolean:(bool)inPlaceholder;

- (void)setInVirtualLayoutWithBoolean:(bool)inVirtualLayout;

- (void)setLastMeasureSpecWithInt:(int32_t)horizontal
                          withInt:(int32_t)vertical;

/*!
 @brief Set the dimension of a widget in a particular orientation.
 @param length Size of the dimension.
 @param orientation HORIZONTAL or VERTICAL
 */
- (void)setLengthWithInt:(int32_t)length
                 withInt:(int32_t)orientation;

- (void)setMaxHeightWithInt:(int32_t)maxHeight;

- (void)setMaxWidthWithInt:(int32_t)maxWidth;

- (void)setMeasureRequestedWithBoolean:(bool)measureRequested;

/*!
 @brief Set the minimum height of the widget
 @param h minimum height
 */
- (void)setMinHeightWithInt:(int32_t)h;

/*!
 @brief Set the minimum width of the widget
 @param w minimum width
 */
- (void)setMinWidthWithInt:(int32_t)w;

/*!
 @brief Set the offset of this widget relative to the root widget
 @param x horizontal offset
 @param y vertical offset
 */
- (void)setOffsetWithInt:(int32_t)x
                 withInt:(int32_t)y;

/*!
 @brief Set both the origin in (x, y) of the widget, relative to its container
 @param x x position
 @param y y position
 */
- (void)setOriginWithInt:(int32_t)x
                 withInt:(int32_t)y;

/*!
 @brief Set the parent of this widget
 @param widget parent
 */
- (void)setParentWithADXConstraintWidget:(ADXConstraintWidget *)widget;

/*!
 @brief Set the type of the widget (as a String)
 @param type type of the widget
 */
- (void)setTypeWithNSString:(NSString *)type;

/*!
 @brief Resolves the dimension ratio parameters
  (mResolvedDimensionRatioSide & mDimensionRatio)
 @param hParentWrapContent true if parent is in wrap content horizontally
 @param vParentWrapContent true if parent is in wrap content vertically
 @param horizontalDimensionFixed true if this widget horizontal dimension is fixed
 @param verticalDimensionFixed true if this widget vertical dimension is fixed
 */
- (void)setupDimensionRatioWithBoolean:(bool)hParentWrapContent
                           withBoolean:(bool)vParentWrapContent
                           withBoolean:(bool)horizontalDimensionFixed
                           withBoolean:(bool)verticalDimensionFixed;

/*!
 @brief Set the vertical bias percent to apply when we have two opposite constraints of
  equal strength
 @param verticalBiasPercent the percentage used
 */
- (void)setVerticalBiasPercentWithFloat:(float)verticalBiasPercent;

/*!
 @brief Set the chain starting from this widget to be packed.
 The vertical bias will control how elements of the chain are positioned.
 @param verticalChainStyle (CHAIN_SPREAD, CHAIN_SPREAD_INSIDE, CHAIN_PACKED)
 */
- (void)setVerticalChainStyleWithInt:(int32_t)verticalChainStyle;

/*!
 @brief Set the positions for the vertical dimension only
 @param top top side position of the widget
 @param bottom bottom side position of the widget
 */
- (void)setVerticalDimensionWithInt:(int32_t)top
                            withInt:(int32_t)bottom;

/*!
 @brief Set the widget's behaviour for the vertical dimension
 @param behaviour the vertical dimension's behaviour
 */
- (void)setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)behaviour;

/*!
 @brief Set the vertical style when MATCH_CONSTRAINT is set
 @param verticalMatchStyle MATCH_CONSTRAINT_SPREAD or MATCH_CONSTRAINT_WRAP
 @param min minimum value
 @param max maximum value
 @param percent Percent height
 */
- (void)setVerticalMatchStyleWithInt:(int32_t)verticalMatchStyle
                             withInt:(int32_t)min
                             withInt:(int32_t)max
                           withFloat:(float)percent;

/*!
 @brief Set the vertical weight (only used in chains)
 @param verticalWeight Floating point value weight
 */
- (void)setVerticalWeightWithFloat:(float)verticalWeight;

/*!
 @brief Set the visibility for this widget
 @param visibility either VISIBLE, INVISIBLE, or GONE
 */
- (void)setVisibilityWithInt:(int32_t)visibility;

/*!
 @brief Set the width of the widget
 @param w width
 */
- (void)setWidthWithInt:(int32_t)w;

/*!
 @brief Keep track of wrap_content for width
 @param widthWrapContent
 */
- (void)setWidthWrapContentWithBoolean:(bool)widthWrapContent;

- (void)setWrapBehaviorInParentWithInt:(int32_t)behavior;

/*!
 @brief Set the x position of the widget, relative to its container
 @param x x position
 */
- (void)setXWithInt:(int32_t)x;

/*!
 @brief Set the y position of the widget, relative to its container
 @param y y position
 */
- (void)setYWithInt:(int32_t)y;

/*!
 @brief Returns a string representation of the ConstraintWidget
 @return string representation of the widget
 */
- (NSString *)description;

- (void)updateFromRunsWithBoolean:(bool)updateHorizontal
                      withBoolean:(bool)updateVertical;

/*!
 @brief Update the widget from the values generated by the solver
 @param system the solver we get the values from.
 @param optimize true if <code>Optimizer.OPTIMIZATION_GRAPH</code>  is on
 */
- (void)updateFromSolverWithADXLinearSystem:(ADXLinearSystem *)system
                                withBoolean:(bool)optimize;

#pragma mark Protected

/*!
 @brief Return the x position of the widget, relative to the root
  (without animation)
 @return x position
 */
- (int32_t)getRootX;

/*!
 @brief Return the y position of the widget, relative to the root
  (without animation)
 */
- (int32_t)getRootY;

- (void)setInBarrierWithInt:(int32_t)orientation
                withBoolean:(bool)value;

#pragma mark Package-Private

/*!
 @brief Used to select which widgets should be added to the solver first
 */
- (bool)addFirst;

/*!
 @brief Get the left/top position of the widget relative to the outer side of the container (right/bottom).
 @param orientation Orientation by which to find the relative positioning of the widget.
 @return The relative position of the widget.
 */
- (int32_t)getRelativePositioningWithInt:(int32_t)orientation;

/*!
 @brief Set the left/top position of the widget relative to the outer side of the container (right/bottom).
 @param offset Offset of the relative position.
 @param orientation Orientation of the offset being set.
 */
- (void)setRelativePositioningWithInt:(int32_t)offset
                              withInt:(int32_t)orientation;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXConstraintWidget)

J2OBJC_FIELD_SETTER(ADXConstraintWidget, run_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, horizontalChainRun_, ADXChainRun *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, verticalChainRun_, ADXChainRun *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, horizontalRun_, ADXHorizontalWidgetRun *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, verticalRun_, ADXVerticalWidgetRun *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, isTerminalWidget_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, frame_, ADXWidgetFrame *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, stringId_, NSString *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mResolvedMatchConstraintDefault_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mLeft_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mTop_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mRight_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mBottom_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mBaseline_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mCenterX_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mCenterY_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mCenter_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mListAnchors_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mAnchors_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mListDimensionBehaviors_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mWeight_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mListNextMatchConstraintsWidget_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mNextChainWidget_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mHorizontalNextWidget_, ADXConstraintWidget *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mVerticalNextWidget_, ADXConstraintWidget *)

inline int32_t ADXConstraintWidget_get_SOLVER(void);
#define ADXConstraintWidget_SOLVER 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, SOLVER, int32_t)

inline int32_t ADXConstraintWidget_get_DIRECT(void);
#define ADXConstraintWidget_DIRECT 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, DIRECT, int32_t)

inline int32_t ADXConstraintWidget_get_MATCH_CONSTRAINT_SPREAD(void);
#define ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, MATCH_CONSTRAINT_SPREAD, int32_t)

inline int32_t ADXConstraintWidget_get_MATCH_CONSTRAINT_WRAP(void);
#define ADXConstraintWidget_MATCH_CONSTRAINT_WRAP 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, MATCH_CONSTRAINT_WRAP, int32_t)

inline int32_t ADXConstraintWidget_get_MATCH_CONSTRAINT_PERCENT(void);
#define ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, MATCH_CONSTRAINT_PERCENT, int32_t)

inline int32_t ADXConstraintWidget_get_MATCH_CONSTRAINT_RATIO(void);
#define ADXConstraintWidget_MATCH_CONSTRAINT_RATIO 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, MATCH_CONSTRAINT_RATIO, int32_t)

inline int32_t ADXConstraintWidget_get_MATCH_CONSTRAINT_RATIO_RESOLVED(void);
#define ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, MATCH_CONSTRAINT_RATIO_RESOLVED, int32_t)

inline int32_t ADXConstraintWidget_get_UNKNOWN(void);
#define ADXConstraintWidget_UNKNOWN -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, UNKNOWN, int32_t)

inline int32_t ADXConstraintWidget_get_HORIZONTAL(void);
#define ADXConstraintWidget_HORIZONTAL 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, HORIZONTAL, int32_t)

inline int32_t ADXConstraintWidget_get_VERTICAL(void);
#define ADXConstraintWidget_VERTICAL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, VERTICAL, int32_t)

inline int32_t ADXConstraintWidget_get_BOTH(void);
#define ADXConstraintWidget_BOTH 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, BOTH, int32_t)

inline int32_t ADXConstraintWidget_get_VISIBLE(void);
#define ADXConstraintWidget_VISIBLE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, VISIBLE, int32_t)

inline int32_t ADXConstraintWidget_get_INVISIBLE(void);
#define ADXConstraintWidget_INVISIBLE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, INVISIBLE, int32_t)

inline int32_t ADXConstraintWidget_get_GONE(void);
#define ADXConstraintWidget_GONE 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, GONE, int32_t)

inline int32_t ADXConstraintWidget_get_CHAIN_SPREAD(void);
#define ADXConstraintWidget_CHAIN_SPREAD 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, CHAIN_SPREAD, int32_t)

inline int32_t ADXConstraintWidget_get_CHAIN_SPREAD_INSIDE(void);
#define ADXConstraintWidget_CHAIN_SPREAD_INSIDE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, CHAIN_SPREAD_INSIDE, int32_t)

inline int32_t ADXConstraintWidget_get_CHAIN_PACKED(void);
#define ADXConstraintWidget_CHAIN_PACKED 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, CHAIN_PACKED, int32_t)

inline int32_t ADXConstraintWidget_get_WRAP_BEHAVIOR_INCLUDED(void);
#define ADXConstraintWidget_WRAP_BEHAVIOR_INCLUDED 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, WRAP_BEHAVIOR_INCLUDED, int32_t)

inline int32_t ADXConstraintWidget_get_WRAP_BEHAVIOR_HORIZONTAL_ONLY(void);
#define ADXConstraintWidget_WRAP_BEHAVIOR_HORIZONTAL_ONLY 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, WRAP_BEHAVIOR_HORIZONTAL_ONLY, int32_t)

inline int32_t ADXConstraintWidget_get_WRAP_BEHAVIOR_VERTICAL_ONLY(void);
#define ADXConstraintWidget_WRAP_BEHAVIOR_VERTICAL_ONLY 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, WRAP_BEHAVIOR_VERTICAL_ONLY, int32_t)

inline int32_t ADXConstraintWidget_get_WRAP_BEHAVIOR_SKIPPED(void);
#define ADXConstraintWidget_WRAP_BEHAVIOR_SKIPPED 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, WRAP_BEHAVIOR_SKIPPED, int32_t)

inline int32_t ADXConstraintWidget_get_ANCHOR_LEFT(void);
#define ADXConstraintWidget_ANCHOR_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, ANCHOR_LEFT, int32_t)

inline int32_t ADXConstraintWidget_get_ANCHOR_RIGHT(void);
#define ADXConstraintWidget_ANCHOR_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, ANCHOR_RIGHT, int32_t)

inline int32_t ADXConstraintWidget_get_ANCHOR_TOP(void);
#define ADXConstraintWidget_ANCHOR_TOP 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, ANCHOR_TOP, int32_t)

inline int32_t ADXConstraintWidget_get_ANCHOR_BOTTOM(void);
#define ADXConstraintWidget_ANCHOR_BOTTOM 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, ANCHOR_BOTTOM, int32_t)

inline int32_t ADXConstraintWidget_get_ANCHOR_BASELINE(void);
#define ADXConstraintWidget_ANCHOR_BASELINE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, ANCHOR_BASELINE, int32_t)

inline int32_t ADXConstraintWidget_get_DIMENSION_HORIZONTAL(void);
#define ADXConstraintWidget_DIMENSION_HORIZONTAL 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, DIMENSION_HORIZONTAL, int32_t)

inline int32_t ADXConstraintWidget_get_DIMENSION_VERTICAL(void);
#define ADXConstraintWidget_DIMENSION_VERTICAL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, DIMENSION_VERTICAL, int32_t)

inline float ADXConstraintWidget_get_DEFAULT_BIAS(void);
inline float ADXConstraintWidget_set_DEFAULT_BIAS(float value);
inline float *ADXConstraintWidget_getRef_DEFAULT_BIAS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT float ADXConstraintWidget_DEFAULT_BIAS;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXConstraintWidget, DEFAULT_BIAS, float)

FOUNDATION_EXPORT void ADXConstraintWidget_init(ADXConstraintWidget *self);

FOUNDATION_EXPORT ADXConstraintWidget *new_ADXConstraintWidget_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidget *create_ADXConstraintWidget_init(void);

FOUNDATION_EXPORT void ADXConstraintWidget_initWithNSString_(ADXConstraintWidget *self, NSString *debugName);

FOUNDATION_EXPORT ADXConstraintWidget *new_ADXConstraintWidget_initWithNSString_(NSString *debugName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidget *create_ADXConstraintWidget_initWithNSString_(NSString *debugName);

FOUNDATION_EXPORT void ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(ADXConstraintWidget *self, int32_t x, int32_t y, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidget *new_ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(int32_t x, int32_t y, int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidget *create_ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(int32_t x, int32_t y, int32_t width, int32_t height);

FOUNDATION_EXPORT void ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(ADXConstraintWidget *self, NSString *debugName, int32_t x, int32_t y, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidget *new_ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(NSString *debugName, int32_t x, int32_t y, int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidget *create_ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(NSString *debugName, int32_t x, int32_t y, int32_t width, int32_t height);

FOUNDATION_EXPORT void ADXConstraintWidget_initWithInt_withInt_(ADXConstraintWidget *self, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidget *new_ADXConstraintWidget_initWithInt_withInt_(int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidget *create_ADXConstraintWidget_initWithInt_withInt_(int32_t width, int32_t height);

FOUNDATION_EXPORT void ADXConstraintWidget_initWithNSString_withInt_withInt_(ADXConstraintWidget *self, NSString *debugName, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidget *new_ADXConstraintWidget_initWithNSString_withInt_withInt_(NSString *debugName, int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidget *create_ADXConstraintWidget_initWithNSString_withInt_withInt_(NSString *debugName, int32_t width, int32_t height);

J2OBJC_TYPE_LITERAL_HEADER(ADXConstraintWidget)

@compatibility_alias AndroidxConstraintlayoutCoreWidgetsConstraintWidget ADXConstraintWidget;


#endif

#if !defined (ADXConstraintWidget_DimensionBehaviour_) && (INCLUDE_ALL_ConstraintWidget || defined(INCLUDE_ADXConstraintWidget_DimensionBehaviour))
#define ADXConstraintWidget_DimensionBehaviour_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADXConstraintWidget_DimensionBehaviour_Enum) {
  ADXConstraintWidget_DimensionBehaviour_Enum_FIXED NS_SWIFT_NAME(fixed) = 0,
  ADXConstraintWidget_DimensionBehaviour_Enum_WRAP_CONTENT NS_SWIFT_NAME(wrapContent) = 1,
  ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_CONSTRAINT NS_SWIFT_NAME(matchConstraint) = 2,
  ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_PARENT NS_SWIFT_NAME(matchParent) = 3,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADXConstraintWidget_DimensionBehaviour_ORDINAL int32_t
#else
#define ADXConstraintWidget_DimensionBehaviour_ORDINAL ADXConstraintWidget_DimensionBehaviour_Enum
#endif


/*!
 @brief Define how the widget will resize
 */
@interface ADXConstraintWidget_DimensionBehaviour : JavaLangEnum

#pragma mark Public

+ (ADXConstraintWidget_DimensionBehaviour *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXConstraintWidget_DimensionBehaviour_Enum)toNSEnum;

@property(readonly) ADXConstraintWidget_DimensionBehaviour_Enum enumValue;
+ (ADXConstraintWidget_DimensionBehaviour *)fromNSEnum:(ADXConstraintWidget_DimensionBehaviour_Enum)value;

- (ADXConstraintWidget_DimensionBehaviour_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithDimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour_Enum)value;

@end

J2OBJC_STATIC_INIT(ADXConstraintWidget_DimensionBehaviour)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_values_[];

inline ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_get_FIXED(void);
J2OBJC_ENUM_CONSTANT(ADXConstraintWidget_DimensionBehaviour, FIXED)

inline ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_get_WRAP_CONTENT(void);
J2OBJC_ENUM_CONSTANT(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)

inline ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_get_MATCH_CONSTRAINT(void);
J2OBJC_ENUM_CONSTANT(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)

inline ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_get_MATCH_PARENT(void);
J2OBJC_ENUM_CONSTANT(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)

FOUNDATION_EXPORT IOSObjectArray *ADXConstraintWidget_DimensionBehaviour_values(void);

FOUNDATION_EXPORT ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_fromOrdinal(ADXConstraintWidget_DimensionBehaviour_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXConstraintWidget_DimensionBehaviour)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ConstraintWidget")
