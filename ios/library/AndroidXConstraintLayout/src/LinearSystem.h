//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\LinearSystem.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_LinearSystem")
#ifdef RESTRICT_LinearSystem
#define INCLUDE_ALL_LinearSystem 0
#else
#define INCLUDE_ALL_LinearSystem 1
#endif
#undef RESTRICT_LinearSystem

#if !defined (ADXLinearSystem_) && (INCLUDE_ALL_LinearSystem || defined(INCLUDE_ADXLinearSystem))
#define ADXLinearSystem_

@class ADXArrayRow;
@class ADXCache;
@class ADXConstraintWidget;
@class ADXMetrics;
@class ADXSolverVariable;
@class ADXSolverVariable_Type;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class NSString;
@protocol ADXLinearSystem_Row;

/*!
 @brief Represents and solves a system of linear equations.
 */
@interface ADXLinearSystem : NSObject {
 @public
  bool hasSimpleDefinition_;
  int32_t mVariablesID_;
  IOSObjectArray *mRows_;
  bool graphOptimizer_;
  bool newgraphOptimizer_;
  int32_t mNumColumns_;
  int32_t mNumRows_;
  ADXCache *mCache_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Add an equation of the form (1 - bias) * (a - b) = bias * (c - d)
 @param a variable a
 @param b variable b
 @param m1 margin 1
 @param bias bias between ab - cd
 @param c variable c
 @param d variable d
 @param m2 margin 2
 @param strength strength used
 */
- (void)addCenteringWithADXSolverVariable:(ADXSolverVariable *)a
                    withADXSolverVariable:(ADXSolverVariable *)b
                                  withInt:(int32_t)m1
                                withFloat:(float)bias
                    withADXSolverVariable:(ADXSolverVariable *)c
                    withADXSolverVariable:(ADXSolverVariable *)d
                                  withInt:(int32_t)m2
                                  withInt:(int32_t)strength;

/*!
 @brief Add the equations constraining a widget center to another widget center, positioned
  on a circle, following an angle and radius
 @param widget
 @param target
 @param angle from 0 to 360
 @param radius the distance between the two centers
 */
- (void)addCenterPointWithADXConstraintWidget:(ADXConstraintWidget *)widget
                      withADXConstraintWidget:(ADXConstraintWidget *)target
                                    withFloat:(float)angle
                                      withInt:(int32_t)radius;

/*!
 @brief Add the equation to the system
 @param row the equation we want to add expressed as a system row.
 */
- (void)addConstraintWithADXArrayRow:(ADXArrayRow *)row;

/*!
 @brief Add an equation of the form a = value
 @param a variable a
 @param value the value we set
 */
- (void)addEqualityWithADXSolverVariable:(ADXSolverVariable *)a
                                 withInt:(int32_t)value;

/*!
 @brief Add an equation of the form a = b + margin
 @param a variable a
 @param b variable b
 @param margin margin used
 @param strength strength used
 */
- (ADXArrayRow *)addEqualityWithADXSolverVariable:(ADXSolverVariable *)a
                            withADXSolverVariable:(ADXSolverVariable *)b
                                          withInt:(int32_t)margin
                                          withInt:(int32_t)strength;

- (void)addGreaterBarrierWithADXSolverVariable:(ADXSolverVariable *)a
                         withADXSolverVariable:(ADXSolverVariable *)b
                                       withInt:(int32_t)margin
                                   withBoolean:(bool)hasMatchConstraintWidgets;

/*!
 @brief Add an equation of the form a >= b + margin
 @param a variable a
 @param b variable b
 @param margin margin
 @param strength strength used
 */
- (void)addGreaterThanWithADXSolverVariable:(ADXSolverVariable *)a
                      withADXSolverVariable:(ADXSolverVariable *)b
                                    withInt:(int32_t)margin
                                    withInt:(int32_t)strength;

- (void)addLowerBarrierWithADXSolverVariable:(ADXSolverVariable *)a
                       withADXSolverVariable:(ADXSolverVariable *)b
                                     withInt:(int32_t)margin
                                 withBoolean:(bool)hasMatchConstraintWidgets;

/*!
 @brief Add an equation of the form a <= b + margin
 @param a variable a
 @param b variable b
 @param margin margin
 @param strength strength used
 */
- (void)addLowerThanWithADXSolverVariable:(ADXSolverVariable *)a
                    withADXSolverVariable:(ADXSolverVariable *)b
                                  withInt:(int32_t)margin
                                  withInt:(int32_t)strength;

- (void)addRatioWithADXSolverVariable:(ADXSolverVariable *)a
                withADXSolverVariable:(ADXSolverVariable *)b
                withADXSolverVariable:(ADXSolverVariable *)c
                withADXSolverVariable:(ADXSolverVariable *)d
                            withFloat:(float)ratio
                              withInt:(int32_t)strength;

- (void)addSynonymWithADXSolverVariable:(ADXSolverVariable *)a
                  withADXSolverVariable:(ADXSolverVariable *)b
                                withInt:(int32_t)margin;

- (ADXSolverVariable *)createErrorVariableWithInt:(int32_t)strength
                                     withNSString:(NSString *)prefix;

- (ADXSolverVariable *)createExtraVariable;

- (ADXSolverVariable *)createObjectVariableWithId:(id)anchor;

- (ADXArrayRow *)createRow;

/*!
 @brief Create a constraint to express A = C * percent
 @param linearSystem the system we create the row on
 @param variableA variable a
 @param variableC variable c
 @param percent the percent used
 @return the created row
 */
+ (ADXArrayRow *)createRowDimensionPercentWithADXLinearSystem:(ADXLinearSystem *)linearSystem
                                        withADXSolverVariable:(ADXSolverVariable *)variableA
                                        withADXSolverVariable:(ADXSolverVariable *)variableC
                                                    withFloat:(float)percent;

- (ADXSolverVariable *)createSlackVariable;

- (void)displayReadableRows;

- (void)displayVariablesReadableRows;

- (void)fillMetricsWithADXMetrics:(ADXMetrics *)metrics;

- (ADXCache *)getCache;

- (int32_t)getMemoryUsed;

+ (ADXMetrics *)getMetrics;

- (int32_t)getNumEquations;

- (int32_t)getNumVariables;

- (int32_t)getObjectVariableValueWithId:(id)object;

/*!
 @brief Minimize the current goal of the system.
 */
- (void)minimize;

- (void)removeRowWithADXArrayRow:(ADXArrayRow *)row;

/*!
 @brief Reset the LinearSystem object so that it can be reused.
 */
- (void)reset;

#pragma mark Package-Private

- (void)addSingleErrorWithADXArrayRow:(ADXArrayRow *)row
                              withInt:(int32_t)sign
                              withInt:(int32_t)strength;

- (void)cleanupRows;

/*!
 @brief Display current system information
 */
- (void)displaySystemInformation;

/*!
 @brief Simple accessor for the current goal.Used when minimizing the system's goal.
 @return the current goal.
 */
- (id<ADXLinearSystem_Row>)getGoal;

- (ADXArrayRow *)getRowWithInt:(int32_t)n;

- (float)getValueForWithNSString:(NSString *)name;

/*!
 @brief Returns a SolverVariable instance given a name and a type.
 @param name name of the variable
 @param type<code>type</code>  of the variable
 @return a SolverVariable instance
 */
- (ADXSolverVariable *)getVariableWithNSString:(NSString *)name
                    withADXSolverVariable_Type:(ADXSolverVariable_Type *)type;

/*!
 @brief Minimize the given goal with the current system.
 @param goal the goal to minimize.
 */
- (void)minimizeGoalWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)goal;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXLinearSystem)

J2OBJC_FIELD_SETTER(ADXLinearSystem, mRows_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXLinearSystem, mCache_, ADXCache *)

inline bool ADXLinearSystem_get_FULL_DEBUG(void);
#define ADXLinearSystem_FULL_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXLinearSystem, FULL_DEBUG, bool)

inline bool ADXLinearSystem_get_DEBUG(void);
#define ADXLinearSystem_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXLinearSystem, DEBUG, bool)

inline bool ADXLinearSystem_get_MEASURE(void);
#define ADXLinearSystem_MEASURE false
J2OBJC_STATIC_FIELD_CONSTANT(ADXLinearSystem, MEASURE, bool)

inline bool ADXLinearSystem_get_USE_DEPENDENCY_ORDERING(void);
inline bool ADXLinearSystem_set_USE_DEPENDENCY_ORDERING(bool value);
inline bool *ADXLinearSystem_getRef_USE_DEPENDENCY_ORDERING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT bool ADXLinearSystem_USE_DEPENDENCY_ORDERING;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, USE_DEPENDENCY_ORDERING, bool)

inline bool ADXLinearSystem_get_USE_BASIC_SYNONYMS(void);
inline bool ADXLinearSystem_set_USE_BASIC_SYNONYMS(bool value);
inline bool *ADXLinearSystem_getRef_USE_BASIC_SYNONYMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT bool ADXLinearSystem_USE_BASIC_SYNONYMS;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, USE_BASIC_SYNONYMS, bool)

inline bool ADXLinearSystem_get_SIMPLIFY_SYNONYMS(void);
inline bool ADXLinearSystem_set_SIMPLIFY_SYNONYMS(bool value);
inline bool *ADXLinearSystem_getRef_SIMPLIFY_SYNONYMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT bool ADXLinearSystem_SIMPLIFY_SYNONYMS;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, SIMPLIFY_SYNONYMS, bool)

inline bool ADXLinearSystem_get_USE_SYNONYMS(void);
inline bool ADXLinearSystem_set_USE_SYNONYMS(bool value);
inline bool *ADXLinearSystem_getRef_USE_SYNONYMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT bool ADXLinearSystem_USE_SYNONYMS;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, USE_SYNONYMS, bool)

inline bool ADXLinearSystem_get_SKIP_COLUMNS(void);
inline bool ADXLinearSystem_set_SKIP_COLUMNS(bool value);
inline bool *ADXLinearSystem_getRef_SKIP_COLUMNS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT bool ADXLinearSystem_SKIP_COLUMNS;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, SKIP_COLUMNS, bool)

inline bool ADXLinearSystem_get_OPTIMIZED_ENGINE(void);
inline bool ADXLinearSystem_set_OPTIMIZED_ENGINE(bool value);
inline bool *ADXLinearSystem_getRef_OPTIMIZED_ENGINE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT bool ADXLinearSystem_OPTIMIZED_ENGINE;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, OPTIMIZED_ENGINE, bool)

inline ADXMetrics *ADXLinearSystem_get_sMetrics(void);
inline ADXMetrics *ADXLinearSystem_set_sMetrics(ADXMetrics *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADXMetrics *ADXLinearSystem_sMetrics;
J2OBJC_STATIC_FIELD_OBJ(ADXLinearSystem, sMetrics, ADXMetrics *)

inline int64_t ADXLinearSystem_get_ARRAY_ROW_CREATION(void);
inline int64_t ADXLinearSystem_set_ARRAY_ROW_CREATION(int64_t value);
inline int64_t *ADXLinearSystem_getRef_ARRAY_ROW_CREATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int64_t ADXLinearSystem_ARRAY_ROW_CREATION;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, ARRAY_ROW_CREATION, int64_t)

inline int64_t ADXLinearSystem_get_OPTIMIZED_ARRAY_ROW_CREATION(void);
inline int64_t ADXLinearSystem_set_OPTIMIZED_ARRAY_ROW_CREATION(int64_t value);
inline int64_t *ADXLinearSystem_getRef_OPTIMIZED_ARRAY_ROW_CREATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int64_t ADXLinearSystem_OPTIMIZED_ARRAY_ROW_CREATION;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, OPTIMIZED_ARRAY_ROW_CREATION, int64_t)

FOUNDATION_EXPORT void ADXLinearSystem_init(ADXLinearSystem *self);

FOUNDATION_EXPORT ADXLinearSystem *new_ADXLinearSystem_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXLinearSystem *create_ADXLinearSystem_init(void);

FOUNDATION_EXPORT ADXMetrics *ADXLinearSystem_getMetrics(void);

FOUNDATION_EXPORT ADXArrayRow *ADXLinearSystem_createRowDimensionPercentWithADXLinearSystem_withADXSolverVariable_withADXSolverVariable_withFloat_(ADXLinearSystem *linearSystem, ADXSolverVariable *variableA, ADXSolverVariable *variableC, float percent);

J2OBJC_TYPE_LITERAL_HEADER(ADXLinearSystem)

@compatibility_alias AndroidxConstraintlayoutCoreLinearSystem ADXLinearSystem;


#endif

#if !defined (ADXLinearSystem_ValuesRow_) && (INCLUDE_ALL_LinearSystem || defined(INCLUDE_ADXLinearSystem_ValuesRow))
#define ADXLinearSystem_ValuesRow_

#define RESTRICT_ArrayRow 1
#define INCLUDE_ADXArrayRow 1
#include "ArrayRow.h"

@class ADXCache;
@class ADXLinearSystem;

@interface ADXLinearSystem_ValuesRow : ADXArrayRow

#pragma mark Public

- (instancetype)initWithADXLinearSystem:(ADXLinearSystem *)outer$
                           withADXCache:(ADXCache *)cache;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithADXCache:(ADXCache *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXLinearSystem_ValuesRow)

FOUNDATION_EXPORT void ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(ADXLinearSystem_ValuesRow *self, ADXLinearSystem *outer$, ADXCache *cache);

FOUNDATION_EXPORT ADXLinearSystem_ValuesRow *new_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(ADXLinearSystem *outer$, ADXCache *cache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXLinearSystem_ValuesRow *create_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(ADXLinearSystem *outer$, ADXCache *cache);

J2OBJC_TYPE_LITERAL_HEADER(ADXLinearSystem_ValuesRow)


#endif

#if !defined (ADXLinearSystem_Row_) && (INCLUDE_ALL_LinearSystem || defined(INCLUDE_ADXLinearSystem_Row))
#define ADXLinearSystem_Row_

@class ADXArrayRow;
@class ADXLinearSystem;
@class ADXSolverVariable;
@class IOSBooleanArray;
@class JavaLangBoolean;

@protocol ADXLinearSystem_Row < JavaObject >

- (ADXSolverVariable *)getPivotCandidateWithADXLinearSystem:(ADXLinearSystem *)system
                                           withBooleanArray:(IOSBooleanArray *)avoid;

- (void)clear;

- (void)initFromRowWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)row OBJC_METHOD_FAMILY_NONE;

- (void)addErrorWithADXSolverVariable:(ADXSolverVariable *)variable;

- (void)updateFromSystemWithADXLinearSystem:(ADXLinearSystem *)system;

- (ADXSolverVariable *)getKey;

- (bool)isEmpty;

- (void)updateFromRowWithADXLinearSystem:(ADXLinearSystem *)system
                         withADXArrayRow:(ADXArrayRow *)definition
                             withBoolean:(bool)b;

- (void)updateFromFinalVariableWithADXLinearSystem:(ADXLinearSystem *)system
                             withADXSolverVariable:(ADXSolverVariable *)variable
                                       withBoolean:(bool)removeFromDefinition;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXLinearSystem_Row)

J2OBJC_TYPE_LITERAL_HEADER(ADXLinearSystem_Row)


#endif

#pragma pop_macro("INCLUDE_ALL_LinearSystem")
