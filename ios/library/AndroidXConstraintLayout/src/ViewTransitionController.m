//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\ViewTransitionController.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "KeyFrames.h"
#include "Log.h"
#include "MotionController.h"
#include "MotionEvent.h"
#include "MotionLayout.h"
#include "Rect.h"
#include "SharedValues.h"
#include "View.h"
#include "ViewTransition.h"
#include "ViewTransitionController.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXViewTransitionController () {
 @public
  ADXMotionLayout *mMotionLayout_;
  JavaUtilArrayList *viewTransitions_;
  JavaUtilHashSet *mRelatedViews_;
  NSString *TAG_;
}

- (void)viewTransitionWithADXViewTransition:(ADXViewTransition *)vt
                            withADViewArray:(IOSObjectArray *)view;

- (void)listenForSharedVariableWithADXViewTransition:(ADXViewTransition *)viewTransition
                                         withBoolean:(bool)isSet;

@end

J2OBJC_FIELD_SETTER(ADXViewTransitionController, mMotionLayout_, ADXMotionLayout *)
J2OBJC_FIELD_SETTER(ADXViewTransitionController, viewTransitions_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXViewTransitionController, mRelatedViews_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(ADXViewTransitionController, TAG_, NSString *)

__attribute__((unused)) static void ADXViewTransitionController_viewTransitionWithADXViewTransition_withADViewArray_(ADXViewTransitionController *self, ADXViewTransition *vt, IOSObjectArray *view);

__attribute__((unused)) static void ADXViewTransitionController_listenForSharedVariableWithADXViewTransition_withBoolean_(ADXViewTransitionController *self, ADXViewTransition *viewTransition, bool isSet);

@interface ADXViewTransitionController_1 : NSObject < ADXSharedValues_SharedValuesListener > {
 @public
  ADXViewTransitionController *this$0_;
  ADXViewTransition *val$viewTransition_;
  int32_t val$listen_for_id_;
  bool val$isSet_;
  int32_t val$listen_for_value_;
}

- (instancetype)initWithADXViewTransitionController:(ADXViewTransitionController *)outer$
                              withADXViewTransition:(ADXViewTransition *)capture$0
                                            withInt:(int32_t)capture$1
                                        withBoolean:(bool)capture$2
                                            withInt:(int32_t)capture$3;

- (void)onNewValueWithInt:(int32_t)id_
                  withInt:(int32_t)value
                  withInt:(int32_t)oldValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewTransitionController_1)

__attribute__((unused)) static void ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(ADXViewTransitionController_1 *self, ADXViewTransitionController *outer$, ADXViewTransition *capture$0, int32_t capture$1, bool capture$2, int32_t capture$3);

__attribute__((unused)) static ADXViewTransitionController_1 *new_ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(ADXViewTransitionController *outer$, ADXViewTransition *capture$0, int32_t capture$1, bool capture$2, int32_t capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXViewTransitionController_1 *create_ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(ADXViewTransitionController *outer$, ADXViewTransition *capture$0, int32_t capture$1, bool capture$2, int32_t capture$3);


@implementation ADXViewTransitionController

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)layout {
  ADXViewTransitionController_initWithADXMotionLayout_(self, layout);
  return self;
}

- (void)addWithADXViewTransition:(ADXViewTransition *)viewTransition {
  [((JavaUtilArrayList *) nil_chk(viewTransitions_)) addWithId:viewTransition];
  JreStrongAssign(&mRelatedViews_, nil);
  if ([((ADXViewTransition *) nil_chk(viewTransition)) getStateTransition] == ADXViewTransition_ONSTATE_SHARED_VALUE_SET) {
    ADXViewTransitionController_listenForSharedVariableWithADXViewTransition_withBoolean_(self, viewTransition, true);
  }
  else if ([viewTransition getStateTransition] == ADXViewTransition_ONSTATE_SHARED_VALUE_UNSET) {
    ADXViewTransitionController_listenForSharedVariableWithADXViewTransition_withBoolean_(self, viewTransition, false);
  }
}

- (void)removeWithInt:(int32_t)id_ {
  ADXViewTransition *del = nil;
  for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
    if ([((ADXViewTransition *) nil_chk(viewTransition)) getId] == id_) {
      del = viewTransition;
      break;
    }
  }
  if (del != nil) {
    JreStrongAssign(&mRelatedViews_, nil);
    [((JavaUtilArrayList *) nil_chk(viewTransitions_)) removeWithId:del];
  }
}

- (void)viewTransitionWithADXViewTransition:(ADXViewTransition *)vt
                            withADViewArray:(IOSObjectArray *)view {
  ADXViewTransitionController_viewTransitionWithADXViewTransition_withADViewArray_(self, vt, view);
}

- (void)enableViewTransitionWithInt:(int32_t)id_
                        withBoolean:(bool)enable {
  for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
    if ([((ADXViewTransition *) nil_chk(viewTransition)) getId] == id_) {
      [viewTransition setEnabledWithBoolean:enable];
      break;
    }
  }
}

- (bool)isViewTransitionEnabledWithInt:(int32_t)id_ {
  for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
    if ([((ADXViewTransition *) nil_chk(viewTransition)) getId] == id_) {
      return [viewTransition isEnabled];
    }
  }
  return false;
}

- (void)viewTransitionWithInt:(int32_t)id_
              withADViewArray:(IOSObjectArray *)views {
  ADXViewTransition *vt = nil;
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
    if ([((ADXViewTransition *) nil_chk(viewTransition)) getId] == id_) {
      vt = viewTransition;
      {
        IOSObjectArray *a__ = views;
        ADView * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        ADView * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          ADView *view = RETAIN_AND_AUTORELEASE(*b__++);
          if ([viewTransition checkTagsWithADView:view]) {
            [list addWithId:view];
          }
        }
      }
      if (![list isEmpty]) {
        ADXViewTransitionController_viewTransitionWithADXViewTransition_withADViewArray_(self, vt, [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:ADView_class_()]]);
        [list clear];
      }
    }
  }
  if (vt == nil) {
    ADLog_eWithNSString_withNSString_(TAG_, @" Could not find ViewTransition");
    return;
  }
}

- (void)touchEventWithADMotionEvent:(ADMotionEvent *)event {
  int32_t currentId = [((ADXMotionLayout *) nil_chk(mMotionLayout_)) getCurrentState];
  if (currentId == -1) {
    return;
  }
  if (mRelatedViews_ == nil) {
    JreStrongAssignAndConsume(&mRelatedViews_, new_JavaUtilHashSet_init());
    for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
      int32_t count = [mMotionLayout_ getChildCount];
      for (int32_t i = 0; i < count; i++) {
        ADView *view = JreRetainedLocalValue([mMotionLayout_ getChildAtWithInt:i]);
        if ([((ADXViewTransition *) nil_chk(viewTransition)) matchesViewWithADView:view]) {
          int32_t id_ = [((ADView *) nil_chk(view)) getId];
          [((JavaUtilHashSet *) nil_chk(mRelatedViews_)) addWithId:view];
        }
      }
    }
  }
  float x = [((ADMotionEvent *) nil_chk(event)) getX];
  float y = [event getY];
  ADRect *rec = create_ADRect_init();
  int32_t action = [event getAction];
  if (animations_ != nil && ![animations_ isEmpty]) {
    for (ADXViewTransition_Animate * __strong animation in animations_) {
      [((ADXViewTransition_Animate *) nil_chk(animation)) reactToWithInt:action withFloat:x withFloat:y];
    }
  }
  {
    ADXConstraintSet *current;
    switch (action) {
      case ADMotionEvent_ACTION_UP:
      case ADMotionEvent_ACTION_DOWN:
      current = JreRetainedLocalValue([mMotionLayout_ getConstraintSetWithInt:currentId]);
      for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
        if ([((ADXViewTransition *) nil_chk(viewTransition)) supportsWithInt:action]) {
          for (ADView * __strong view in nil_chk(mRelatedViews_)) {
            if (![viewTransition matchesViewWithADView:view]) {
              continue;
            }
            [((ADView *) nil_chk(view)) getHitRectWithADRect:rec];
            if ([rec containsWithInt:JreFpToInt(x) withInt:JreFpToInt(y)]) {
              [viewTransition applyTransitionWithADXViewTransitionController:self withADXMotionLayout:mMotionLayout_ withInt:currentId withADXConstraintSet:current withADViewArray:[IOSObjectArray arrayWithObjects:(id[]){ view } count:1 type:ADView_class_()]];
            }
          }
        }
      }
      break;
    }
  }
}

- (void)addAnimationWithADXViewTransition_Animate:(ADXViewTransition_Animate *)animation {
  if (animations_ == nil) {
    JreStrongAssignAndConsume(&animations_, new_JavaUtilArrayList_init());
  }
  [animations_ addWithId:animation];
}

- (void)removeAnimationWithADXViewTransition_Animate:(ADXViewTransition_Animate *)animation {
  [((JavaUtilArrayList *) nil_chk(removeList_)) addWithId:animation];
}

- (void)animate {
  if (animations_ == nil) {
    return;
  }
  for (ADXViewTransition_Animate * __strong animation in animations_) {
    [((ADXViewTransition_Animate *) nil_chk(animation)) mutate];
  }
  [animations_ removeAllWithJavaUtilCollection:removeList_];
  [((JavaUtilArrayList *) nil_chk(removeList_)) clear];
  if ([((JavaUtilArrayList *) nil_chk(animations_)) isEmpty]) {
    JreStrongAssign(&animations_, nil);
  }
}

- (void)invalidate {
  [((ADXMotionLayout *) nil_chk(mMotionLayout_)) invalidate];
}

- (bool)applyViewTransitionWithInt:(int32_t)viewTransitionId
           withADXMotionController:(ADXMotionController *)motionController {
  for (ADXViewTransition * __strong viewTransition in nil_chk(viewTransitions_)) {
    if ([((ADXViewTransition *) nil_chk(viewTransition)) getId] == viewTransitionId) {
      [((ADXKeyFrames *) nil_chk(viewTransition->mKeyFrames_)) addAllFramesWithADXMotionController:motionController];
      return true;
    }
  }
  return false;
}

- (void)listenForSharedVariableWithADXViewTransition:(ADXViewTransition *)viewTransition
                                         withBoolean:(bool)isSet {
  ADXViewTransitionController_listenForSharedVariableWithADXViewTransition_withBoolean_(self, viewTransition, isSet);
}

- (void)dealloc {
  RELEASE_(mMotionLayout_);
  RELEASE_(viewTransitions_);
  RELEASE_(mRelatedViews_);
  RELEASE_(TAG_);
  RELEASE_(animations_);
  RELEASE_(removeList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x82, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x80, 5, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMotionLayout:);
  methods[1].selector = @selector(addWithADXViewTransition:);
  methods[2].selector = @selector(removeWithInt:);
  methods[3].selector = @selector(viewTransitionWithADXViewTransition:withADViewArray:);
  methods[4].selector = @selector(enableViewTransitionWithInt:withBoolean:);
  methods[5].selector = @selector(isViewTransitionEnabledWithInt:);
  methods[6].selector = @selector(viewTransitionWithInt:withADViewArray:);
  methods[7].selector = @selector(touchEventWithADMotionEvent:);
  methods[8].selector = @selector(addAnimationWithADXViewTransition_Animate:);
  methods[9].selector = @selector(removeAnimationWithADXViewTransition_Animate:);
  methods[10].selector = @selector(animate);
  methods[11].selector = @selector(invalidate);
  methods[12].selector = @selector(applyViewTransitionWithInt:withADXMotionController:);
  methods[13].selector = @selector(listenForSharedVariableWithADXViewTransition:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMotionLayout_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "viewTransitions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "mRelatedViews_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "TAG_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "animations_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 22, -1 },
    { "removeList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 22, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionLayout;", "add", "LADXViewTransition;", "remove", "I", "viewTransition", "LADXViewTransition;[LADView;", "enableViewTransition", "IZ", "isViewTransitionEnabled", "I[LADView;", "touchEvent", "LADMotionEvent;", "addAnimation", "LADXViewTransition_Animate;", "removeAnimation", "applyViewTransition", "ILADXMotionController;", "listenForSharedVariable", "LADXViewTransition;Z", "Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/ViewTransition;>;", "Ljava/util/HashSet<Lr/android/view/View;>;", "Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/ViewTransition$Animate;>;" };
  static const J2ObjcClassInfo _ADXViewTransitionController = { "ViewTransitionController", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x1, 14, 6, -1, -1, -1, -1, -1 };
  return &_ADXViewTransitionController;
}

@end

void ADXViewTransitionController_initWithADXMotionLayout_(ADXViewTransitionController *self, ADXMotionLayout *layout) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->viewTransitions_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->TAG_, @"ViewTransitionController");
  JreStrongAssignAndConsume(&self->removeList_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mMotionLayout_, layout);
}

ADXViewTransitionController *new_ADXViewTransitionController_initWithADXMotionLayout_(ADXMotionLayout *layout) {
  J2OBJC_NEW_IMPL(ADXViewTransitionController, initWithADXMotionLayout_, layout)
}

ADXViewTransitionController *create_ADXViewTransitionController_initWithADXMotionLayout_(ADXMotionLayout *layout) {
  J2OBJC_CREATE_IMPL(ADXViewTransitionController, initWithADXMotionLayout_, layout)
}

void ADXViewTransitionController_viewTransitionWithADXViewTransition_withADViewArray_(ADXViewTransitionController *self, ADXViewTransition *vt, IOSObjectArray *view) {
  int32_t currentId = [((ADXMotionLayout *) nil_chk(self->mMotionLayout_)) getCurrentState];
  if (((ADXViewTransition *) nil_chk(vt))->mViewTransitionMode_ != ADXViewTransition_VIEWTRANSITIONMODE_NOSTATE) {
    if (currentId == -1) {
      ADLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$$", @"No support for ViewTransition within transition yet. Currently: ", [self->mMotionLayout_ description]));
      return;
    }
    ADXConstraintSet *current = JreRetainedLocalValue([self->mMotionLayout_ getConstraintSetWithInt:currentId]);
    if (current == nil) {
      return;
    }
    [vt applyTransitionWithADXViewTransitionController:self withADXMotionLayout:self->mMotionLayout_ withInt:currentId withADXConstraintSet:current withADViewArray:view];
  }
  else {
    [vt applyTransitionWithADXViewTransitionController:self withADXMotionLayout:self->mMotionLayout_ withInt:currentId withADXConstraintSet:nil withADViewArray:view];
  }
}

void ADXViewTransitionController_listenForSharedVariableWithADXViewTransition_withBoolean_(ADXViewTransitionController *self, ADXViewTransition *viewTransition, bool isSet) {
  int32_t listen_for_id = [((ADXViewTransition *) nil_chk(viewTransition)) getSharedValueID];
  int32_t listen_for_value = [viewTransition getSharedValue];
  [((ADXSharedValues *) nil_chk(ADXConstraintLayout_getSharedValues())) addListenerWithInt:[viewTransition getSharedValueID] withADXSharedValues_SharedValuesListener:create_ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(self, viewTransition, listen_for_id, isSet, listen_for_value)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXViewTransitionController)

J2OBJC_NAME_MAPPING(ADXViewTransitionController, "androidx.constraintlayout.motion.widget", "ADX")

@implementation ADXViewTransitionController_1

- (instancetype)initWithADXViewTransitionController:(ADXViewTransitionController *)outer$
                              withADXViewTransition:(ADXViewTransition *)capture$0
                                            withInt:(int32_t)capture$1
                                        withBoolean:(bool)capture$2
                                            withInt:(int32_t)capture$3 {
  ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)onNewValueWithInt:(int32_t)id_
                  withInt:(int32_t)value
                  withInt:(int32_t)oldValue {
  int32_t current_value = [((ADXViewTransition *) nil_chk(val$viewTransition_)) getSharedValueCurrent];
  [val$viewTransition_ setSharedValueCurrentWithInt:value];
  if (val$listen_for_id_ == id_ && current_value != value) {
    if (val$isSet_) {
      if (val$listen_for_value_ == value) {
        int32_t count = [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) getChildCount];
        for (int32_t i = 0; i < count; i++) {
          ADView *view = JreRetainedLocalValue([this$0_->mMotionLayout_ getChildAtWithInt:i]);
          if ([val$viewTransition_ matchesViewWithADView:view]) {
            int32_t currentId = [this$0_->mMotionLayout_ getCurrentState];
            ADXConstraintSet *current = JreRetainedLocalValue([this$0_->mMotionLayout_ getConstraintSetWithInt:currentId]);
            [val$viewTransition_ applyTransitionWithADXViewTransitionController:this$0_ withADXMotionLayout:this$0_->mMotionLayout_ withInt:currentId withADXConstraintSet:current withADViewArray:[IOSObjectArray arrayWithObjects:(id[]){ view } count:1 type:ADView_class_()]];
          }
        }
      }
    }
    else {
      if (val$listen_for_value_ != value) {
        int32_t count = [((ADXMotionLayout *) nil_chk(this$0_->mMotionLayout_)) getChildCount];
        for (int32_t i = 0; i < count; i++) {
          ADView *view = JreRetainedLocalValue([this$0_->mMotionLayout_ getChildAtWithInt:i]);
          if ([val$viewTransition_ matchesViewWithADView:view]) {
            int32_t currentId = [this$0_->mMotionLayout_ getCurrentState];
            ADXConstraintSet *current = JreRetainedLocalValue([this$0_->mMotionLayout_ getConstraintSetWithInt:currentId]);
            [val$viewTransition_ applyTransitionWithADXViewTransitionController:this$0_ withADXMotionLayout:this$0_->mMotionLayout_ withInt:currentId withADXConstraintSet:current withADViewArray:[IOSObjectArray arrayWithObjects:(id[]){ view } count:1 type:ADView_class_()]];
          }
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$viewTransition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXViewTransitionController:withADXViewTransition:withInt:withBoolean:withInt:);
  methods[1].selector = @selector(onNewValueWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXViewTransitionController;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$viewTransition_", "LADXViewTransition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$listen_for_id_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$isSet_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$listen_for_value_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXViewTransitionController;LADXViewTransition;IZI", "onNewValue", "III", "LADXViewTransitionController;", "listenForSharedVariableWithADXViewTransition:withBoolean:" };
  static const J2ObjcClassInfo _ADXViewTransitionController_1 = { "", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x8000, 2, 5, 3, -1, 4, -1, -1 };
  return &_ADXViewTransitionController_1;
}

@end

void ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(ADXViewTransitionController_1 *self, ADXViewTransitionController *outer$, ADXViewTransition *capture$0, int32_t capture$1, bool capture$2, int32_t capture$3) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$viewTransition_, capture$0);
  self->val$listen_for_id_ = capture$1;
  self->val$isSet_ = capture$2;
  self->val$listen_for_value_ = capture$3;
  NSObject_init(self);
}

ADXViewTransitionController_1 *new_ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(ADXViewTransitionController *outer$, ADXViewTransition *capture$0, int32_t capture$1, bool capture$2, int32_t capture$3) {
  J2OBJC_NEW_IMPL(ADXViewTransitionController_1, initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_, outer$, capture$0, capture$1, capture$2, capture$3)
}

ADXViewTransitionController_1 *create_ADXViewTransitionController_1_initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_(ADXViewTransitionController *outer$, ADXViewTransition *capture$0, int32_t capture$1, bool capture$2, int32_t capture$3) {
  J2OBJC_CREATE_IMPL(ADXViewTransitionController_1, initWithADXViewTransitionController_withADXViewTransition_withInt_withBoolean_withInt_, outer$, capture$0, capture$1, capture$2, capture$3)
}
