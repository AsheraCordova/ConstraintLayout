//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\MonotonicCurveFit.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CurveFit.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MonotonicCurveFit.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXMonotonicCurveFit () {
 @public
  IOSDoubleArray *mT_;
  IOSObjectArray *mY_;
  IOSObjectArray *mTangent_;
  bool mExtrapolate_;
}

/*!
 @brief Cubic Hermite spline
 */
+ (double)interpolateWithDouble:(double)h
                     withDouble:(double)x
                     withDouble:(double)y1
                     withDouble:(double)y2
                     withDouble:(double)t1
                     withDouble:(double)t2;

/*!
 @brief Cubic Hermite spline slope differentiated
 */
+ (double)diffWithDouble:(double)h
              withDouble:(double)x
              withDouble:(double)y1
              withDouble:(double)y2
              withDouble:(double)t1
              withDouble:(double)t2;

+ (ADXMonotonicCurveFit *)buildWaveWithDoubleArray:(IOSDoubleArray *)values;

@end

J2OBJC_FIELD_SETTER(ADXMonotonicCurveFit, mT_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(ADXMonotonicCurveFit, mY_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXMonotonicCurveFit, mTangent_, IOSObjectArray *)

inline NSString *ADXMonotonicCurveFit_get_TAG(void);
static NSString *ADXMonotonicCurveFit_TAG = @"MonotonicCurveFit";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMonotonicCurveFit, TAG, NSString *)

__attribute__((unused)) static double ADXMonotonicCurveFit_interpolateWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(double h, double x, double y1, double y2, double t1, double t2);

__attribute__((unused)) static double ADXMonotonicCurveFit_diffWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(double h, double x, double y1, double y2, double t1, double t2);

__attribute__((unused)) static ADXMonotonicCurveFit *ADXMonotonicCurveFit_buildWaveWithDoubleArray_(IOSDoubleArray *values);

@implementation ADXMonotonicCurveFit

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)time
                   withDoubleArray2:(IOSObjectArray *)y {
  ADXMonotonicCurveFit_initWithDoubleArray_withDoubleArray2_(self, time, y);
  return self;
}

- (void)getPosWithDouble:(double)t
         withDoubleArray:(IOSDoubleArray *)v {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)))->size_;
  if (mExtrapolate_) {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, 0) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), 0)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j);
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, n - 1) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), n - 1)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j);
      }
      return;
    }
  }
  else {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, 0)), j);
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, n - 1)), j);
      }
      return;
    }
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t == IOSDoubleArray_Get(mT_, i)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
      }
    }
    if (t < IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      for (int32_t j = 0; j < dim; j++) {
        double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
        double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
        double t1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mTangent_), i)), j);
        double t2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mTangent_, i + 1)), j);
        *IOSDoubleArray_GetRef(nil_chk(v), j) = ADXMonotonicCurveFit_interpolateWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2);
      }
      return;
    }
  }
}

- (void)getPosWithDouble:(double)t
          withFloatArray:(IOSFloatArray *)v {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)))->size_;
  if (mExtrapolate_) {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, 0) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), 0)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j));
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, n - 1) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), n - 1)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j));
      }
      return;
    }
  }
  else {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, 0)), j);
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, n - 1)), j);
      }
      return;
    }
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t == IOSDoubleArray_Get(mT_, i)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
      }
    }
    if (t < IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      for (int32_t j = 0; j < dim; j++) {
        double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
        double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
        double t1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mTangent_), i)), j);
        double t2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mTangent_, i + 1)), j);
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) ADXMonotonicCurveFit_interpolateWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2);
      }
      return;
    }
  }
}

- (double)getPosWithDouble:(double)t
                   withInt:(int32_t)j {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  if (mExtrapolate_) {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j) + (t - IOSDoubleArray_Get(mT_, 0)) * [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, 0) withInt:j];
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j) + (t - IOSDoubleArray_Get(mT_, n - 1)) * [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, n - 1) withInt:j];
    }
  }
  else {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j);
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j);
    }
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t == IOSDoubleArray_Get(mT_, i)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
    }
    if (t < IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
      double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
      double t1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mTangent_), i)), j);
      double t2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mTangent_, i + 1)), j);
      return ADXMonotonicCurveFit_interpolateWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2);
    }
  }
  return 0;
}

- (void)getSlopeWithDouble:(double)t
           withDoubleArray:(IOSDoubleArray *)v {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)))->size_;
  if (t <= IOSDoubleArray_Get(mT_, 0)) {
    t = IOSDoubleArray_Get(mT_, 0);
  }
  else if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
    t = IOSDoubleArray_Get(mT_, n - 1);
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t <= IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      for (int32_t j = 0; j < dim; j++) {
        double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
        double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
        double t1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mTangent_), i)), j);
        double t2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mTangent_, i + 1)), j);
        *IOSDoubleArray_GetRef(nil_chk(v), j) = ADXMonotonicCurveFit_diffWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2) / h;
      }
      break;
    }
  }
  return;
}

- (double)getSlopeWithDouble:(double)t
                     withInt:(int32_t)j {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  if (t < IOSDoubleArray_Get(mT_, 0)) {
    t = IOSDoubleArray_Get(mT_, 0);
  }
  else if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
    t = IOSDoubleArray_Get(mT_, n - 1);
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t <= IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
      double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
      double t1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mTangent_), i)), j);
      double t2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mTangent_, i + 1)), j);
      return ADXMonotonicCurveFit_diffWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2) / h;
    }
  }
  return 0;
}

- (IOSDoubleArray *)getTimePoints {
  return mT_;
}

+ (double)interpolateWithDouble:(double)h
                     withDouble:(double)x
                     withDouble:(double)y1
                     withDouble:(double)y2
                     withDouble:(double)t1
                     withDouble:(double)t2 {
  return ADXMonotonicCurveFit_interpolateWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2);
}

+ (double)diffWithDouble:(double)h
              withDouble:(double)x
              withDouble:(double)y1
              withDouble:(double)y2
              withDouble:(double)t1
              withDouble:(double)t2 {
  return ADXMonotonicCurveFit_diffWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(h, x, y1, y2, t1, t2);
}

+ (ADXMonotonicCurveFit *)buildWaveWithNSString:(NSString *)configString {
  return ADXMonotonicCurveFit_buildWaveWithNSString_(configString);
}

+ (ADXMonotonicCurveFit *)buildWaveWithDoubleArray:(IOSDoubleArray *)values {
  return ADXMonotonicCurveFit_buildWaveWithDoubleArray_(values);
}

- (void)dealloc {
  RELEASE_(mT_);
  RELEASE_(mY_);
  RELEASE_(mTangent_);
  RELEASE_(mSlopeTemp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 8, 7, -1, -1, -1, -1 },
    { NULL, "LADXMonotonicCurveFit;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADXMonotonicCurveFit;", 0xa, 9, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDoubleArray:withDoubleArray2:);
  methods[1].selector = @selector(getPosWithDouble:withDoubleArray:);
  methods[2].selector = @selector(getPosWithDouble:withFloatArray:);
  methods[3].selector = @selector(getPosWithDouble:withInt:);
  methods[4].selector = @selector(getSlopeWithDouble:withDoubleArray:);
  methods[5].selector = @selector(getSlopeWithDouble:withInt:);
  methods[6].selector = @selector(getTimePoints);
  methods[7].selector = @selector(interpolateWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[8].selector = @selector(diffWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[9].selector = @selector(buildWaveWithNSString:);
  methods[10].selector = @selector(buildWaveWithDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "mT_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mY_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTangent_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mExtrapolate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSlopeTemp_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[D[[D", "getPos", "D[D", "D[F", "DI", "getSlope", "interpolate", "DDDDDD", "diff", "buildWave", "LNSString;", "[D", &ADXMonotonicCurveFit_TAG };
  static const J2ObjcClassInfo _ADXMonotonicCurveFit = { "MonotonicCurveFit", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_ADXMonotonicCurveFit;
}

@end

void ADXMonotonicCurveFit_initWithDoubleArray_withDoubleArray2_(ADXMonotonicCurveFit *self, IOSDoubleArray *time, IOSObjectArray *y) {
  ADXCurveFit_init(self);
  self->mExtrapolate_ = true;
  int32_t N = ((IOSDoubleArray *) nil_chk(time))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(y), 0)))->size_;
  JreStrongAssignAndConsume(&self->mSlopeTemp_, [IOSDoubleArray newArrayWithLength:dim]);
  IOSObjectArray *slope = [IOSDoubleArray arrayWithDimensions:2 lengths:(int32_t[]){ N - 1, dim }];
  IOSObjectArray *tangent = [IOSDoubleArray arrayWithDimensions:2 lengths:(int32_t[]){ N, dim }];
  for (int32_t j = 0; j < dim; j++) {
    for (int32_t i = 0; i < N - 1; i++) {
      double dt = IOSDoubleArray_Get(time, i + 1) - IOSDoubleArray_Get(time, i);
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(slope, i)), j) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i + 1)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i)), j)) / dt;
      if (i == 0) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, i)), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j);
      }
      else {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, i)), j) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i - 1)), j) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j)) * 0.5f;
      }
    }
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, N - 1)), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, N - 2)), j);
  }
  for (int32_t i = 0; i < N - 1; i++) {
    for (int32_t j = 0; j < dim; j++) {
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j) == 0.) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, i)), j) = 0.;
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, i + 1)), j) = 0.;
      }
      else {
        double a = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(tangent, i)), j) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j);
        double b = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(tangent, i + 1)), j) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j);
        double h = JavaLangMath_hypotWithDouble_withDouble_(a, b);
        if (h > 9.0) {
          double t = 3. / h;
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, i)), j) = t * a * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j);
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tangent, i + 1)), j) = t * b * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(slope, i)), j);
        }
      }
    }
  }
  JreStrongAssign(&self->mT_, time);
  JreStrongAssign(&self->mY_, y);
  JreStrongAssign(&self->mTangent_, tangent);
}

ADXMonotonicCurveFit *new_ADXMonotonicCurveFit_initWithDoubleArray_withDoubleArray2_(IOSDoubleArray *time, IOSObjectArray *y) {
  J2OBJC_NEW_IMPL(ADXMonotonicCurveFit, initWithDoubleArray_withDoubleArray2_, time, y)
}

ADXMonotonicCurveFit *create_ADXMonotonicCurveFit_initWithDoubleArray_withDoubleArray2_(IOSDoubleArray *time, IOSObjectArray *y) {
  J2OBJC_CREATE_IMPL(ADXMonotonicCurveFit, initWithDoubleArray_withDoubleArray2_, time, y)
}

double ADXMonotonicCurveFit_interpolateWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(double h, double x, double y1, double y2, double t1, double t2) {
  ADXMonotonicCurveFit_initialize();
  double x2 = x * x;
  double x3 = x2 * x;
  return -2 * x3 * y2 + 3 * x2 * y2 + 2 * x3 * y1 - 3 * x2 * y1 + y1 + h * t2 * x3 + h * t1 * x3 - h * t2 * x2 - 2 * h * t1 * x2 + h * t1 * x;
}

double ADXMonotonicCurveFit_diffWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(double h, double x, double y1, double y2, double t1, double t2) {
  ADXMonotonicCurveFit_initialize();
  double x2 = x * x;
  return -6 * x2 * y2 + 6 * x * y2 + 6 * x2 * y1 - 6 * x * y1 + 3 * h * t2 * x2 + 3 * h * t1 * x2 - 2 * h * t2 * x - 4 * h * t1 * x + h * t1;
}

ADXMonotonicCurveFit *ADXMonotonicCurveFit_buildWaveWithNSString_(NSString *configString) {
  ADXMonotonicCurveFit_initialize();
  NSString *str = JreRetainedLocalValue(configString);
  IOSDoubleArray *values = [IOSDoubleArray arrayWithLength:JreIntDiv([((NSString *) nil_chk(str)) java_length], 2)];
  int32_t start = [((NSString *) nil_chk(configString)) java_indexOf:'('] + 1;
  int32_t off1 = [configString java_indexOf:',' fromIndex:start];
  int32_t count = 0;
  while (off1 != -1) {
    NSString *tmp = [((NSString *) nil_chk([configString java_substring:start endIndex:off1])) java_trim];
    *IOSDoubleArray_GetRef(values, count++) = JavaLangDouble_parseDoubleWithNSString_(tmp);
    off1 = [configString java_indexOf:',' fromIndex:start = off1 + 1];
  }
  off1 = [configString java_indexOf:')' fromIndex:start];
  NSString *tmp = [((NSString *) nil_chk([configString java_substring:start endIndex:off1])) java_trim];
  *IOSDoubleArray_GetRef(values, count++) = JavaLangDouble_parseDoubleWithNSString_(tmp);
  return ADXMonotonicCurveFit_buildWaveWithDoubleArray_(JavaUtilArrays_copyOfWithDoubleArray_withInt_(values, count));
}

ADXMonotonicCurveFit *ADXMonotonicCurveFit_buildWaveWithDoubleArray_(IOSDoubleArray *values) {
  ADXMonotonicCurveFit_initialize();
  int32_t length = ((IOSDoubleArray *) nil_chk(values))->size_ * 3 - 2;
  int32_t len = values->size_ - 1;
  double gap = 1.0 / len;
  IOSObjectArray *points = [IOSDoubleArray arrayWithDimensions:2 lengths:(int32_t[]){ length, 1 }];
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:length];
  for (int32_t i = 0; i < values->size_; i++) {
    double v = IOSDoubleArray_Get(values, i);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(points, i + len)), 0) = v;
    *IOSDoubleArray_GetRef(time, i + len) = i * gap;
    if (i > 0) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(points, i + len * 2)), 0) = v + 1;
      *IOSDoubleArray_GetRef(time, i + len * 2) = i * gap + 1;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(points, i - 1)), 0) = v - 1 - gap;
      *IOSDoubleArray_GetRef(time, i - 1) = i * gap + -1 - gap;
    }
  }
  return create_ADXMonotonicCurveFit_initWithDoubleArray_withDoubleArray2_(time, points);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMonotonicCurveFit)

J2OBJC_NAME_MAPPING(ADXMonotonicCurveFit, "androidx.constraintlayout.core.motion.utils", "ADX")
