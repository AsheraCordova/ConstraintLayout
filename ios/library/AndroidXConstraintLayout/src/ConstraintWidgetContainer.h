//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\ConstraintWidgetContainer.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ConstraintWidgetContainer")
#ifdef RESTRICT_ConstraintWidgetContainer
#define INCLUDE_ALL_ConstraintWidgetContainer 0
#else
#define INCLUDE_ALL_ConstraintWidgetContainer 1
#endif
#undef RESTRICT_ConstraintWidgetContainer

#if !defined (ADXConstraintWidgetContainer_) && (INCLUDE_ALL_ConstraintWidgetContainer || defined(INCLUDE_ADXConstraintWidgetContainer))
#define ADXConstraintWidgetContainer_

#define RESTRICT_WidgetContainer 1
#define INCLUDE_ADXWidgetContainer 1
#include "WidgetContainer.h"

@class ADXBasicMeasure;
@class ADXBasicMeasure_Measure;
@class ADXConstraintAnchor;
@class ADXConstraintWidget;
@class ADXDependencyGraph;
@class ADXLinearSystem;
@class ADXMetrics;
@class IOSBooleanArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaUtilArrayList;
@class JavaUtilHashSet;
@class NSString;
@protocol ADXBasicMeasure_Measurer;

/*!
 @brief A container of ConstraintWidget that can layout its children
 */
@interface ADXConstraintWidgetContainer : ADXWidgetContainer {
 @public
  ADXBasicMeasure *mBasicMeasureSolver_;
  ADXDependencyGraph *mDependencyGraph_;
  id<ADXBasicMeasure_Measurer> mMeasurer_;
  ADXMetrics *mMetrics_;
  ADXLinearSystem *mSystem_;
  int32_t mPaddingLeft_;
  int32_t mPaddingTop_;
  int32_t mPaddingRight_;
  int32_t mPaddingBottom_;
  int32_t mHorizontalChainsSize_;
  int32_t mVerticalChainsSize_;
  IOSObjectArray *mVerticalChainsArray_;
  IOSObjectArray *mHorizontalChainsArray_;
  bool mGroupsWrapOptimized_;
  bool mHorizontalWrapOptimized_;
  bool mVerticalWrapOptimized_;
  int32_t mWrapFixedWidth_;
  int32_t mWrapFixedHeight_;
  bool mSkipSolver_;
  int32_t mDebugSolverPassCount_;
  JavaUtilHashSet *widgetsToAdd_;
  ADXBasicMeasure_Measure *mMeasure_;
}

#pragma mark Public

/*!
 @brief Default constructor
 */
- (instancetype)init;

/*!
 @brief Constructor
 @param width width of the layout
 @param height height of the layout
 */
- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height;

/*!
 @brief Constructor
 @param x x position
 @param y y position
 @param width width of the layout
 @param height height of the layout
 */
- (instancetype)initWithInt:(int32_t)x
                    withInt:(int32_t)y
                    withInt:(int32_t)width
                    withInt:(int32_t)height;

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(int32_t)width
                         withInt:(int32_t)height;

/*!
 @brief Add this widget to the solver
 @param system the solver we want to add the widget to
 */
- (bool)addChildrenToSolverWithADXLinearSystem:(ADXLinearSystem *)system;

- (void)addHorizontalWrapMaxVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)right;

- (void)addHorizontalWrapMinVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)left;

- (void)defineTerminalWidgets;

- (bool)directMeasureWithBoolean:(bool)optimizeWrap;

- (bool)directMeasureSetupWithBoolean:(bool)optimizeWrap;

- (bool)directMeasureWithOrientationWithBoolean:(bool)optimizeWrap
                                        withInt:(int32_t)orientation;

- (void)fillMetricsWithADXMetrics:(ADXMetrics *)metrics;

/*!
 @brief Accessor to the horizontal guidelines contained in the table.
 @return array of guidelines
 */
- (JavaUtilArrayList *)getHorizontalGuidelines;

- (id<ADXBasicMeasure_Measurer>)getMeasurer;

/*!
 @brief Returns the current optimization level
 */
- (int32_t)getOptimizationLevel;

- (ADXLinearSystem *)getSystem;

/*!
 @brief Specify the xml type for the container
 */
- (NSString *)getType;

/*!
 @brief Accessor to the vertical guidelines contained in the table.
 @return array of guidelines
 */
- (JavaUtilArrayList *)getVerticalGuidelines;

/*!
 @brief Indicates if the container knows how to layout its content on its own
 @return true if the container does the layout, false otherwise
 */
- (bool)handlesInternalConstraints;

/*!
 @brief Invalidate the graph of constraints
 */
- (void)invalidateGraph;

/*!
 @brief Invalidate the widgets measures
 */
- (void)invalidateMeasures;

/*!
 @brief Return true if the height given is too small for the content laid out
 */
- (bool)isHeightMeasuredTooSmall;

/*!
 @brief Returns the rtl status.
 @return true if in RTL, false otherwise.
 */
- (bool)isRtl;

/*!
 @brief Return true if the width given is too small for the content laid out
 */
- (bool)isWidthMeasuredTooSmall;

/*!
 @brief Layout the tree of widgets
 */
- (void)layout;

+ (bool)measureWithInt:(int32_t)level
withADXConstraintWidget:(ADXConstraintWidget *)widget
withADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer
withADXBasicMeasure_Measure:(ADXBasicMeasure_Measure *)measure
               withInt:(int32_t)measureStrategy;

/*!
 @brief Measure the layout
 @param optimizationLevel
 @param widthMode
 @param widthSize
 @param heightMode
 @param heightSize
 @param paddingX
 @param paddingY
 */
- (int64_t)measureWithInt:(int32_t)optimizationLevel
                  withInt:(int32_t)widthMode
                  withInt:(int32_t)widthSize
                  withInt:(int32_t)heightMode
                  withInt:(int32_t)heightSize
                  withInt:(int32_t)lastMeasureWidth
                  withInt:(int32_t)lastMeasureHeight
                  withInt:(int32_t)paddingX
                  withInt:(int32_t)paddingY;

/*!
 @brief Returns true if the given feature should be optimized
 @param feature
 */
- (bool)optimizeForWithInt:(int32_t)feature;

- (void)release__;

- (void)reset;

- (void)setMeasurerWithADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer;

/*!
 @brief Resolves the system directly when possible
 @param value optimization level
 */
- (void)setOptimizationLevelWithInt:(int32_t)value;

/*!
 @brief Set the padding on this container.It will apply to the position of the children.
 @param left left padding
 @param top top padding
 @param right right padding
 @param bottom bottom padding
 */
- (void)setPaddingWithInt:(int32_t)left
                  withInt:(int32_t)top
                  withInt:(int32_t)right
                  withInt:(int32_t)bottom;

/*!
 @brief Keep track of the # of passes
 @param pass
 */
- (void)setPassWithInt:(int32_t)pass;

/*!
 @brief Set the rtl status.This has implications for Chains.
 @param isRtl true if we are in RTL.
 */
- (void)setRtlWithBoolean:(bool)isRtl;

/*!
 @brief Update the frame of the layout and its children from the solver
 @param system the solver we get the values from.
 */
- (bool)updateChildrenFromSolverWithADXLinearSystem:(ADXLinearSystem *)system
                                   withBooleanArray:(IOSBooleanArray *)flags;

- (void)updateFromRunsWithBoolean:(bool)updateHorizontal
                      withBoolean:(bool)updateVertical;

- (void)updateHierarchy;

#pragma mark Package-Private

/*!
 @brief Add the chain which constraintWidget is part of.Called by ConstraintWidget::addToSolver()
 @param constraintWidget
 @param type HORIZONTAL or VERTICAL chain
 */
- (void)addChainWithADXConstraintWidget:(ADXConstraintWidget *)constraintWidget
                                withInt:(int32_t)type;

- (void)addVerticalWrapMaxVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)bottom;

- (void)addVerticalWrapMinVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)top;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXConstraintWidgetContainer)

J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mBasicMeasureSolver_, ADXBasicMeasure *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mDependencyGraph_, ADXDependencyGraph *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mMeasurer_, id<ADXBasicMeasure_Measurer>)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mMetrics_, ADXMetrics *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mSystem_, ADXLinearSystem *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mVerticalChainsArray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mHorizontalChainsArray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, widgetsToAdd_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mMeasure_, ADXBasicMeasure_Measure *)

inline bool ADXConstraintWidgetContainer_get_DEBUG_GRAPH(void);
#define ADXConstraintWidgetContainer_DEBUG_GRAPH false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidgetContainer, DEBUG_GRAPH, bool)

inline int32_t ADXConstraintWidgetContainer_get_myCounter(void);
inline int32_t ADXConstraintWidgetContainer_set_myCounter(int32_t value);
inline int32_t *ADXConstraintWidgetContainer_getRef_myCounter(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int32_t ADXConstraintWidgetContainer_myCounter;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXConstraintWidgetContainer, myCounter, int32_t)

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_init(ADXConstraintWidgetContainer *self);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_init(void);

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(ADXConstraintWidgetContainer *self, int32_t x, int32_t y, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(int32_t x, int32_t y, int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(int32_t x, int32_t y, int32_t width, int32_t height);

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_initWithInt_withInt_(ADXConstraintWidgetContainer *self, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithInt_withInt_(int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithInt_withInt_(int32_t width, int32_t height);

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(ADXConstraintWidgetContainer *self, NSString *debugName, int32_t width, int32_t height);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(NSString *debugName, int32_t width, int32_t height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(NSString *debugName, int32_t width, int32_t height);

FOUNDATION_EXPORT bool ADXConstraintWidgetContainer_measureWithInt_withADXConstraintWidget_withADXBasicMeasure_Measurer_withADXBasicMeasure_Measure_withInt_(int32_t level, ADXConstraintWidget *widget, id<ADXBasicMeasure_Measurer> measurer, ADXBasicMeasure_Measure *measure, int32_t measureStrategy);

J2OBJC_TYPE_LITERAL_HEADER(ADXConstraintWidgetContainer)

@compatibility_alias AndroidxConstraintlayoutCoreWidgetsConstraintWidgetContainer ADXConstraintWidgetContainer;


#endif

#pragma pop_macro("INCLUDE_ALL_ConstraintWidgetContainer")
