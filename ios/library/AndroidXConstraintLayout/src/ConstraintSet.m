//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\widget\ConstraintSet.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Barrier.h"
#include "Build.h"
#include "CLDebug.h"
#include "ConstraintAttribute.h"
#include "ConstraintHelper.h"
#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "ConstraintWidget.h"
#include "Constraints.h"
#include "Context.h"
#include "Guideline.h"
#include "HelperWidget.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "R.h"
#include "Resources.h"
#include "SparseArray.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXConstraintSet () {
 @public
  bool mValidate_;
  JavaUtilHashMap *mSavedAttributes_;
  bool mForceId_;
  JavaUtilHashMap *mConstraints_;
}

- (void)createHorizontalChainWithInt:(int32_t)leftId
                             withInt:(int32_t)leftSide
                             withInt:(int32_t)rightId
                             withInt:(int32_t)rightSide
                        withIntArray:(IOSIntArray *)chainIds
                      withFloatArray:(IOSFloatArray *)weights
                             withInt:(int32_t)style
                             withInt:(int32_t)left
                             withInt:(int32_t)right;

- (NSString *)sideToStringWithInt:(int32_t)side;

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                           withFloat:(float)value;

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                             withInt:(int32_t)value;

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                        withNSString:(NSString *)value;

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                         withBoolean:(bool)value;

- (IOSIntArray *)convertReferenceStringWithADView:(ADView *)view
                                     withNSString:(NSString *)referenceIdString;

@end

J2OBJC_FIELD_SETTER(ADXConstraintSet, mSavedAttributes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXConstraintSet, mConstraints_, JavaUtilHashMap *)

inline NSString *ADXConstraintSet_get_TAG(void);
static NSString *ADXConstraintSet_TAG = @"ConstraintSet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXConstraintSet, TAG, NSString *)

inline NSString *ADXConstraintSet_get_ERROR_MESSAGE(void);
static NSString *ADXConstraintSet_ERROR_MESSAGE = @"XML parser error must be within a Constraint ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXConstraintSet, ERROR_MESSAGE, NSString *)

inline int32_t ADXConstraintSet_get_INTERNAL_MATCH_PARENT(void);
#define ADXConstraintSet_INTERNAL_MATCH_PARENT -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, INTERNAL_MATCH_PARENT, int32_t)

inline int32_t ADXConstraintSet_get_INTERNAL_WRAP_CONTENT(void);
#define ADXConstraintSet_INTERNAL_WRAP_CONTENT -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, INTERNAL_WRAP_CONTENT, int32_t)

inline int32_t ADXConstraintSet_get_INTERNAL_MATCH_CONSTRAINT(void);
#define ADXConstraintSet_INTERNAL_MATCH_CONSTRAINT -3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, INTERNAL_MATCH_CONSTRAINT, int32_t)

inline int32_t ADXConstraintSet_get_INTERNAL_WRAP_CONTENT_CONSTRAINED(void);
#define ADXConstraintSet_INTERNAL_WRAP_CONTENT_CONSTRAINED -4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, INTERNAL_WRAP_CONTENT_CONSTRAINED, int32_t)

inline bool ADXConstraintSet_get_DEBUG(void);
#define ADXConstraintSet_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, DEBUG, bool)

inline int32_t ADXConstraintSet_get_BARRIER_TYPE(void);
#define ADXConstraintSet_BARRIER_TYPE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BARRIER_TYPE, int32_t)

inline int32_t ADXConstraintSet_get_BASELINE_TO_BASELINE(void);
#define ADXConstraintSet_BASELINE_TO_BASELINE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BASELINE_TO_BASELINE, int32_t)

inline int32_t ADXConstraintSet_get_BOTTOM_MARGIN(void);
#define ADXConstraintSet_BOTTOM_MARGIN 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BOTTOM_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_BOTTOM_TO_BOTTOM(void);
#define ADXConstraintSet_BOTTOM_TO_BOTTOM 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BOTTOM_TO_BOTTOM, int32_t)

inline int32_t ADXConstraintSet_get_BOTTOM_TO_TOP(void);
#define ADXConstraintSet_BOTTOM_TO_TOP 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BOTTOM_TO_TOP, int32_t)

inline int32_t ADXConstraintSet_get_DIMENSION_RATIO(void);
#define ADXConstraintSet_DIMENSION_RATIO 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, DIMENSION_RATIO, int32_t)

inline int32_t ADXConstraintSet_get_EDITOR_ABSOLUTE_X(void);
#define ADXConstraintSet_EDITOR_ABSOLUTE_X 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, EDITOR_ABSOLUTE_X, int32_t)

inline int32_t ADXConstraintSet_get_EDITOR_ABSOLUTE_Y(void);
#define ADXConstraintSet_EDITOR_ABSOLUTE_Y 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, EDITOR_ABSOLUTE_Y, int32_t)

inline int32_t ADXConstraintSet_get_END_MARGIN(void);
#define ADXConstraintSet_END_MARGIN 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, END_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_END_TO_END(void);
#define ADXConstraintSet_END_TO_END 9
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, END_TO_END, int32_t)

inline int32_t ADXConstraintSet_get_END_TO_START(void);
#define ADXConstraintSet_END_TO_START 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, END_TO_START, int32_t)

inline int32_t ADXConstraintSet_get_GONE_BOTTOM_MARGIN(void);
#define ADXConstraintSet_GONE_BOTTOM_MARGIN 11
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_BOTTOM_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GONE_END_MARGIN(void);
#define ADXConstraintSet_GONE_END_MARGIN 12
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_END_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GONE_LEFT_MARGIN(void);
#define ADXConstraintSet_GONE_LEFT_MARGIN 13
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_LEFT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GONE_RIGHT_MARGIN(void);
#define ADXConstraintSet_GONE_RIGHT_MARGIN 14
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_RIGHT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GONE_START_MARGIN(void);
#define ADXConstraintSet_GONE_START_MARGIN 15
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_START_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GONE_TOP_MARGIN(void);
#define ADXConstraintSet_GONE_TOP_MARGIN 16
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_TOP_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GUIDE_BEGIN(void);
#define ADXConstraintSet_GUIDE_BEGIN 17
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GUIDE_BEGIN, int32_t)

inline int32_t ADXConstraintSet_get_GUIDE_END(void);
#define ADXConstraintSet_GUIDE_END 18
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GUIDE_END, int32_t)

inline int32_t ADXConstraintSet_get_GUIDE_PERCENT(void);
#define ADXConstraintSet_GUIDE_PERCENT 19
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GUIDE_PERCENT, int32_t)

inline int32_t ADXConstraintSet_get_HORIZONTAL_BIAS(void);
#define ADXConstraintSet_HORIZONTAL_BIAS 20
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HORIZONTAL_BIAS, int32_t)

inline int32_t ADXConstraintSet_get_LAYOUT_HEIGHT(void);
#define ADXConstraintSet_LAYOUT_HEIGHT 21
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LAYOUT_HEIGHT, int32_t)

inline int32_t ADXConstraintSet_get_LAYOUT_VISIBILITY(void);
#define ADXConstraintSet_LAYOUT_VISIBILITY 22
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LAYOUT_VISIBILITY, int32_t)

inline int32_t ADXConstraintSet_get_LAYOUT_WIDTH(void);
#define ADXConstraintSet_LAYOUT_WIDTH 23
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LAYOUT_WIDTH, int32_t)

inline int32_t ADXConstraintSet_get_LEFT_MARGIN(void);
#define ADXConstraintSet_LEFT_MARGIN 24
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LEFT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_LEFT_TO_LEFT(void);
#define ADXConstraintSet_LEFT_TO_LEFT 25
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LEFT_TO_LEFT, int32_t)

inline int32_t ADXConstraintSet_get_LEFT_TO_RIGHT(void);
#define ADXConstraintSet_LEFT_TO_RIGHT 26
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LEFT_TO_RIGHT, int32_t)

inline int32_t ADXConstraintSet_get_ORIENTATION(void);
#define ADXConstraintSet_ORIENTATION 27
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ORIENTATION, int32_t)

inline int32_t ADXConstraintSet_get_RIGHT_MARGIN(void);
#define ADXConstraintSet_RIGHT_MARGIN 28
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, RIGHT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_RIGHT_TO_LEFT(void);
#define ADXConstraintSet_RIGHT_TO_LEFT 29
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, RIGHT_TO_LEFT, int32_t)

inline int32_t ADXConstraintSet_get_RIGHT_TO_RIGHT(void);
#define ADXConstraintSet_RIGHT_TO_RIGHT 30
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, RIGHT_TO_RIGHT, int32_t)

inline int32_t ADXConstraintSet_get_START_MARGIN(void);
#define ADXConstraintSet_START_MARGIN 31
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, START_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_START_TO_END(void);
#define ADXConstraintSet_START_TO_END 32
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, START_TO_END, int32_t)

inline int32_t ADXConstraintSet_get_START_TO_START(void);
#define ADXConstraintSet_START_TO_START 33
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, START_TO_START, int32_t)

inline int32_t ADXConstraintSet_get_TOP_MARGIN(void);
#define ADXConstraintSet_TOP_MARGIN 34
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TOP_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_TOP_TO_BOTTOM(void);
#define ADXConstraintSet_TOP_TO_BOTTOM 35
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TOP_TO_BOTTOM, int32_t)

inline int32_t ADXConstraintSet_get_TOP_TO_TOP(void);
#define ADXConstraintSet_TOP_TO_TOP 36
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TOP_TO_TOP, int32_t)

inline int32_t ADXConstraintSet_get_VERTICAL_BIAS(void);
#define ADXConstraintSet_VERTICAL_BIAS 37
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, VERTICAL_BIAS, int32_t)

inline int32_t ADXConstraintSet_get_VIEW_ID(void);
#define ADXConstraintSet_VIEW_ID 38
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, VIEW_ID, int32_t)

inline int32_t ADXConstraintSet_get_HORIZONTAL_WEIGHT(void);
#define ADXConstraintSet_HORIZONTAL_WEIGHT 39
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HORIZONTAL_WEIGHT, int32_t)

inline int32_t ADXConstraintSet_get_VERTICAL_WEIGHT(void);
#define ADXConstraintSet_VERTICAL_WEIGHT 40
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, VERTICAL_WEIGHT, int32_t)

inline int32_t ADXConstraintSet_get_HORIZONTAL_STYLE(void);
#define ADXConstraintSet_HORIZONTAL_STYLE 41
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HORIZONTAL_STYLE, int32_t)

inline int32_t ADXConstraintSet_get_VERTICAL_STYLE(void);
#define ADXConstraintSet_VERTICAL_STYLE 42
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, VERTICAL_STYLE, int32_t)

inline int32_t ADXConstraintSet_get_ALPHA(void);
#define ADXConstraintSet_ALPHA 43
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ALPHA, int32_t)

inline int32_t ADXConstraintSet_get_ELEVATION(void);
#define ADXConstraintSet_ELEVATION 44
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ELEVATION, int32_t)

inline int32_t ADXConstraintSet_get_ROTATION_X(void);
#define ADXConstraintSet_ROTATION_X 45
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ROTATION_X, int32_t)

inline int32_t ADXConstraintSet_get_ROTATION_Y(void);
#define ADXConstraintSet_ROTATION_Y 46
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ROTATION_Y, int32_t)

inline int32_t ADXConstraintSet_get_SCALE_X(void);
#define ADXConstraintSet_SCALE_X 47
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, SCALE_X, int32_t)

inline int32_t ADXConstraintSet_get_SCALE_Y(void);
#define ADXConstraintSet_SCALE_Y 48
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, SCALE_Y, int32_t)

inline int32_t ADXConstraintSet_get_TRANSFORM_PIVOT_X(void);
#define ADXConstraintSet_TRANSFORM_PIVOT_X 49
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSFORM_PIVOT_X, int32_t)

inline int32_t ADXConstraintSet_get_TRANSFORM_PIVOT_Y(void);
#define ADXConstraintSet_TRANSFORM_PIVOT_Y 50
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSFORM_PIVOT_Y, int32_t)

inline int32_t ADXConstraintSet_get_TRANSLATION_X(void);
#define ADXConstraintSet_TRANSLATION_X 51
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSLATION_X, int32_t)

inline int32_t ADXConstraintSet_get_TRANSLATION_Y(void);
#define ADXConstraintSet_TRANSLATION_Y 52
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSLATION_Y, int32_t)

inline int32_t ADXConstraintSet_get_TRANSLATION_Z(void);
#define ADXConstraintSet_TRANSLATION_Z 53
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSLATION_Z, int32_t)

inline int32_t ADXConstraintSet_get_WIDTH_DEFAULT(void);
#define ADXConstraintSet_WIDTH_DEFAULT 54
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, WIDTH_DEFAULT, int32_t)

inline int32_t ADXConstraintSet_get_HEIGHT_DEFAULT(void);
#define ADXConstraintSet_HEIGHT_DEFAULT 55
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HEIGHT_DEFAULT, int32_t)

inline int32_t ADXConstraintSet_get_WIDTH_MAX(void);
#define ADXConstraintSet_WIDTH_MAX 56
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, WIDTH_MAX, int32_t)

inline int32_t ADXConstraintSet_get_HEIGHT_MAX(void);
#define ADXConstraintSet_HEIGHT_MAX 57
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HEIGHT_MAX, int32_t)

inline int32_t ADXConstraintSet_get_WIDTH_MIN(void);
#define ADXConstraintSet_WIDTH_MIN 58
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, WIDTH_MIN, int32_t)

inline int32_t ADXConstraintSet_get_HEIGHT_MIN(void);
#define ADXConstraintSet_HEIGHT_MIN 59
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HEIGHT_MIN, int32_t)

inline int32_t ADXConstraintSet_get_ROTATION(void);
#define ADXConstraintSet_ROTATION 60
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ROTATION, int32_t)

inline int32_t ADXConstraintSet_get_CIRCLE(void);
#define ADXConstraintSet_CIRCLE 61
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CIRCLE, int32_t)

inline int32_t ADXConstraintSet_get_CIRCLE_RADIUS(void);
#define ADXConstraintSet_CIRCLE_RADIUS 62
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CIRCLE_RADIUS, int32_t)

inline int32_t ADXConstraintSet_get_CIRCLE_ANGLE(void);
#define ADXConstraintSet_CIRCLE_ANGLE 63
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CIRCLE_ANGLE, int32_t)

inline int32_t ADXConstraintSet_get_ANIMATE_RELATIVE_TO(void);
#define ADXConstraintSet_ANIMATE_RELATIVE_TO 64
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ANIMATE_RELATIVE_TO, int32_t)

inline int32_t ADXConstraintSet_get_TRANSITION_EASING(void);
#define ADXConstraintSet_TRANSITION_EASING 65
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSITION_EASING, int32_t)

inline int32_t ADXConstraintSet_get_DRAW_PATH(void);
#define ADXConstraintSet_DRAW_PATH 66
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, DRAW_PATH, int32_t)

inline int32_t ADXConstraintSet_get_TRANSITION_PATH_ROTATE(void);
#define ADXConstraintSet_TRANSITION_PATH_ROTATE 67
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSITION_PATH_ROTATE, int32_t)

inline int32_t ADXConstraintSet_get_PROGRESS(void);
#define ADXConstraintSet_PROGRESS 68
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, PROGRESS, int32_t)

inline int32_t ADXConstraintSet_get_WIDTH_PERCENT(void);
#define ADXConstraintSet_WIDTH_PERCENT 69
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, WIDTH_PERCENT, int32_t)

inline int32_t ADXConstraintSet_get_HEIGHT_PERCENT(void);
#define ADXConstraintSet_HEIGHT_PERCENT 70
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, HEIGHT_PERCENT, int32_t)

inline int32_t ADXConstraintSet_get_CHAIN_USE_RTL(void);
#define ADXConstraintSet_CHAIN_USE_RTL 71
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CHAIN_USE_RTL, int32_t)

inline int32_t ADXConstraintSet_get_BARRIER_DIRECTION(void);
#define ADXConstraintSet_BARRIER_DIRECTION 72
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BARRIER_DIRECTION, int32_t)

inline int32_t ADXConstraintSet_get_BARRIER_MARGIN(void);
#define ADXConstraintSet_BARRIER_MARGIN 73
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BARRIER_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_CONSTRAINT_REFERENCED_IDS(void);
#define ADXConstraintSet_CONSTRAINT_REFERENCED_IDS 74
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CONSTRAINT_REFERENCED_IDS, int32_t)

inline int32_t ADXConstraintSet_get_BARRIER_ALLOWS_GONE_WIDGETS(void);
#define ADXConstraintSet_BARRIER_ALLOWS_GONE_WIDGETS 75
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BARRIER_ALLOWS_GONE_WIDGETS, int32_t)

inline int32_t ADXConstraintSet_get_PATH_MOTION_ARC(void);
#define ADXConstraintSet_PATH_MOTION_ARC 76
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, PATH_MOTION_ARC, int32_t)

inline int32_t ADXConstraintSet_get_CONSTRAINT_TAG(void);
#define ADXConstraintSet_CONSTRAINT_TAG 77
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CONSTRAINT_TAG, int32_t)

inline int32_t ADXConstraintSet_get_VISIBILITY_MODE(void);
#define ADXConstraintSet_VISIBILITY_MODE 78
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, VISIBILITY_MODE, int32_t)

inline int32_t ADXConstraintSet_get_MOTION_STAGGER(void);
#define ADXConstraintSet_MOTION_STAGGER 79
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, MOTION_STAGGER, int32_t)

inline int32_t ADXConstraintSet_get_CONSTRAINED_WIDTH(void);
#define ADXConstraintSet_CONSTRAINED_WIDTH 80
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CONSTRAINED_WIDTH, int32_t)

inline int32_t ADXConstraintSet_get_CONSTRAINED_HEIGHT(void);
#define ADXConstraintSet_CONSTRAINED_HEIGHT 81
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, CONSTRAINED_HEIGHT, int32_t)

inline int32_t ADXConstraintSet_get_ANIMATE_CIRCLE_ANGLE_TO(void);
#define ADXConstraintSet_ANIMATE_CIRCLE_ANGLE_TO 82
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, ANIMATE_CIRCLE_ANGLE_TO, int32_t)

inline int32_t ADXConstraintSet_get_TRANSFORM_PIVOT_TARGET(void);
#define ADXConstraintSet_TRANSFORM_PIVOT_TARGET 83
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, TRANSFORM_PIVOT_TARGET, int32_t)

inline int32_t ADXConstraintSet_get_QUANTIZE_MOTION_STEPS(void);
#define ADXConstraintSet_QUANTIZE_MOTION_STEPS 84
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, QUANTIZE_MOTION_STEPS, int32_t)

inline int32_t ADXConstraintSet_get_QUANTIZE_MOTION_PHASE(void);
#define ADXConstraintSet_QUANTIZE_MOTION_PHASE 85
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, QUANTIZE_MOTION_PHASE, int32_t)

inline int32_t ADXConstraintSet_get_QUANTIZE_MOTION_INTERPOLATOR(void);
#define ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR 86
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, QUANTIZE_MOTION_INTERPOLATOR, int32_t)

inline int32_t ADXConstraintSet_get_UNUSED(void);
#define ADXConstraintSet_UNUSED 87
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, UNUSED, int32_t)

inline int32_t ADXConstraintSet_get_QUANTIZE_MOTION_INTERPOLATOR_TYPE(void);
#define ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_TYPE 88
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, QUANTIZE_MOTION_INTERPOLATOR_TYPE, int32_t)

inline int32_t ADXConstraintSet_get_QUANTIZE_MOTION_INTERPOLATOR_ID(void);
#define ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_ID 89
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, QUANTIZE_MOTION_INTERPOLATOR_ID, int32_t)

inline int32_t ADXConstraintSet_get_QUANTIZE_MOTION_INTERPOLATOR_STR(void);
#define ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_STR 90
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, QUANTIZE_MOTION_INTERPOLATOR_STR, int32_t)

inline int32_t ADXConstraintSet_get_BASELINE_TO_TOP(void);
#define ADXConstraintSet_BASELINE_TO_TOP 91
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BASELINE_TO_TOP, int32_t)

inline int32_t ADXConstraintSet_get_BASELINE_TO_BOTTOM(void);
#define ADXConstraintSet_BASELINE_TO_BOTTOM 92
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BASELINE_TO_BOTTOM, int32_t)

inline int32_t ADXConstraintSet_get_BASELINE_MARGIN(void);
#define ADXConstraintSet_BASELINE_MARGIN 93
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, BASELINE_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_GONE_BASELINE_MARGIN(void);
#define ADXConstraintSet_GONE_BASELINE_MARGIN 94
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, GONE_BASELINE_MARGIN, int32_t)

inline int32_t ADXConstraintSet_get_LAYOUT_CONSTRAINT_WIDTH(void);
#define ADXConstraintSet_LAYOUT_CONSTRAINT_WIDTH 95
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LAYOUT_CONSTRAINT_WIDTH, int32_t)

inline int32_t ADXConstraintSet_get_LAYOUT_CONSTRAINT_HEIGHT(void);
#define ADXConstraintSet_LAYOUT_CONSTRAINT_HEIGHT 96
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LAYOUT_CONSTRAINT_HEIGHT, int32_t)

inline int32_t ADXConstraintSet_get_LAYOUT_WRAP_BEHAVIOR(void);
#define ADXConstraintSet_LAYOUT_WRAP_BEHAVIOR 97
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, LAYOUT_WRAP_BEHAVIOR, int32_t)

inline int32_t ADXConstraintSet_get_MOTION_TARGET(void);
#define ADXConstraintSet_MOTION_TARGET 98
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet, MOTION_TARGET, int32_t)

inline NSString *ADXConstraintSet_get_KEY_WEIGHT(void);
static NSString *ADXConstraintSet_KEY_WEIGHT = @"weight";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXConstraintSet, KEY_WEIGHT, NSString *)

inline NSString *ADXConstraintSet_get_KEY_RATIO(void);
static NSString *ADXConstraintSet_KEY_RATIO = @"ratio";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXConstraintSet, KEY_RATIO, NSString *)

inline NSString *ADXConstraintSet_get_KEY_PERCENT_PARENT(void);
static NSString *ADXConstraintSet_KEY_PERCENT_PARENT = @"parent";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXConstraintSet, KEY_PERCENT_PARENT, NSString *)

__attribute__((unused)) static void ADXConstraintSet_createHorizontalChainWithInt_withInt_withInt_withInt_withIntArray_withFloatArray_withInt_withInt_withInt_(ADXConstraintSet *self, int32_t leftId, int32_t leftSide, int32_t rightId, int32_t rightSide, IOSIntArray *chainIds, IOSFloatArray *weights, int32_t style, int32_t left, int32_t right);

__attribute__((unused)) static NSString *ADXConstraintSet_sideToStringWithInt_(ADXConstraintSet *self, int32_t side);

__attribute__((unused)) static void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withFloat_(ADXConstraintSet_Constraint *c, int32_t type, float value);

__attribute__((unused)) static void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withInt_(ADXConstraintSet_Constraint *c, int32_t type, int32_t value);

__attribute__((unused)) static void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withNSString_(ADXConstraintSet_Constraint *c, int32_t type, NSString *value);

__attribute__((unused)) static void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withBoolean_(ADXConstraintSet_Constraint *c, int32_t type, bool value);

__attribute__((unused)) static IOSIntArray *ADXConstraintSet_convertReferenceStringWithADView_withNSString_(ADXConstraintSet *self, ADView *view, NSString *referenceIdString);

inline int32_t ADXConstraintSet_Layout_get_BASELINE_TO_BASELINE(void);
#define ADXConstraintSet_Layout_BASELINE_TO_BASELINE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BASELINE_TO_BASELINE, int32_t)

inline int32_t ADXConstraintSet_Layout_get_BOTTOM_MARGIN(void);
#define ADXConstraintSet_Layout_BOTTOM_MARGIN 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BOTTOM_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_BOTTOM_TO_BOTTOM(void);
#define ADXConstraintSet_Layout_BOTTOM_TO_BOTTOM 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BOTTOM_TO_BOTTOM, int32_t)

inline int32_t ADXConstraintSet_Layout_get_BOTTOM_TO_TOP(void);
#define ADXConstraintSet_Layout_BOTTOM_TO_TOP 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BOTTOM_TO_TOP, int32_t)

inline int32_t ADXConstraintSet_Layout_get_DIMENSION_RATIO(void);
#define ADXConstraintSet_Layout_DIMENSION_RATIO 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, DIMENSION_RATIO, int32_t)

inline int32_t ADXConstraintSet_Layout_get_EDITOR_ABSOLUTE_X(void);
#define ADXConstraintSet_Layout_EDITOR_ABSOLUTE_X 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, EDITOR_ABSOLUTE_X, int32_t)

inline int32_t ADXConstraintSet_Layout_get_EDITOR_ABSOLUTE_Y(void);
#define ADXConstraintSet_Layout_EDITOR_ABSOLUTE_Y 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, EDITOR_ABSOLUTE_Y, int32_t)

inline int32_t ADXConstraintSet_Layout_get_END_MARGIN(void);
#define ADXConstraintSet_Layout_END_MARGIN 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, END_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_END_TO_END(void);
#define ADXConstraintSet_Layout_END_TO_END 9
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, END_TO_END, int32_t)

inline int32_t ADXConstraintSet_Layout_get_END_TO_START(void);
#define ADXConstraintSet_Layout_END_TO_START 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, END_TO_START, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GONE_BOTTOM_MARGIN(void);
#define ADXConstraintSet_Layout_GONE_BOTTOM_MARGIN 11
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GONE_BOTTOM_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GONE_END_MARGIN(void);
#define ADXConstraintSet_Layout_GONE_END_MARGIN 12
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GONE_END_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GONE_LEFT_MARGIN(void);
#define ADXConstraintSet_Layout_GONE_LEFT_MARGIN 13
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GONE_LEFT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GONE_RIGHT_MARGIN(void);
#define ADXConstraintSet_Layout_GONE_RIGHT_MARGIN 14
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GONE_RIGHT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GONE_START_MARGIN(void);
#define ADXConstraintSet_Layout_GONE_START_MARGIN 15
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GONE_START_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GONE_TOP_MARGIN(void);
#define ADXConstraintSet_Layout_GONE_TOP_MARGIN 16
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GONE_TOP_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GUIDE_BEGIN(void);
#define ADXConstraintSet_Layout_GUIDE_BEGIN 17
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GUIDE_BEGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GUIDE_END(void);
#define ADXConstraintSet_Layout_GUIDE_END 18
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GUIDE_END, int32_t)

inline int32_t ADXConstraintSet_Layout_get_GUIDE_PERCENT(void);
#define ADXConstraintSet_Layout_GUIDE_PERCENT 19
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, GUIDE_PERCENT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_HORIZONTAL_BIAS(void);
#define ADXConstraintSet_Layout_HORIZONTAL_BIAS 20
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, HORIZONTAL_BIAS, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LAYOUT_HEIGHT(void);
#define ADXConstraintSet_Layout_LAYOUT_HEIGHT 21
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LAYOUT_HEIGHT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LAYOUT_WIDTH(void);
#define ADXConstraintSet_Layout_LAYOUT_WIDTH 22
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LAYOUT_WIDTH, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LEFT_MARGIN(void);
#define ADXConstraintSet_Layout_LEFT_MARGIN 23
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LEFT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LEFT_TO_LEFT(void);
#define ADXConstraintSet_Layout_LEFT_TO_LEFT 24
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LEFT_TO_LEFT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LEFT_TO_RIGHT(void);
#define ADXConstraintSet_Layout_LEFT_TO_RIGHT 25
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LEFT_TO_RIGHT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_ORIENTATION(void);
#define ADXConstraintSet_Layout_ORIENTATION 26
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, ORIENTATION, int32_t)

inline int32_t ADXConstraintSet_Layout_get_RIGHT_MARGIN(void);
#define ADXConstraintSet_Layout_RIGHT_MARGIN 27
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, RIGHT_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_RIGHT_TO_LEFT(void);
#define ADXConstraintSet_Layout_RIGHT_TO_LEFT 28
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, RIGHT_TO_LEFT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_RIGHT_TO_RIGHT(void);
#define ADXConstraintSet_Layout_RIGHT_TO_RIGHT 29
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, RIGHT_TO_RIGHT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_START_MARGIN(void);
#define ADXConstraintSet_Layout_START_MARGIN 30
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, START_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_START_TO_END(void);
#define ADXConstraintSet_Layout_START_TO_END 31
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, START_TO_END, int32_t)

inline int32_t ADXConstraintSet_Layout_get_START_TO_START(void);
#define ADXConstraintSet_Layout_START_TO_START 32
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, START_TO_START, int32_t)

inline int32_t ADXConstraintSet_Layout_get_TOP_MARGIN(void);
#define ADXConstraintSet_Layout_TOP_MARGIN 33
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, TOP_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_TOP_TO_BOTTOM(void);
#define ADXConstraintSet_Layout_TOP_TO_BOTTOM 34
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, TOP_TO_BOTTOM, int32_t)

inline int32_t ADXConstraintSet_Layout_get_TOP_TO_TOP(void);
#define ADXConstraintSet_Layout_TOP_TO_TOP 35
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, TOP_TO_TOP, int32_t)

inline int32_t ADXConstraintSet_Layout_get_VERTICAL_BIAS(void);
#define ADXConstraintSet_Layout_VERTICAL_BIAS 36
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, VERTICAL_BIAS, int32_t)

inline int32_t ADXConstraintSet_Layout_get_HORIZONTAL_WEIGHT(void);
#define ADXConstraintSet_Layout_HORIZONTAL_WEIGHT 37
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, HORIZONTAL_WEIGHT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_VERTICAL_WEIGHT(void);
#define ADXConstraintSet_Layout_VERTICAL_WEIGHT 38
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, VERTICAL_WEIGHT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_HORIZONTAL_STYLE(void);
#define ADXConstraintSet_Layout_HORIZONTAL_STYLE 39
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, HORIZONTAL_STYLE, int32_t)

inline int32_t ADXConstraintSet_Layout_get_VERTICAL_STYLE(void);
#define ADXConstraintSet_Layout_VERTICAL_STYLE 40
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, VERTICAL_STYLE, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LAYOUT_CONSTRAINT_WIDTH(void);
#define ADXConstraintSet_Layout_LAYOUT_CONSTRAINT_WIDTH 41
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LAYOUT_CONSTRAINT_WIDTH, int32_t)

inline int32_t ADXConstraintSet_Layout_get_LAYOUT_CONSTRAINT_HEIGHT(void);
#define ADXConstraintSet_Layout_LAYOUT_CONSTRAINT_HEIGHT 42
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, LAYOUT_CONSTRAINT_HEIGHT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_CIRCLE(void);
#define ADXConstraintSet_Layout_CIRCLE 61
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, CIRCLE, int32_t)

inline int32_t ADXConstraintSet_Layout_get_CIRCLE_RADIUS(void);
#define ADXConstraintSet_Layout_CIRCLE_RADIUS 62
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, CIRCLE_RADIUS, int32_t)

inline int32_t ADXConstraintSet_Layout_get_CIRCLE_ANGLE(void);
#define ADXConstraintSet_Layout_CIRCLE_ANGLE 63
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, CIRCLE_ANGLE, int32_t)

inline int32_t ADXConstraintSet_Layout_get_WIDTH_PERCENT(void);
#define ADXConstraintSet_Layout_WIDTH_PERCENT 69
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, WIDTH_PERCENT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_HEIGHT_PERCENT(void);
#define ADXConstraintSet_Layout_HEIGHT_PERCENT 70
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, HEIGHT_PERCENT, int32_t)

inline int32_t ADXConstraintSet_Layout_get_CHAIN_USE_RTL(void);
#define ADXConstraintSet_Layout_CHAIN_USE_RTL 71
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, CHAIN_USE_RTL, int32_t)

inline int32_t ADXConstraintSet_Layout_get_BARRIER_DIRECTION(void);
#define ADXConstraintSet_Layout_BARRIER_DIRECTION 72
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BARRIER_DIRECTION, int32_t)

inline int32_t ADXConstraintSet_Layout_get_BARRIER_MARGIN(void);
#define ADXConstraintSet_Layout_BARRIER_MARGIN 73
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BARRIER_MARGIN, int32_t)

inline int32_t ADXConstraintSet_Layout_get_CONSTRAINT_REFERENCED_IDS(void);
#define ADXConstraintSet_Layout_CONSTRAINT_REFERENCED_IDS 74
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, CONSTRAINT_REFERENCED_IDS, int32_t)

inline int32_t ADXConstraintSet_Layout_get_BARRIER_ALLOWS_GONE_WIDGETS(void);
#define ADXConstraintSet_Layout_BARRIER_ALLOWS_GONE_WIDGETS 75
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, BARRIER_ALLOWS_GONE_WIDGETS, int32_t)

inline int32_t ADXConstraintSet_Layout_get_UNUSED(void);
#define ADXConstraintSet_Layout_UNUSED 76
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Layout, UNUSED, int32_t)

inline int32_t ADXConstraintSet_Transform_get_ROTATION(void);
#define ADXConstraintSet_Transform_ROTATION 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, ROTATION, int32_t)

inline int32_t ADXConstraintSet_Transform_get_ROTATION_X(void);
#define ADXConstraintSet_Transform_ROTATION_X 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, ROTATION_X, int32_t)

inline int32_t ADXConstraintSet_Transform_get_ROTATION_Y(void);
#define ADXConstraintSet_Transform_ROTATION_Y 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, ROTATION_Y, int32_t)

inline int32_t ADXConstraintSet_Transform_get_SCALE_X(void);
#define ADXConstraintSet_Transform_SCALE_X 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, SCALE_X, int32_t)

inline int32_t ADXConstraintSet_Transform_get_SCALE_Y(void);
#define ADXConstraintSet_Transform_SCALE_Y 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, SCALE_Y, int32_t)

inline int32_t ADXConstraintSet_Transform_get_TRANSFORM_PIVOT_X(void);
#define ADXConstraintSet_Transform_TRANSFORM_PIVOT_X 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, TRANSFORM_PIVOT_X, int32_t)

inline int32_t ADXConstraintSet_Transform_get_TRANSFORM_PIVOT_Y(void);
#define ADXConstraintSet_Transform_TRANSFORM_PIVOT_Y 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, TRANSFORM_PIVOT_Y, int32_t)

inline int32_t ADXConstraintSet_Transform_get_TRANSLATION_X(void);
#define ADXConstraintSet_Transform_TRANSLATION_X 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, TRANSLATION_X, int32_t)

inline int32_t ADXConstraintSet_Transform_get_TRANSLATION_Y(void);
#define ADXConstraintSet_Transform_TRANSLATION_Y 9
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, TRANSLATION_Y, int32_t)

inline int32_t ADXConstraintSet_Transform_get_TRANSLATION_Z(void);
#define ADXConstraintSet_Transform_TRANSLATION_Z 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, TRANSLATION_Z, int32_t)

inline int32_t ADXConstraintSet_Transform_get_ELEVATION(void);
#define ADXConstraintSet_Transform_ELEVATION 11
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, ELEVATION, int32_t)

inline int32_t ADXConstraintSet_Transform_get_TRANSFORM_PIVOT_TARGET(void);
#define ADXConstraintSet_Transform_TRANSFORM_PIVOT_TARGET 12
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Transform, TRANSFORM_PIVOT_TARGET, int32_t)

inline int32_t ADXConstraintSet_Motion_get_INTERPOLATOR_REFERENCE_ID(void);
#define ADXConstraintSet_Motion_INTERPOLATOR_REFERENCE_ID -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, INTERPOLATOR_REFERENCE_ID, int32_t)

inline int32_t ADXConstraintSet_Motion_get_SPLINE_STRING(void);
#define ADXConstraintSet_Motion_SPLINE_STRING -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, SPLINE_STRING, int32_t)

inline int32_t ADXConstraintSet_Motion_get_INTERPOLATOR_UNDEFINED(void);
#define ADXConstraintSet_Motion_INTERPOLATOR_UNDEFINED -3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, INTERPOLATOR_UNDEFINED, int32_t)

inline int32_t ADXConstraintSet_Motion_get_TRANSITION_PATH_ROTATE(void);
#define ADXConstraintSet_Motion_TRANSITION_PATH_ROTATE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, TRANSITION_PATH_ROTATE, int32_t)

inline int32_t ADXConstraintSet_Motion_get_PATH_MOTION_ARC(void);
#define ADXConstraintSet_Motion_PATH_MOTION_ARC 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, PATH_MOTION_ARC, int32_t)

inline int32_t ADXConstraintSet_Motion_get_TRANSITION_EASING(void);
#define ADXConstraintSet_Motion_TRANSITION_EASING 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, TRANSITION_EASING, int32_t)

inline int32_t ADXConstraintSet_Motion_get_MOTION_DRAW_PATH(void);
#define ADXConstraintSet_Motion_MOTION_DRAW_PATH 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, MOTION_DRAW_PATH, int32_t)

inline int32_t ADXConstraintSet_Motion_get_ANIMATE_RELATIVE_TO(void);
#define ADXConstraintSet_Motion_ANIMATE_RELATIVE_TO 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, ANIMATE_RELATIVE_TO, int32_t)

inline int32_t ADXConstraintSet_Motion_get_ANIMATE_CIRCLE_ANGLE_TO(void);
#define ADXConstraintSet_Motion_ANIMATE_CIRCLE_ANGLE_TO 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, ANIMATE_CIRCLE_ANGLE_TO, int32_t)

inline int32_t ADXConstraintSet_Motion_get_MOTION_STAGGER(void);
#define ADXConstraintSet_Motion_MOTION_STAGGER 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, MOTION_STAGGER, int32_t)

inline int32_t ADXConstraintSet_Motion_get_QUANTIZE_MOTION_STEPS(void);
#define ADXConstraintSet_Motion_QUANTIZE_MOTION_STEPS 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, QUANTIZE_MOTION_STEPS, int32_t)

inline int32_t ADXConstraintSet_Motion_get_QUANTIZE_MOTION_PHASE(void);
#define ADXConstraintSet_Motion_QUANTIZE_MOTION_PHASE 9
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, QUANTIZE_MOTION_PHASE, int32_t)

inline int32_t ADXConstraintSet_Motion_get_QUANTIZE_MOTION_INTERPOLATOR(void);
#define ADXConstraintSet_Motion_QUANTIZE_MOTION_INTERPOLATOR 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Motion, QUANTIZE_MOTION_INTERPOLATOR, int32_t)

@interface ADXConstraintSet_Constraint ()

- (void)fillFromWithInt:(int32_t)viewId
withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)param;

@end

__attribute__((unused)) static void ADXConstraintSet_Constraint_fillFromWithInt_withADXConstraintLayout_LayoutParams_(ADXConstraintSet_Constraint *self, int32_t viewId, ADXConstraintLayout_LayoutParams *param);

inline int32_t ADXConstraintSet_Constraint_Delta_get_INITIAL_BOOLEAN(void);
#define ADXConstraintSet_Constraint_Delta_INITIAL_BOOLEAN 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Constraint_Delta, INITIAL_BOOLEAN, int32_t)

inline int32_t ADXConstraintSet_Constraint_Delta_get_INITIAL_INT(void);
#define ADXConstraintSet_Constraint_Delta_INITIAL_INT 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Constraint_Delta, INITIAL_INT, int32_t)

inline int32_t ADXConstraintSet_Constraint_Delta_get_INITIAL_FLOAT(void);
#define ADXConstraintSet_Constraint_Delta_INITIAL_FLOAT 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Constraint_Delta, INITIAL_FLOAT, int32_t)

inline int32_t ADXConstraintSet_Constraint_Delta_get_INITIAL_STRING(void);
#define ADXConstraintSet_Constraint_Delta_INITIAL_STRING 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintSet_Constraint_Delta, INITIAL_STRING, int32_t)

@implementation ADXConstraintSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADXConstraintSet_Constraint *)getParametersWithInt:(int32_t)mId {
  return [self getWithInt:mId];
}

- (void)readFallbackWithADXConstraintSet:(ADXConstraintSet *)set {
  for (JavaLangInteger * __strong key in nil_chk([((JavaUtilHashMap *) nil_chk(((ADXConstraintSet *) nil_chk(set))->mConstraints_)) keySet])) {
    int32_t id_ = [((JavaLangInteger *) nil_chk(key)) intValue];
    ADXConstraintSet_Constraint *parent = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(set->mConstraints_)) getWithId:key]);
    if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(id_) withId:create_ADXConstraintSet_Constraint_init()];
    }
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
    if (constraint == nil) {
      continue;
    }
    if (!((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->mApply_) {
      [constraint->layout_ copyFromWithADXConstraintSet_Layout:((ADXConstraintSet_Constraint *) nil_chk(parent))->layout_];
    }
    if (!((ADXConstraintSet_PropertySet *) nil_chk(constraint->propertySet_))->mApply_) {
      [constraint->propertySet_ copyFromWithADXConstraintSet_PropertySet:((ADXConstraintSet_Constraint *) nil_chk(parent))->propertySet_];
    }
    if (!((ADXConstraintSet_Transform *) nil_chk(constraint->transform_))->mApply_) {
      [constraint->transform_ copyFromWithADXConstraintSet_Transform:((ADXConstraintSet_Constraint *) nil_chk(parent))->transform_];
    }
    if (!((ADXConstraintSet_Motion *) nil_chk(constraint->motion_))->mApply_) {
      [constraint->motion_ copyFromWithADXConstraintSet_Motion:((ADXConstraintSet_Constraint *) nil_chk(parent))->motion_];
    }
    for (NSString * __strong s in nil_chk([((JavaUtilHashMap *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(parent))->mCustomConstraints_)) keySet])) {
      if (![((JavaUtilHashMap *) nil_chk(constraint->mCustomConstraints_)) containsKeyWithId:s]) {
        [((JavaUtilHashMap *) nil_chk(constraint->mCustomConstraints_)) putWithId:s withId:[parent->mCustomConstraints_ getWithId:s]];
      }
    }
  }
}

- (void)readFallbackWithADXConstraintLayout:(ADXConstraintLayout *)constraintLayout {
  int32_t count = [((ADXConstraintLayout *) nil_chk(constraintLayout)) getChildCount];
  for (int32_t i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([constraintLayout getChildAtWithInt:i]);
    ADXConstraintLayout_LayoutParams *param = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    int32_t id_ = [view getId];
    if (mForceId_ && id_ == -1) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"All children of ConstraintLayout must have ids to use ConstraintSet");
    }
    if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(id_) withId:create_ADXConstraintSet_Constraint_init()];
    }
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
    if (constraint == nil) {
      continue;
    }
    if (!((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->mApply_) {
      ADXConstraintSet_Constraint_fillFromWithInt_withADXConstraintLayout_LayoutParams_(constraint, id_, param);
      if ([view isKindOfClass:[ADXConstraintHelper class]]) {
        JreStrongAssign(&constraint->layout_->mReferenceIds_, [((ADXConstraintHelper *) view) getReferencedIds]);
        if ([view isKindOfClass:[ADXBarrier class]]) {
          ADXBarrier *barrier = (ADXBarrier *) view;
          constraint->layout_->mBarrierAllowsGoneWidgets_ = [barrier getAllowsGoneWidget];
          constraint->layout_->mBarrierDirection_ = [barrier getType];
          constraint->layout_->mBarrierMargin_ = [barrier getMargin];
        }
      }
      constraint->layout_->mApply_ = true;
    }
    if (!((ADXConstraintSet_PropertySet *) nil_chk(constraint->propertySet_))->mApply_) {
      constraint->propertySet_->visibility_ = [view getVisibility];
      constraint->propertySet_->alpha_ = [view getAlpha];
      constraint->propertySet_->mApply_ = true;
    }
    {
      if (!((ADXConstraintSet_Transform *) nil_chk(constraint->transform_))->mApply_) {
        constraint->transform_->mApply_ = true;
        constraint->transform_->rotation_ = [view getRotation];
        constraint->transform_->rotationX_ = [view getRotationX];
        constraint->transform_->rotationY_ = [view getRotationY];
        constraint->transform_->scaleX_ = [view getScaleX];
        constraint->transform_->scaleY_ = [view getScaleY];
        float pivotX = [view getPivotX];
        float pivotY = [view getPivotY];
        if (pivotX != 0.0 || pivotY != 0.0) {
          constraint->transform_->transformPivotX_ = pivotX;
          constraint->transform_->transformPivotY_ = pivotY;
        }
        constraint->transform_->translationX_ = [view getTranslationX];
        constraint->transform_->translationY_ = [view getTranslationY];
        {
          constraint->transform_->translationZ_ = [view getTranslationZ];
          if (constraint->transform_->applyElevation_) {
            constraint->transform_->elevation_ = [view getElevation];
          }
        }
      }
    }
  }
}

- (void)applyDeltaFromWithADXConstraintSet:(ADXConstraintSet *)cs {
  for (ADXConstraintSet_Constraint * __strong from in nil_chk([((JavaUtilHashMap *) nil_chk(((ADXConstraintSet *) nil_chk(cs))->mConstraints_)) values])) {
    if (((ADXConstraintSet_Constraint *) nil_chk(from))->mDelta_ != nil) {
      if (from->mTargetString_ != nil) {
        int32_t count = 0;
        for (JavaLangInteger *boxed__ in nil_chk([((JavaUtilHashMap *) nil_chk(mConstraints_)) keySet])) {
          int32_t key = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
          ADXConstraintSet_Constraint *potential = JreRetainedLocalValue([self getConstraintWithInt:key]);
          if (((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(potential))->layout_))->mConstraintTag_ != nil) {
            if ([((NSString *) nil_chk(from->mTargetString_)) java_matches:potential->layout_->mConstraintTag_]) {
              [((ADXConstraintSet_Constraint_Delta *) nil_chk(from->mDelta_)) applyDeltaWithADXConstraintSet_Constraint:potential];
              [((JavaUtilHashMap *) nil_chk(potential->mCustomConstraints_)) putAllWithJavaUtilMap:(JavaUtilHashMap *) cast_chk([from->mCustomConstraints_ java_clone], [JavaUtilHashMap class])];
            }
          }
        }
      }
      else {
        ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getConstraintWithInt:from->mViewId_]);
        [((ADXConstraintSet_Constraint_Delta *) nil_chk(from->mDelta_)) applyDeltaWithADXConstraintSet_Constraint:constraint];
      }
    }
  }
}

- (void)cloneWithADXConstraintSet:(ADXConstraintSet *)set {
  [((JavaUtilHashMap *) nil_chk(mConstraints_)) clear];
  for (JavaLangInteger * __strong key in nil_chk([((JavaUtilHashMap *) nil_chk(((ADXConstraintSet *) nil_chk(set))->mConstraints_)) keySet])) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(set->mConstraints_)) getWithId:key]);
    if (constraint == nil) {
      continue;
    }
    [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:key withId:[constraint java_clone]];
  }
}

- (void)cloneWithADXConstraintLayout:(ADXConstraintLayout *)constraintLayout {
  int32_t count = [((ADXConstraintLayout *) nil_chk(constraintLayout)) getChildCount];
  [((JavaUtilHashMap *) nil_chk(mConstraints_)) clear];
  for (int32_t i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([constraintLayout getChildAtWithInt:i]);
    ADXConstraintLayout_LayoutParams *param = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    int32_t id_ = [view getId];
    if (mForceId_ && id_ == -1) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"All children of ConstraintLayout must have ids to use ConstraintSet");
    }
    if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(id_) withId:create_ADXConstraintSet_Constraint_init()];
    }
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
    if (constraint == nil) {
      continue;
    }
    JreStrongAssign(&constraint->mCustomConstraints_, ADXConstraintAttribute_extractAttributesWithJavaUtilHashMap_withADView_(mSavedAttributes_, view));
    ADXConstraintSet_Constraint_fillFromWithInt_withADXConstraintLayout_LayoutParams_(constraint, id_, param);
    ((ADXConstraintSet_PropertySet *) nil_chk(constraint->propertySet_))->visibility_ = [view getVisibility];
    {
      constraint->propertySet_->alpha_ = [view getAlpha];
      ((ADXConstraintSet_Transform *) nil_chk(constraint->transform_))->rotation_ = [view getRotation];
      constraint->transform_->rotationX_ = [view getRotationX];
      constraint->transform_->rotationY_ = [view getRotationY];
      constraint->transform_->scaleX_ = [view getScaleX];
      constraint->transform_->scaleY_ = [view getScaleY];
      float pivotX = [view getPivotX];
      float pivotY = [view getPivotY];
      if (pivotX != 0.0 || pivotY != 0.0) {
        constraint->transform_->transformPivotX_ = pivotX;
        constraint->transform_->transformPivotY_ = pivotY;
      }
      constraint->transform_->translationX_ = [view getTranslationX];
      constraint->transform_->translationY_ = [view getTranslationY];
      {
        constraint->transform_->translationZ_ = [view getTranslationZ];
        if (constraint->transform_->applyElevation_) {
          constraint->transform_->elevation_ = [view getElevation];
        }
      }
    }
    if ([view isKindOfClass:[ADXBarrier class]]) {
      ADXBarrier *barrier = ((ADXBarrier *) view);
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->mBarrierAllowsGoneWidgets_ = [barrier getAllowsGoneWidget];
      JreStrongAssign(&constraint->layout_->mReferenceIds_, [barrier getReferencedIds]);
      constraint->layout_->mBarrierDirection_ = [barrier getType];
      constraint->layout_->mBarrierMargin_ = [barrier getMargin];
    }
  }
}

- (void)cloneWithADXConstraints:(ADXConstraints *)constraints {
  int32_t count = [((ADXConstraints *) nil_chk(constraints)) getChildCount];
  [((JavaUtilHashMap *) nil_chk(mConstraints_)) clear];
  for (int32_t i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([constraints getChildAtWithInt:i]);
    ADXConstraints_LayoutParams *param = (ADXConstraints_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraints_LayoutParams class]);
    int32_t id_ = [view getId];
    if (mForceId_ && id_ == -1) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"All children of ConstraintLayout must have ids to use ConstraintSet");
    }
    if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(id_) withId:create_ADXConstraintSet_Constraint_init()];
    }
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
    if (constraint == nil) {
      continue;
    }
    if ([view isKindOfClass:[ADXConstraintHelper class]]) {
      ADXConstraintHelper *helper = (ADXConstraintHelper *) view;
      [constraint fillFromConstraintsWithADXConstraintHelper:helper withInt:id_ withADXConstraints_LayoutParams:param];
    }
    [constraint fillFromConstraintsWithInt:id_ withADXConstraints_LayoutParams:param];
  }
}

- (void)applyToWithADXConstraintLayout:(ADXConstraintLayout *)constraintLayout {
  [self applyToInternalWithADXConstraintLayout:constraintLayout withBoolean:true];
  [((ADXConstraintLayout *) nil_chk(constraintLayout)) setConstraintSetWithADXConstraintSet:nil];
  [constraintLayout requestLayout];
}

- (void)applyCustomAttributesWithADXConstraintLayout:(ADXConstraintLayout *)constraintLayout {
  int32_t count = [((ADXConstraintLayout *) nil_chk(constraintLayout)) getChildCount];
  for (int32_t i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([constraintLayout getChildAtWithInt:i]);
    int32_t id_ = [((ADView *) nil_chk(view)) getId];
    if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      ADLog_wWithNSString_withNSString_(ADXConstraintSet_TAG, JreStrcat("$$", @"id unknown ", ADXCLDebug_getNameWithADView_(view)));
      continue;
    }
    if (mForceId_ && id_ == -1) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"All children of ConstraintLayout must have ids to use ConstraintSet");
    }
    if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
      if (constraint == nil) {
        continue;
      }
      ADXConstraintAttribute_setAttributesWithADView_withJavaUtilHashMap_(view, constraint->mCustomConstraints_);
    }
  }
}

- (void)applyToHelperWithADXConstraintHelper:(ADXConstraintHelper *)helper
                     withADXConstraintWidget:(ADXConstraintWidget *)child
        withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                           withADSparseArray:(ADSparseArray *)mapIdToWidget {
  int32_t id_ = [((ADXConstraintHelper *) nil_chk(helper)) getId];
  if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
    if (constraint != nil && [child isKindOfClass:[ADXHelperWidget class]]) {
      ADXHelperWidget *helperWidget = (ADXHelperWidget *) cast_chk(child, [ADXHelperWidget class]);
      [helper loadParametersWithADXConstraintSet_Constraint:constraint withADXHelperWidget:helperWidget withADXConstraintLayout_LayoutParams:layoutParams withADSparseArray:mapIdToWidget];
    }
  }
}

- (void)applyToLayoutParamsWithInt:(int32_t)id_
withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams {
  if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
    if (constraint != nil) {
      [constraint applyToWithADXConstraintLayout_LayoutParams:layoutParams];
    }
  }
}

- (void)applyToInternalWithADXConstraintLayout:(ADXConstraintLayout *)constraintLayout
                                   withBoolean:(bool)applyPostLayout {
  int32_t count = [((ADXConstraintLayout *) nil_chk(constraintLayout)) getChildCount];
  JavaUtilHashSet *used = create_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(mConstraints_)) keySet]);
  for (int32_t i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([constraintLayout getChildAtWithInt:i]);
    int32_t id_ = [((ADView *) nil_chk(view)) getId];
    if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      ADLog_wWithNSString_withNSString_(ADXConstraintSet_TAG, JreStrcat("$$", @"id unknown ", ADXCLDebug_getNameWithADView_(view)));
      continue;
    }
    if (mForceId_ && id_ == -1) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"All children of ConstraintLayout must have ids to use ConstraintSet");
    }
    if (id_ == -1) {
      continue;
    }
    if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
      [used removeWithId:JavaLangInteger_valueOfWithInt_(id_)];
      ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
      if (constraint == nil) {
        continue;
      }
      if ([view isKindOfClass:[ADXBarrier class]]) {
        ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->mHelperType_ = ADXConstraintSet_BARRIER_TYPE;
        ADXBarrier *barrier = (ADXBarrier *) view;
        [barrier setIdWithInt:id_];
        [barrier setTypeWithInt:constraint->layout_->mBarrierDirection_];
        [barrier setMarginWithInt:constraint->layout_->mBarrierMargin_];
        [barrier setAllowsGoneWidgetWithBoolean:constraint->layout_->mBarrierAllowsGoneWidgets_];
        if (constraint->layout_->mReferenceIds_ != nil) {
          [barrier setReferencedIdsWithIntArray:constraint->layout_->mReferenceIds_];
        }
        else if (constraint->layout_->mReferenceIdString_ != nil) {
          JreStrongAssign(&constraint->layout_->mReferenceIds_, ADXConstraintSet_convertReferenceStringWithADView_withNSString_(self, barrier, constraint->layout_->mReferenceIdString_));
          [barrier setReferencedIdsWithIntArray:constraint->layout_->mReferenceIds_];
        }
      }
      ADXConstraintLayout_LayoutParams *param = (ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
      [((ADXConstraintLayout_LayoutParams *) nil_chk(param)) validate];
      [constraint applyToWithADXConstraintLayout_LayoutParams:param];
      if (applyPostLayout) {
        ADXConstraintAttribute_setAttributesWithADView_withJavaUtilHashMap_(view, constraint->mCustomConstraints_);
      }
      [view setLayoutParamsWithADViewGroup_LayoutParams:param];
      if (((ADXConstraintSet_PropertySet *) nil_chk(constraint->propertySet_))->mVisibilityMode_ == ADXConstraintSet_VISIBILITY_MODE_NORMAL) {
        [view setVisibilityWithInt:constraint->propertySet_->visibility_];
      }
      {
        [view setAlphaWithFloat:constraint->propertySet_->alpha_];
        [view setRotationWithFloat:((ADXConstraintSet_Transform *) nil_chk(constraint->transform_))->rotation_];
        [view setRotationXWithFloat:constraint->transform_->rotationX_];
        [view setRotationYWithFloat:constraint->transform_->rotationY_];
        [view setScaleXWithFloat:constraint->transform_->scaleX_];
        [view setScaleYWithFloat:constraint->transform_->scaleY_];
        if (constraint->transform_->transformPivotTarget_ != ADXConstraintSet_UNSET) {
          ADView *layout = (ADView *) cast_chk([view getParent], [ADView class]);
          ADView *center = JreRetainedLocalValue([((ADView *) nil_chk(layout)) findViewByIdWithInt:constraint->transform_->transformPivotTarget_]);
          if (center != nil) {
            float cy = ([center getTop] + [center getBottom]) / 2.0f;
            float cx = ([center getLeft] + [center getRight]) / 2.0f;
            if ([view getRight] - [view getLeft] > 0 && [view getBottom] - [view getTop] > 0) {
              float px = (cx - [view getLeft]);
              float py = (cy - [view getTop]);
              [view setPivotXWithFloat:px];
              [view setPivotYWithFloat:py];
            }
          }
        }
        else {
          if (!JavaLangFloat_isNaNWithFloat_(constraint->transform_->transformPivotX_)) {
            [view setPivotXWithFloat:constraint->transform_->transformPivotX_];
          }
          if (!JavaLangFloat_isNaNWithFloat_(constraint->transform_->transformPivotY_)) {
            [view setPivotYWithFloat:constraint->transform_->transformPivotY_];
          }
        }
        [view setTranslationXWithFloat:constraint->transform_->translationX_];
        [view setTranslationYWithFloat:constraint->transform_->translationY_];
        {
          [view setTranslationZWithFloat:constraint->transform_->translationZ_];
          if (constraint->transform_->applyElevation_) {
            [view setElevationWithFloat:constraint->transform_->elevation_];
          }
        }
      }
    }
    else {
      ADLog_vWithNSString_withNSString_(ADXConstraintSet_TAG, JreStrcat("$I", @"WARNING NO CONSTRAINTS for view ", id_));
    }
  }
  for (JavaLangInteger * __strong id_ in used) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:id_]);
    if (constraint == nil) {
      continue;
    }
    if (((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->mHelperType_ == ADXConstraintSet_BARRIER_TYPE) {
      ADXBarrier *barrier = create_ADXBarrier_initWithADContext_([constraintLayout getContext]);
      [barrier setIdWithInt:[((JavaLangInteger *) nil_chk(id_)) intValue]];
      if (constraint->layout_->mReferenceIds_ != nil) {
        [barrier setReferencedIdsWithIntArray:constraint->layout_->mReferenceIds_];
      }
      else if (constraint->layout_->mReferenceIdString_ != nil) {
        JreStrongAssign(&constraint->layout_->mReferenceIds_, ADXConstraintSet_convertReferenceStringWithADView_withNSString_(self, barrier, constraint->layout_->mReferenceIdString_));
        [barrier setReferencedIdsWithIntArray:constraint->layout_->mReferenceIds_];
      }
      [barrier setTypeWithInt:constraint->layout_->mBarrierDirection_];
      [barrier setMarginWithInt:constraint->layout_->mBarrierMargin_];
      ADXConstraintLayout_LayoutParams *param = JreRetainedLocalValue([constraintLayout generateDefaultLayoutParams]);
      [barrier validateParams];
      [constraint applyToWithADXConstraintLayout_LayoutParams:param];
      [constraintLayout addViewWithADView:barrier withADViewGroup_LayoutParams:param];
    }
    if (constraint->layout_->mIsGuideline_) {
      ADXGuideline *g = create_ADXGuideline_initWithADContext_([constraintLayout getContext]);
      [g setIdWithInt:[((JavaLangInteger *) nil_chk(id_)) intValue]];
      ADXConstraintLayout_LayoutParams *param = JreRetainedLocalValue([constraintLayout generateDefaultLayoutParams]);
      [constraint applyToWithADXConstraintLayout_LayoutParams:param];
      [constraintLayout addViewWithADView:g withADViewGroup_LayoutParams:param];
    }
  }
  for (int32_t i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([constraintLayout getChildAtWithInt:i]);
    if ([view isKindOfClass:[ADXConstraintHelper class]]) {
      ADXConstraintHelper *constraintHelper = (ADXConstraintHelper *) view;
      [((ADXConstraintHelper *) nil_chk(constraintHelper)) applyLayoutFeaturesInConstraintSetWithADXConstraintLayout:constraintLayout];
    }
  }
}

- (void)centerWithInt:(int32_t)centerID
              withInt:(int32_t)firstID
              withInt:(int32_t)firstSide
              withInt:(int32_t)firstMargin
              withInt:(int32_t)secondId
              withInt:(int32_t)secondSide
              withInt:(int32_t)secondMargin
            withFloat:(float)bias {
  if (firstMargin < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"margin must be > 0");
  }
  if (secondMargin < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"margin must be > 0");
  }
  if (bias <= 0 || bias > 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bias must be between 0 and 1 inclusive");
  }
  if (firstSide == ADXConstraintSet_LEFT || firstSide == ADXConstraintSet_RIGHT) {
    [self connectWithInt:centerID withInt:ADXConstraintSet_LEFT withInt:firstID withInt:firstSide withInt:firstMargin];
    [self connectWithInt:centerID withInt:ADXConstraintSet_RIGHT withInt:secondId withInt:secondSide withInt:secondMargin];
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(centerID)]);
    if (constraint != nil) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->horizontalBias_ = bias;
    }
  }
  else if (firstSide == ADXConstraintSet_START || firstSide == ADXConstraintSet_END) {
    [self connectWithInt:centerID withInt:ADXConstraintSet_START withInt:firstID withInt:firstSide withInt:firstMargin];
    [self connectWithInt:centerID withInt:ADXConstraintSet_END withInt:secondId withInt:secondSide withInt:secondMargin];
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(centerID)]);
    if (constraint != nil) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->horizontalBias_ = bias;
    }
  }
  else {
    [self connectWithInt:centerID withInt:ADXConstraintSet_TOP withInt:firstID withInt:firstSide withInt:firstMargin];
    [self connectWithInt:centerID withInt:ADXConstraintSet_BOTTOM withInt:secondId withInt:secondSide withInt:secondMargin];
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(centerID)]);
    if (constraint != nil) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->verticalBias_ = bias;
    }
  }
}

- (void)centerHorizontallyWithInt:(int32_t)centerID
                          withInt:(int32_t)leftId
                          withInt:(int32_t)leftSide
                          withInt:(int32_t)leftMargin
                          withInt:(int32_t)rightId
                          withInt:(int32_t)rightSide
                          withInt:(int32_t)rightMargin
                        withFloat:(float)bias {
  [self connectWithInt:centerID withInt:ADXConstraintSet_LEFT withInt:leftId withInt:leftSide withInt:leftMargin];
  [self connectWithInt:centerID withInt:ADXConstraintSet_RIGHT withInt:rightId withInt:rightSide withInt:rightMargin];
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(centerID)]);
  if (constraint != nil) {
    ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->horizontalBias_ = bias;
  }
}

- (void)centerHorizontallyRtlWithInt:(int32_t)centerID
                             withInt:(int32_t)startId
                             withInt:(int32_t)startSide
                             withInt:(int32_t)startMargin
                             withInt:(int32_t)endId
                             withInt:(int32_t)endSide
                             withInt:(int32_t)endMargin
                           withFloat:(float)bias {
  [self connectWithInt:centerID withInt:ADXConstraintSet_START withInt:startId withInt:startSide withInt:startMargin];
  [self connectWithInt:centerID withInt:ADXConstraintSet_END withInt:endId withInt:endSide withInt:endMargin];
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(centerID)]);
  if (constraint != nil) {
    ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->horizontalBias_ = bias;
  }
}

- (void)centerVerticallyWithInt:(int32_t)centerID
                        withInt:(int32_t)topId
                        withInt:(int32_t)topSide
                        withInt:(int32_t)topMargin
                        withInt:(int32_t)bottomId
                        withInt:(int32_t)bottomSide
                        withInt:(int32_t)bottomMargin
                      withFloat:(float)bias {
  [self connectWithInt:centerID withInt:ADXConstraintSet_TOP withInt:topId withInt:topSide withInt:topMargin];
  [self connectWithInt:centerID withInt:ADXConstraintSet_BOTTOM withInt:bottomId withInt:bottomSide withInt:bottomMargin];
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(centerID)]);
  if (constraint != nil) {
    ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->verticalBias_ = bias;
  }
}

- (void)createVerticalChainWithInt:(int32_t)topId
                           withInt:(int32_t)topSide
                           withInt:(int32_t)bottomId
                           withInt:(int32_t)bottomSide
                      withIntArray:(IOSIntArray *)chainIds
                    withFloatArray:(IOSFloatArray *)weights
                           withInt:(int32_t)style {
  if (((IOSIntArray *) nil_chk(chainIds))->size_ < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"must have 2 or more widgets in a chain");
  }
  if (weights != nil && weights->size_ != chainIds->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"must have 2 or more widgets in a chain");
  }
  if (weights != nil) {
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:IOSIntArray_Get(chainIds, 0)]))->layout_))->verticalWeight_ = IOSFloatArray_Get(weights, 0);
  }
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:IOSIntArray_Get(chainIds, 0)]))->layout_))->verticalChainStyle_ = style;
  [self connectWithInt:IOSIntArray_Get(chainIds, 0) withInt:ADXConstraintSet_TOP withInt:topId withInt:topSide withInt:0];
  for (int32_t i = 1; i < chainIds->size_; i++) {
    int32_t chainId = IOSIntArray_Get(chainIds, i);
    [self connectWithInt:IOSIntArray_Get(chainIds, i) withInt:ADXConstraintSet_TOP withInt:IOSIntArray_Get(chainIds, i - 1) withInt:ADXConstraintSet_BOTTOM withInt:0];
    [self connectWithInt:IOSIntArray_Get(chainIds, i - 1) withInt:ADXConstraintSet_BOTTOM withInt:IOSIntArray_Get(chainIds, i) withInt:ADXConstraintSet_TOP withInt:0];
    if (weights != nil) {
      ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:IOSIntArray_Get(chainIds, i)]))->layout_->verticalWeight_ = IOSFloatArray_Get(weights, i);
    }
  }
  [self connectWithInt:IOSIntArray_Get(chainIds, chainIds->size_ - 1) withInt:ADXConstraintSet_BOTTOM withInt:bottomId withInt:bottomSide withInt:0];
}

- (void)createHorizontalChainWithInt:(int32_t)leftId
                             withInt:(int32_t)leftSide
                             withInt:(int32_t)rightId
                             withInt:(int32_t)rightSide
                        withIntArray:(IOSIntArray *)chainIds
                      withFloatArray:(IOSFloatArray *)weights
                             withInt:(int32_t)style {
  ADXConstraintSet_createHorizontalChainWithInt_withInt_withInt_withInt_withIntArray_withFloatArray_withInt_withInt_withInt_(self, leftId, leftSide, rightId, rightSide, chainIds, weights, style, ADXConstraintSet_LEFT, ADXConstraintSet_RIGHT);
}

- (void)createHorizontalChainRtlWithInt:(int32_t)startId
                                withInt:(int32_t)startSide
                                withInt:(int32_t)endId
                                withInt:(int32_t)endSide
                           withIntArray:(IOSIntArray *)chainIds
                         withFloatArray:(IOSFloatArray *)weights
                                withInt:(int32_t)style {
  ADXConstraintSet_createHorizontalChainWithInt_withInt_withInt_withInt_withIntArray_withFloatArray_withInt_withInt_withInt_(self, startId, startSide, endId, endSide, chainIds, weights, style, ADXConstraintSet_START, ADXConstraintSet_END);
}

- (void)createHorizontalChainWithInt:(int32_t)leftId
                             withInt:(int32_t)leftSide
                             withInt:(int32_t)rightId
                             withInt:(int32_t)rightSide
                        withIntArray:(IOSIntArray *)chainIds
                      withFloatArray:(IOSFloatArray *)weights
                             withInt:(int32_t)style
                             withInt:(int32_t)left
                             withInt:(int32_t)right {
  ADXConstraintSet_createHorizontalChainWithInt_withInt_withInt_withInt_withIntArray_withFloatArray_withInt_withInt_withInt_(self, leftId, leftSide, rightId, rightSide, chainIds, weights, style, left, right);
}

- (void)connectWithInt:(int32_t)startID
               withInt:(int32_t)startSide
               withInt:(int32_t)endID
               withInt:(int32_t)endSide
               withInt:(int32_t)margin {
  if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(startID)]) {
    [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(startID) withId:create_ADXConstraintSet_Constraint_init()];
  }
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(startID)]);
  if (constraint == nil) {
    return;
  }
  switch (startSide) {
    case ADXConstraintSet_LEFT:
    if (endSide == ADXConstraintSet_LEFT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->leftToLeft_ = endID;
      constraint->layout_->leftToRight_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_RIGHT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->leftToRight_ = endID;
      constraint->layout_->leftToLeft_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Left to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    constraint->layout_->leftMargin_ = margin;
    break;
    case ADXConstraintSet_RIGHT:
    if (endSide == ADXConstraintSet_LEFT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->rightToLeft_ = endID;
      constraint->layout_->rightToRight_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_RIGHT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->rightToRight_ = endID;
      constraint->layout_->rightToLeft_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    constraint->layout_->rightMargin_ = margin;
    break;
    case ADXConstraintSet_TOP:
    if (endSide == ADXConstraintSet_TOP) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->topToTop_ = endID;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_BOTTOM) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->topToBottom_ = endID;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    constraint->layout_->topMargin_ = margin;
    break;
    case ADXConstraintSet_BOTTOM:
    if (endSide == ADXConstraintSet_BOTTOM) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->bottomToBottom_ = endID;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_TOP) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->bottomToTop_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    constraint->layout_->bottomMargin_ = margin;
    break;
    case ADXConstraintSet_BASELINE:
    if (endSide == ADXConstraintSet_BASELINE) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToBaseline_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_TOP) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToTop_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_BOTTOM) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToBottom_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_START:
    if (endSide == ADXConstraintSet_START) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->startToStart_ = endID;
      constraint->layout_->startToEnd_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_END) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->startToEnd_ = endID;
      constraint->layout_->startToStart_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    constraint->layout_->startMargin_ = margin;
    break;
    case ADXConstraintSet_END:
    if (endSide == ADXConstraintSet_END) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->endToEnd_ = endID;
      constraint->layout_->endToStart_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_START) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->endToStart_ = endID;
      constraint->layout_->endToEnd_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    constraint->layout_->endMargin_ = margin;
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", ADXConstraintSet_sideToStringWithInt_(self, startSide), @" to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" unknown"));
  }
}

- (void)connectWithInt:(int32_t)startID
               withInt:(int32_t)startSide
               withInt:(int32_t)endID
               withInt:(int32_t)endSide {
  if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(startID)]) {
    [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(startID) withId:create_ADXConstraintSet_Constraint_init()];
  }
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(startID)]);
  if (constraint == nil) {
    return;
  }
  switch (startSide) {
    case ADXConstraintSet_LEFT:
    if (endSide == ADXConstraintSet_LEFT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->leftToLeft_ = endID;
      constraint->layout_->leftToRight_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_RIGHT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->leftToRight_ = endID;
      constraint->layout_->leftToLeft_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"left to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_RIGHT:
    if (endSide == ADXConstraintSet_LEFT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->rightToLeft_ = endID;
      constraint->layout_->rightToRight_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_RIGHT) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->rightToRight_ = endID;
      constraint->layout_->rightToLeft_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_TOP:
    if (endSide == ADXConstraintSet_TOP) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->topToTop_ = endID;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_BOTTOM) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->topToBottom_ = endID;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_BOTTOM:
    if (endSide == ADXConstraintSet_BOTTOM) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->bottomToBottom_ = endID;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_TOP) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->bottomToTop_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_BASELINE:
    if (endSide == ADXConstraintSet_BASELINE) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToBaseline_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_TOP) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToTop_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_BOTTOM) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToBottom_ = endID;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToBottom_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_START:
    if (endSide == ADXConstraintSet_START) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->startToStart_ = endID;
      constraint->layout_->startToEnd_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_END) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->startToEnd_ = endID;
      constraint->layout_->startToStart_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    case ADXConstraintSet_END:
    if (endSide == ADXConstraintSet_END) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->endToEnd_ = endID;
      constraint->layout_->endToStart_ = ADXConstraintSet_Layout_UNSET;
    }
    else if (endSide == ADXConstraintSet_START) {
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->endToStart_ = endID;
      constraint->layout_->endToEnd_ = ADXConstraintSet_Layout_UNSET;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"right to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" undefined"));
    }
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", ADXConstraintSet_sideToStringWithInt_(self, startSide), @" to ", ADXConstraintSet_sideToStringWithInt_(self, endSide), @" unknown"));
  }
}

- (void)centerHorizontallyWithInt:(int32_t)viewId
                          withInt:(int32_t)toView {
  if (toView == ADXConstraintSet_PARENT_ID) {
    [self centerWithInt:viewId withInt:ADXConstraintSet_PARENT_ID withInt:ADXConstraintSet_LEFT withInt:0 withInt:ADXConstraintSet_PARENT_ID withInt:ADXConstraintSet_RIGHT withInt:0 withFloat:0.5f];
  }
  else {
    [self centerWithInt:viewId withInt:toView withInt:ADXConstraintSet_RIGHT withInt:0 withInt:toView withInt:ADXConstraintSet_LEFT withInt:0 withFloat:0.5f];
  }
}

- (void)centerHorizontallyRtlWithInt:(int32_t)viewId
                             withInt:(int32_t)toView {
  if (toView == ADXConstraintSet_PARENT_ID) {
    [self centerWithInt:viewId withInt:ADXConstraintSet_PARENT_ID withInt:ADXConstraintSet_START withInt:0 withInt:ADXConstraintSet_PARENT_ID withInt:ADXConstraintSet_END withInt:0 withFloat:0.5f];
  }
  else {
    [self centerWithInt:viewId withInt:toView withInt:ADXConstraintSet_END withInt:0 withInt:toView withInt:ADXConstraintSet_START withInt:0 withFloat:0.5f];
  }
}

- (void)centerVerticallyWithInt:(int32_t)viewId
                        withInt:(int32_t)toView {
  if (toView == ADXConstraintSet_PARENT_ID) {
    [self centerWithInt:viewId withInt:ADXConstraintSet_PARENT_ID withInt:ADXConstraintSet_TOP withInt:0 withInt:ADXConstraintSet_PARENT_ID withInt:ADXConstraintSet_BOTTOM withInt:0 withFloat:0.5f];
  }
  else {
    [self centerWithInt:viewId withInt:toView withInt:ADXConstraintSet_BOTTOM withInt:0 withInt:toView withInt:ADXConstraintSet_TOP withInt:0 withFloat:0.5f];
  }
}

- (void)clearWithInt:(int32_t)viewId {
  [((JavaUtilHashMap *) nil_chk(mConstraints_)) removeWithId:JavaLangInteger_valueOfWithInt_(viewId)];
}

- (void)clearWithInt:(int32_t)viewId
             withInt:(int32_t)anchor {
  if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(viewId)]) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(viewId)]);
    if (constraint == nil) {
      return;
    }
    switch (anchor) {
      case ADXConstraintSet_LEFT:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->leftToRight_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->leftToLeft_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->leftMargin_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->goneLeftMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_RIGHT:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->rightToRight_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->rightToLeft_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->rightMargin_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->goneRightMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_TOP:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->topToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->topMargin_ = 0;
      constraint->layout_->goneTopMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_BOTTOM:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->bottomMargin_ = 0;
      constraint->layout_->goneBottomMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_BASELINE:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->baselineMargin_ = 0;
      constraint->layout_->goneBaselineMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_START:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->startToEnd_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->startToStart_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->startMargin_ = 0;
      constraint->layout_->goneStartMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_END:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->endToStart_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->endToEnd_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->endMargin_ = 0;
      constraint->layout_->goneEndMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
      break;
      case ADXConstraintSet_CIRCLE_REFERENCE:
      ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->circleAngle_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->circleRadius_ = ADXConstraintSet_Layout_UNSET;
      constraint->layout_->circleConstraint_ = ADXConstraintSet_Layout_UNSET;
      break;
      default:
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unknown constraint");
    }
  }
}

- (void)setMarginWithInt:(int32_t)viewId
                 withInt:(int32_t)anchor
                 withInt:(int32_t)value {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:viewId]);
  switch (anchor) {
    case ADXConstraintSet_LEFT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->leftMargin_ = value;
    break;
    case ADXConstraintSet_RIGHT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->rightMargin_ = value;
    break;
    case ADXConstraintSet_TOP:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->topMargin_ = value;
    break;
    case ADXConstraintSet_BOTTOM:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->bottomMargin_ = value;
    break;
    case ADXConstraintSet_BASELINE:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->baselineMargin_ = value;
    break;
    case ADXConstraintSet_START:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->startMargin_ = value;
    break;
    case ADXConstraintSet_END:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->endMargin_ = value;
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unknown constraint");
  }
}

- (void)setGoneMarginWithInt:(int32_t)viewId
                     withInt:(int32_t)anchor
                     withInt:(int32_t)value {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:viewId]);
  switch (anchor) {
    case ADXConstraintSet_LEFT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneLeftMargin_ = value;
    break;
    case ADXConstraintSet_RIGHT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneRightMargin_ = value;
    break;
    case ADXConstraintSet_TOP:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneTopMargin_ = value;
    break;
    case ADXConstraintSet_BOTTOM:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneBottomMargin_ = value;
    break;
    case ADXConstraintSet_BASELINE:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneBaselineMargin_ = value;
    break;
    case ADXConstraintSet_START:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneStartMargin_ = value;
    break;
    case ADXConstraintSet_END:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->goneEndMargin_ = value;
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unknown constraint");
  }
}

- (void)setHorizontalBiasWithInt:(int32_t)viewId
                       withFloat:(float)bias {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->horizontalBias_ = bias;
}

- (void)setVerticalBiasWithInt:(int32_t)viewId
                     withFloat:(float)bias {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->verticalBias_ = bias;
}

- (void)setDimensionRatioWithInt:(int32_t)viewId
                    withNSString:(NSString *)ratio {
  JreStrongAssign(&((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->dimensionRatio_, ratio);
}

- (void)setVisibilityWithInt:(int32_t)viewId
                     withInt:(int32_t)visibility {
  ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->propertySet_))->visibility_ = visibility;
}

- (int32_t)getVisibilityModeWithInt:(int32_t)viewId {
  return ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->propertySet_))->mVisibilityMode_;
}

- (int32_t)getVisibilityWithInt:(int32_t)viewId {
  return ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->propertySet_))->visibility_;
}

- (int32_t)getHeightWithInt:(int32_t)viewId {
  return ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->mHeight_;
}

- (int32_t)getWidthWithInt:(int32_t)viewId {
  return ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->mWidth_;
}

- (void)setAlphaWithInt:(int32_t)viewId
              withFloat:(float)alpha {
  ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->propertySet_))->alpha_ = alpha;
}

- (bool)getApplyElevationWithInt:(int32_t)viewId {
  return ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->applyElevation_;
}

- (void)setApplyElevationWithInt:(int32_t)viewId
                     withBoolean:(bool)apply {
  {
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->applyElevation_ = apply;
  }
}

- (void)setElevationWithInt:(int32_t)viewId
                  withFloat:(float)elevation {
  {
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->elevation_ = elevation;
    ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_->applyElevation_ = true;
  }
}

- (void)setRotationWithInt:(int32_t)viewId
                 withFloat:(float)rotation {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->rotation_ = rotation;
}

- (void)setRotationXWithInt:(int32_t)viewId
                  withFloat:(float)rotationX {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->rotationX_ = rotationX;
}

- (void)setRotationYWithInt:(int32_t)viewId
                  withFloat:(float)rotationY {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->rotationY_ = rotationY;
}

- (void)setScaleXWithInt:(int32_t)viewId
               withFloat:(float)scaleX {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->scaleX_ = scaleX;
}

- (void)setScaleYWithInt:(int32_t)viewId
               withFloat:(float)scaleY {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->scaleY_ = scaleY;
}

- (void)setTransformPivotXWithInt:(int32_t)viewId
                        withFloat:(float)transformPivotX {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->transformPivotX_ = transformPivotX;
}

- (void)setTransformPivotYWithInt:(int32_t)viewId
                        withFloat:(float)transformPivotY {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->transformPivotY_ = transformPivotY;
}

- (void)setTransformPivotWithInt:(int32_t)viewId
                       withFloat:(float)transformPivotX
                       withFloat:(float)transformPivotY {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:viewId]);
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->transform_))->transformPivotY_ = transformPivotY;
  constraint->transform_->transformPivotX_ = transformPivotX;
}

- (void)setTranslationXWithInt:(int32_t)viewId
                     withFloat:(float)translationX {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->translationX_ = translationX;
}

- (void)setTranslationYWithInt:(int32_t)viewId
                     withFloat:(float)translationY {
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->translationY_ = translationY;
}

- (void)setTranslationWithInt:(int32_t)viewId
                    withFloat:(float)translationX
                    withFloat:(float)translationY {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:viewId]);
  ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->transform_))->translationX_ = translationX;
  constraint->transform_->translationY_ = translationY;
}

- (void)setTranslationZWithInt:(int32_t)viewId
                     withFloat:(float)translationZ {
  {
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->transform_))->translationZ_ = translationZ;
  }
}

- (void)constrainHeightWithInt:(int32_t)viewId
                       withInt:(int32_t)height {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->mHeight_ = height;
}

- (void)constrainWidthWithInt:(int32_t)viewId
                      withInt:(int32_t)width {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->mWidth_ = width;
}

- (void)constrainCircleWithInt:(int32_t)viewId
                       withInt:(int32_t)id_
                       withInt:(int32_t)radius
                     withFloat:(float)angle {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:viewId]);
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->circleConstraint_ = id_;
  constraint->layout_->circleRadius_ = radius;
  constraint->layout_->circleAngle_ = angle;
}

- (void)constrainMaxHeightWithInt:(int32_t)viewId
                          withInt:(int32_t)height {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->heightMax_ = height;
}

- (void)constrainMaxWidthWithInt:(int32_t)viewId
                         withInt:(int32_t)width {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->widthMax_ = width;
}

- (void)constrainMinHeightWithInt:(int32_t)viewId
                          withInt:(int32_t)height {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->heightMin_ = height;
}

- (void)constrainMinWidthWithInt:(int32_t)viewId
                         withInt:(int32_t)width {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->widthMin_ = width;
}

- (void)constrainPercentWidthWithInt:(int32_t)viewId
                           withFloat:(float)percent {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->widthPercent_ = percent;
}

- (void)constrainPercentHeightWithInt:(int32_t)viewId
                            withFloat:(float)percent {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->heightPercent_ = percent;
}

- (void)constrainDefaultHeightWithInt:(int32_t)viewId
                              withInt:(int32_t)height {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->heightDefault_ = height;
}

- (void)constrainDefaultWidthWithInt:(int32_t)viewId
                             withInt:(int32_t)width {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->widthDefault_ = width;
}

- (void)setHorizontalWeightWithInt:(int32_t)viewId
                         withFloat:(float)weight {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->horizontalWeight_ = weight;
}

- (void)setVerticalWeightWithInt:(int32_t)viewId
                       withFloat:(float)weight {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->verticalWeight_ = weight;
}

- (void)setHorizontalChainStyleWithInt:(int32_t)viewId
                               withInt:(int32_t)chainStyle {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->horizontalChainStyle_ = chainStyle;
}

- (void)setVerticalChainStyleWithInt:(int32_t)viewId
                             withInt:(int32_t)chainStyle {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:viewId]))->layout_))->verticalChainStyle_ = chainStyle;
}

- (void)addToHorizontalChainWithInt:(int32_t)viewId
                            withInt:(int32_t)leftId
                            withInt:(int32_t)rightId {
  [self connectWithInt:viewId withInt:ADXConstraintSet_LEFT withInt:leftId withInt:(leftId == ADXConstraintSet_PARENT_ID) ? ADXConstraintSet_LEFT : ADXConstraintSet_RIGHT withInt:0];
  [self connectWithInt:viewId withInt:ADXConstraintSet_RIGHT withInt:rightId withInt:(rightId == ADXConstraintSet_PARENT_ID) ? ADXConstraintSet_RIGHT : ADXConstraintSet_LEFT withInt:0];
  if (leftId != ADXConstraintSet_PARENT_ID) {
    [self connectWithInt:leftId withInt:ADXConstraintSet_RIGHT withInt:viewId withInt:ADXConstraintSet_LEFT withInt:0];
  }
  if (rightId != ADXConstraintSet_PARENT_ID) {
    [self connectWithInt:rightId withInt:ADXConstraintSet_LEFT withInt:viewId withInt:ADXConstraintSet_RIGHT withInt:0];
  }
}

- (void)addToHorizontalChainRTLWithInt:(int32_t)viewId
                               withInt:(int32_t)leftId
                               withInt:(int32_t)rightId {
  [self connectWithInt:viewId withInt:ADXConstraintSet_START withInt:leftId withInt:(leftId == ADXConstraintSet_PARENT_ID) ? ADXConstraintSet_START : ADXConstraintSet_END withInt:0];
  [self connectWithInt:viewId withInt:ADXConstraintSet_END withInt:rightId withInt:(rightId == ADXConstraintSet_PARENT_ID) ? ADXConstraintSet_END : ADXConstraintSet_START withInt:0];
  if (leftId != ADXConstraintSet_PARENT_ID) {
    [self connectWithInt:leftId withInt:ADXConstraintSet_END withInt:viewId withInt:ADXConstraintSet_START withInt:0];
  }
  if (rightId != ADXConstraintSet_PARENT_ID) {
    [self connectWithInt:rightId withInt:ADXConstraintSet_START withInt:viewId withInt:ADXConstraintSet_END withInt:0];
  }
}

- (void)addToVerticalChainWithInt:(int32_t)viewId
                          withInt:(int32_t)topId
                          withInt:(int32_t)bottomId {
  [self connectWithInt:viewId withInt:ADXConstraintSet_TOP withInt:topId withInt:(topId == ADXConstraintSet_PARENT_ID) ? ADXConstraintSet_TOP : ADXConstraintSet_BOTTOM withInt:0];
  [self connectWithInt:viewId withInt:ADXConstraintSet_BOTTOM withInt:bottomId withInt:(bottomId == ADXConstraintSet_PARENT_ID) ? ADXConstraintSet_BOTTOM : ADXConstraintSet_TOP withInt:0];
  if (topId != ADXConstraintSet_PARENT_ID) {
    [self connectWithInt:topId withInt:ADXConstraintSet_BOTTOM withInt:viewId withInt:ADXConstraintSet_TOP withInt:0];
  }
  if (bottomId != ADXConstraintSet_PARENT_ID) {
    [self connectWithInt:bottomId withInt:ADXConstraintSet_TOP withInt:viewId withInt:ADXConstraintSet_BOTTOM withInt:0];
  }
}

- (void)removeFromVerticalChainWithInt:(int32_t)viewId {
  if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(viewId)]) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(viewId)]);
    if (constraint == nil) {
      return;
    }
    int32_t topId = ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->topToBottom_;
    int32_t bottomId = constraint->layout_->bottomToTop_;
    if (topId != ADXConstraintSet_Layout_UNSET || bottomId != ADXConstraintSet_Layout_UNSET) {
      if (topId != ADXConstraintSet_Layout_UNSET && bottomId != ADXConstraintSet_Layout_UNSET) {
        [self connectWithInt:topId withInt:ADXConstraintSet_BOTTOM withInt:bottomId withInt:ADXConstraintSet_TOP withInt:0];
        [self connectWithInt:bottomId withInt:ADXConstraintSet_TOP withInt:topId withInt:ADXConstraintSet_BOTTOM withInt:0];
      }
      else if (constraint->layout_->bottomToBottom_ != ADXConstraintSet_Layout_UNSET) {
        [self connectWithInt:topId withInt:ADXConstraintSet_BOTTOM withInt:constraint->layout_->bottomToBottom_ withInt:ADXConstraintSet_BOTTOM withInt:0];
      }
      else if (constraint->layout_->topToTop_ != ADXConstraintSet_Layout_UNSET) {
        [self connectWithInt:bottomId withInt:ADXConstraintSet_TOP withInt:constraint->layout_->topToTop_ withInt:ADXConstraintSet_TOP withInt:0];
      }
    }
  }
  [self clearWithInt:viewId withInt:ADXConstraintSet_TOP];
  [self clearWithInt:viewId withInt:ADXConstraintSet_BOTTOM];
}

- (void)removeFromHorizontalChainWithInt:(int32_t)viewId {
  if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(viewId)]) {
    ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(viewId)]);
    if (constraint == nil) {
      return;
    }
    int32_t leftId = ((ADXConstraintSet_Layout *) nil_chk(constraint->layout_))->leftToRight_;
    int32_t rightId = constraint->layout_->rightToLeft_;
    if (leftId != ADXConstraintSet_Layout_UNSET || rightId != ADXConstraintSet_Layout_UNSET) {
      if (leftId != ADXConstraintSet_Layout_UNSET && rightId != ADXConstraintSet_Layout_UNSET) {
        [self connectWithInt:leftId withInt:ADXConstraintSet_RIGHT withInt:rightId withInt:ADXConstraintSet_LEFT withInt:0];
        [self connectWithInt:rightId withInt:ADXConstraintSet_LEFT withInt:leftId withInt:ADXConstraintSet_RIGHT withInt:0];
      }
      else if (constraint->layout_->rightToRight_ != ADXConstraintSet_Layout_UNSET) {
        [self connectWithInt:leftId withInt:ADXConstraintSet_RIGHT withInt:constraint->layout_->rightToRight_ withInt:ADXConstraintSet_RIGHT withInt:0];
      }
      else if (constraint->layout_->leftToLeft_ != ADXConstraintSet_Layout_UNSET) {
        [self connectWithInt:rightId withInt:ADXConstraintSet_LEFT withInt:constraint->layout_->leftToLeft_ withInt:ADXConstraintSet_LEFT withInt:0];
      }
      [self clearWithInt:viewId withInt:ADXConstraintSet_LEFT];
      [self clearWithInt:viewId withInt:ADXConstraintSet_RIGHT];
    }
    else {
      int32_t startId = constraint->layout_->startToEnd_;
      int32_t endId = constraint->layout_->endToStart_;
      if (startId != ADXConstraintSet_Layout_UNSET || endId != ADXConstraintSet_Layout_UNSET) {
        if (startId != ADXConstraintSet_Layout_UNSET && endId != ADXConstraintSet_Layout_UNSET) {
          [self connectWithInt:startId withInt:ADXConstraintSet_END withInt:endId withInt:ADXConstraintSet_START withInt:0];
          [self connectWithInt:endId withInt:ADXConstraintSet_START withInt:leftId withInt:ADXConstraintSet_END withInt:0];
        }
        else if (endId != ADXConstraintSet_Layout_UNSET) {
          if (constraint->layout_->rightToRight_ != ADXConstraintSet_Layout_UNSET) {
            [self connectWithInt:leftId withInt:ADXConstraintSet_END withInt:constraint->layout_->rightToRight_ withInt:ADXConstraintSet_END withInt:0];
          }
          else if (constraint->layout_->leftToLeft_ != ADXConstraintSet_Layout_UNSET) {
            [self connectWithInt:endId withInt:ADXConstraintSet_START withInt:constraint->layout_->leftToLeft_ withInt:ADXConstraintSet_START withInt:0];
          }
        }
      }
      [self clearWithInt:viewId withInt:ADXConstraintSet_START];
      [self clearWithInt:viewId withInt:ADXConstraintSet_END];
    }
  }
}

- (void)createWithInt:(int32_t)guidelineID
              withInt:(int32_t)orientation {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:guidelineID]);
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->mIsGuideline_ = true;
  constraint->layout_->orientation_ = orientation;
}

- (void)createBarrierWithInt:(int32_t)id_
                     withInt:(int32_t)direction
                     withInt:(int32_t)margin
                withIntArray:(IOSIntArray *)referenced {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:id_]);
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->mHelperType_ = ADXConstraintSet_BARRIER_TYPE;
  constraint->layout_->mBarrierDirection_ = direction;
  constraint->layout_->mBarrierMargin_ = margin;
  constraint->layout_->mIsGuideline_ = false;
  JreStrongAssign(&constraint->layout_->mReferenceIds_, referenced);
}

- (void)setGuidelineBeginWithInt:(int32_t)guidelineID
                         withInt:(int32_t)margin {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_))->guideBegin_ = margin;
  ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_->guideEnd_ = ADXConstraintSet_Layout_UNSET;
  ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_->guidePercent_ = ADXConstraintSet_Layout_UNSET;
}

- (void)setGuidelineEndWithInt:(int32_t)guidelineID
                       withInt:(int32_t)margin {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_))->guideEnd_ = margin;
  ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_->guideBegin_ = ADXConstraintSet_Layout_UNSET;
  ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_->guidePercent_ = ADXConstraintSet_Layout_UNSET;
}

- (void)setGuidelinePercentWithInt:(int32_t)guidelineID
                         withFloat:(float)ratio {
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_))->guidePercent_ = ratio;
  ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_->guideEnd_ = ADXConstraintSet_Layout_UNSET;
  ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:guidelineID]))->layout_->guideBegin_ = ADXConstraintSet_Layout_UNSET;
}

- (void)setBarrierTypeWithInt:(int32_t)id_
                      withInt:(int32_t)type {
  ADXConstraintSet_Constraint *constraint = JreRetainedLocalValue([self getWithInt:id_]);
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->mHelperType_ = type;
}

- (ADXConstraintSet_Constraint *)getWithInt:(int32_t)id_ {
  if (![((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
    [((JavaUtilHashMap *) nil_chk(mConstraints_)) putWithId:JavaLangInteger_valueOfWithInt_(id_) withId:create_ADXConstraintSet_Constraint_init()];
  }
  return [((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
}

- (NSString *)sideToStringWithInt:(int32_t)side {
  return ADXConstraintSet_sideToStringWithInt_(self, side);
}

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                           withFloat:(float)value {
  ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withFloat_(c, type, value);
}

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                             withInt:(int32_t)value {
  ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withInt_(c, type, value);
}

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                        withNSString:(NSString *)value {
  ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withNSString_(c, type, value);
}

+ (void)setDeltaValueWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c
                                             withInt:(int32_t)type
                                         withBoolean:(bool)value {
  ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withBoolean_(c, type, value);
}

- (IOSIntArray *)convertReferenceStringWithADView:(ADView *)view
                                     withNSString:(NSString *)referenceIdString {
  return ADXConstraintSet_convertReferenceStringWithADView_withNSString_(self, view, referenceIdString);
}

- (ADXConstraintSet_Constraint *)getConstraintWithInt:(int32_t)id_ {
  if ([((JavaUtilHashMap *) nil_chk(mConstraints_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
    return [((JavaUtilHashMap *) nil_chk(mConstraints_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
  }
  return nil;
}

- (bool)isForceId {
  return mForceId_;
}

- (void)setForceIdWithBoolean:(bool)forceId {
  self->mForceId_ = forceId;
}

- (void)setValidateOnParseWithBoolean:(bool)validate {
  mValidate_ = validate;
}

- (void)dealloc {
  RELEASE_(mIdString_);
  RELEASE_(derivedState_);
  RELEASE_(mSavedAttributes_);
  RELEASE_(mConstraints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet_Constraint;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 41, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 42, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 44, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 46, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 85, 86, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 88, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 90, 30, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet_Constraint;", 0x1, 91, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 92, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 93, 95, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 93, 96, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 93, 97, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 98, 99, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet_Constraint;", 0x1, 100, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 101, 102, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 103, 102, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getParametersWithInt:);
  methods[2].selector = @selector(readFallbackWithADXConstraintSet:);
  methods[3].selector = @selector(readFallbackWithADXConstraintLayout:);
  methods[4].selector = @selector(applyDeltaFromWithADXConstraintSet:);
  methods[5].selector = @selector(cloneWithADXConstraintSet:);
  methods[6].selector = @selector(cloneWithADXConstraintLayout:);
  methods[7].selector = @selector(cloneWithADXConstraints:);
  methods[8].selector = @selector(applyToWithADXConstraintLayout:);
  methods[9].selector = @selector(applyCustomAttributesWithADXConstraintLayout:);
  methods[10].selector = @selector(applyToHelperWithADXConstraintHelper:withADXConstraintWidget:withADXConstraintLayout_LayoutParams:withADSparseArray:);
  methods[11].selector = @selector(applyToLayoutParamsWithInt:withADXConstraintLayout_LayoutParams:);
  methods[12].selector = @selector(applyToInternalWithADXConstraintLayout:withBoolean:);
  methods[13].selector = @selector(centerWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withFloat:);
  methods[14].selector = @selector(centerHorizontallyWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withFloat:);
  methods[15].selector = @selector(centerHorizontallyRtlWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withFloat:);
  methods[16].selector = @selector(centerVerticallyWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withFloat:);
  methods[17].selector = @selector(createVerticalChainWithInt:withInt:withInt:withInt:withIntArray:withFloatArray:withInt:);
  methods[18].selector = @selector(createHorizontalChainWithInt:withInt:withInt:withInt:withIntArray:withFloatArray:withInt:);
  methods[19].selector = @selector(createHorizontalChainRtlWithInt:withInt:withInt:withInt:withIntArray:withFloatArray:withInt:);
  methods[20].selector = @selector(createHorizontalChainWithInt:withInt:withInt:withInt:withIntArray:withFloatArray:withInt:withInt:withInt:);
  methods[21].selector = @selector(connectWithInt:withInt:withInt:withInt:withInt:);
  methods[22].selector = @selector(connectWithInt:withInt:withInt:withInt:);
  methods[23].selector = @selector(centerHorizontallyWithInt:withInt:);
  methods[24].selector = @selector(centerHorizontallyRtlWithInt:withInt:);
  methods[25].selector = @selector(centerVerticallyWithInt:withInt:);
  methods[26].selector = @selector(clearWithInt:);
  methods[27].selector = @selector(clearWithInt:withInt:);
  methods[28].selector = @selector(setMarginWithInt:withInt:withInt:);
  methods[29].selector = @selector(setGoneMarginWithInt:withInt:withInt:);
  methods[30].selector = @selector(setHorizontalBiasWithInt:withFloat:);
  methods[31].selector = @selector(setVerticalBiasWithInt:withFloat:);
  methods[32].selector = @selector(setDimensionRatioWithInt:withNSString:);
  methods[33].selector = @selector(setVisibilityWithInt:withInt:);
  methods[34].selector = @selector(getVisibilityModeWithInt:);
  methods[35].selector = @selector(getVisibilityWithInt:);
  methods[36].selector = @selector(getHeightWithInt:);
  methods[37].selector = @selector(getWidthWithInt:);
  methods[38].selector = @selector(setAlphaWithInt:withFloat:);
  methods[39].selector = @selector(getApplyElevationWithInt:);
  methods[40].selector = @selector(setApplyElevationWithInt:withBoolean:);
  methods[41].selector = @selector(setElevationWithInt:withFloat:);
  methods[42].selector = @selector(setRotationWithInt:withFloat:);
  methods[43].selector = @selector(setRotationXWithInt:withFloat:);
  methods[44].selector = @selector(setRotationYWithInt:withFloat:);
  methods[45].selector = @selector(setScaleXWithInt:withFloat:);
  methods[46].selector = @selector(setScaleYWithInt:withFloat:);
  methods[47].selector = @selector(setTransformPivotXWithInt:withFloat:);
  methods[48].selector = @selector(setTransformPivotYWithInt:withFloat:);
  methods[49].selector = @selector(setTransformPivotWithInt:withFloat:withFloat:);
  methods[50].selector = @selector(setTranslationXWithInt:withFloat:);
  methods[51].selector = @selector(setTranslationYWithInt:withFloat:);
  methods[52].selector = @selector(setTranslationWithInt:withFloat:withFloat:);
  methods[53].selector = @selector(setTranslationZWithInt:withFloat:);
  methods[54].selector = @selector(constrainHeightWithInt:withInt:);
  methods[55].selector = @selector(constrainWidthWithInt:withInt:);
  methods[56].selector = @selector(constrainCircleWithInt:withInt:withInt:withFloat:);
  methods[57].selector = @selector(constrainMaxHeightWithInt:withInt:);
  methods[58].selector = @selector(constrainMaxWidthWithInt:withInt:);
  methods[59].selector = @selector(constrainMinHeightWithInt:withInt:);
  methods[60].selector = @selector(constrainMinWidthWithInt:withInt:);
  methods[61].selector = @selector(constrainPercentWidthWithInt:withFloat:);
  methods[62].selector = @selector(constrainPercentHeightWithInt:withFloat:);
  methods[63].selector = @selector(constrainDefaultHeightWithInt:withInt:);
  methods[64].selector = @selector(constrainDefaultWidthWithInt:withInt:);
  methods[65].selector = @selector(setHorizontalWeightWithInt:withFloat:);
  methods[66].selector = @selector(setVerticalWeightWithInt:withFloat:);
  methods[67].selector = @selector(setHorizontalChainStyleWithInt:withInt:);
  methods[68].selector = @selector(setVerticalChainStyleWithInt:withInt:);
  methods[69].selector = @selector(addToHorizontalChainWithInt:withInt:withInt:);
  methods[70].selector = @selector(addToHorizontalChainRTLWithInt:withInt:withInt:);
  methods[71].selector = @selector(addToVerticalChainWithInt:withInt:withInt:);
  methods[72].selector = @selector(removeFromVerticalChainWithInt:);
  methods[73].selector = @selector(removeFromHorizontalChainWithInt:);
  methods[74].selector = @selector(createWithInt:withInt:);
  methods[75].selector = @selector(createBarrierWithInt:withInt:withInt:withIntArray:);
  methods[76].selector = @selector(setGuidelineBeginWithInt:withInt:);
  methods[77].selector = @selector(setGuidelineEndWithInt:withInt:);
  methods[78].selector = @selector(setGuidelinePercentWithInt:withFloat:);
  methods[79].selector = @selector(setBarrierTypeWithInt:withInt:);
  methods[80].selector = @selector(getWithInt:);
  methods[81].selector = @selector(sideToStringWithInt:);
  methods[82].selector = @selector(setDeltaValueWithADXConstraintSet_Constraint:withInt:withFloat:);
  methods[83].selector = @selector(setDeltaValueWithADXConstraintSet_Constraint:withInt:withInt:);
  methods[84].selector = @selector(setDeltaValueWithADXConstraintSet_Constraint:withInt:withNSString:);
  methods[85].selector = @selector(setDeltaValueWithADXConstraintSet_Constraint:withInt:withBoolean:);
  methods[86].selector = @selector(convertReferenceStringWithADView:withNSString:);
  methods[87].selector = @selector(getConstraintWithInt:);
  methods[88].selector = @selector(isForceId);
  methods[89].selector = @selector(setForceIdWithBoolean:);
  methods[90].selector = @selector(setValidateOnParseWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 104, -1, -1 },
    { "ERROR_MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 105, -1, -1 },
    { "INTERNAL_MATCH_PARENT", "I", .constantValue.asInt = ADXConstraintSet_INTERNAL_MATCH_PARENT, 0x1a, -1, -1, -1, -1 },
    { "INTERNAL_WRAP_CONTENT", "I", .constantValue.asInt = ADXConstraintSet_INTERNAL_WRAP_CONTENT, 0x1a, -1, -1, -1, -1 },
    { "INTERNAL_MATCH_CONSTRAINT", "I", .constantValue.asInt = ADXConstraintSet_INTERNAL_MATCH_CONSTRAINT, 0x1a, -1, -1, -1, -1 },
    { "INTERNAL_WRAP_CONTENT_CONSTRAINED", "I", .constantValue.asInt = ADXConstraintSet_INTERNAL_WRAP_CONTENT_CONSTRAINED, 0x1a, -1, -1, -1, -1 },
    { "mValidate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIdString_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "derivedState_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ROTATE_NONE", "I", .constantValue.asInt = ADXConstraintSet_ROTATE_NONE, 0x19, -1, -1, -1, -1 },
    { "ROTATE_PORTRATE_OF_RIGHT", "I", .constantValue.asInt = ADXConstraintSet_ROTATE_PORTRATE_OF_RIGHT, 0x19, -1, -1, -1, -1 },
    { "ROTATE_PORTRATE_OF_LEFT", "I", .constantValue.asInt = ADXConstraintSet_ROTATE_PORTRATE_OF_LEFT, 0x19, -1, -1, -1, -1 },
    { "ROTATE_RIGHT_OF_PORTRATE", "I", .constantValue.asInt = ADXConstraintSet_ROTATE_RIGHT_OF_PORTRATE, 0x19, -1, -1, -1, -1 },
    { "ROTATE_LEFT_OF_PORTRATE", "I", .constantValue.asInt = ADXConstraintSet_ROTATE_LEFT_OF_PORTRATE, 0x19, -1, -1, -1, -1 },
    { "mRotate_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSavedAttributes_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 106, -1 },
    { "mForceId_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "UNSET", "I", .constantValue.asInt = ADXConstraintSet_UNSET, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT", "I", .constantValue.asInt = ADXConstraintSet_MATCH_CONSTRAINT, 0x19, -1, -1, -1, -1 },
    { "WRAP_CONTENT", "I", .constantValue.asInt = ADXConstraintSet_WRAP_CONTENT, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_WRAP", "I", .constantValue.asInt = ADXConstraintSet_MATCH_CONSTRAINT_WRAP, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_SPREAD", "I", .constantValue.asInt = ADXConstraintSet_MATCH_CONSTRAINT_SPREAD, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_MATCH_CONSTRAINT_PERCENT, 0x19, -1, -1, -1, -1 },
    { "PARENT_ID", "I", .constantValue.asInt = ADXConstraintSet_PARENT_ID, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL", "I", .constantValue.asInt = ADXConstraintSet_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXConstraintSet_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_GUIDELINE", "I", .constantValue.asInt = ADXConstraintSet_HORIZONTAL_GUIDELINE, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_GUIDELINE", "I", .constantValue.asInt = ADXConstraintSet_VERTICAL_GUIDELINE, 0x19, -1, -1, -1, -1 },
    { "VISIBLE", "I", .constantValue.asInt = ADXConstraintSet_VISIBLE, 0x19, -1, -1, -1, -1 },
    { "INVISIBLE", "I", .constantValue.asInt = ADXConstraintSet_INVISIBLE, 0x19, -1, -1, -1, -1 },
    { "GONE", "I", .constantValue.asInt = ADXConstraintSet_GONE, 0x19, -1, -1, -1, -1 },
    { "LEFT", "I", .constantValue.asInt = ADXConstraintSet_LEFT, 0x19, -1, -1, -1, -1 },
    { "RIGHT", "I", .constantValue.asInt = ADXConstraintSet_RIGHT, 0x19, -1, -1, -1, -1 },
    { "TOP", "I", .constantValue.asInt = ADXConstraintSet_TOP, 0x19, -1, -1, -1, -1 },
    { "BOTTOM", "I", .constantValue.asInt = ADXConstraintSet_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "BASELINE", "I", .constantValue.asInt = ADXConstraintSet_BASELINE, 0x19, -1, -1, -1, -1 },
    { "START", "I", .constantValue.asInt = ADXConstraintSet_START, 0x19, -1, -1, -1, -1 },
    { "END", "I", .constantValue.asInt = ADXConstraintSet_END, 0x19, -1, -1, -1, -1 },
    { "CIRCLE_REFERENCE", "I", .constantValue.asInt = ADXConstraintSet_CIRCLE_REFERENCE, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD", "I", .constantValue.asInt = ADXConstraintSet_CHAIN_SPREAD, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD_INSIDE", "I", .constantValue.asInt = ADXConstraintSet_CHAIN_SPREAD_INSIDE, 0x19, -1, -1, -1, -1 },
    { "VISIBILITY_MODE_NORMAL", "I", .constantValue.asInt = ADXConstraintSet_VISIBILITY_MODE_NORMAL, 0x19, -1, -1, -1, -1 },
    { "VISIBILITY_MODE_IGNORE", "I", .constantValue.asInt = ADXConstraintSet_VISIBILITY_MODE_IGNORE, 0x19, -1, -1, -1, -1 },
    { "CHAIN_PACKED", "I", .constantValue.asInt = ADXConstraintSet_CHAIN_PACKED, 0x19, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXConstraintSet_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_TYPE", "I", .constantValue.asInt = ADXConstraintSet_BARRIER_TYPE, 0x1a, -1, -1, -1, -1 },
    { "mConstraints_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 107, -1 },
    { "BASELINE_TO_BASELINE", "I", .constantValue.asInt = ADXConstraintSet_BASELINE_TO_BASELINE, 0x1a, -1, -1, -1, -1 },
    { "BOTTOM_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_BOTTOM_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "BOTTOM_TO_BOTTOM", "I", .constantValue.asInt = ADXConstraintSet_BOTTOM_TO_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "BOTTOM_TO_TOP", "I", .constantValue.asInt = ADXConstraintSet_BOTTOM_TO_TOP, 0x1a, -1, -1, -1, -1 },
    { "DIMENSION_RATIO", "I", .constantValue.asInt = ADXConstraintSet_DIMENSION_RATIO, 0x1a, -1, -1, -1, -1 },
    { "EDITOR_ABSOLUTE_X", "I", .constantValue.asInt = ADXConstraintSet_EDITOR_ABSOLUTE_X, 0x1a, -1, -1, -1, -1 },
    { "EDITOR_ABSOLUTE_Y", "I", .constantValue.asInt = ADXConstraintSet_EDITOR_ABSOLUTE_Y, 0x1a, -1, -1, -1, -1 },
    { "END_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_END_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "END_TO_END", "I", .constantValue.asInt = ADXConstraintSet_END_TO_END, 0x1a, -1, -1, -1, -1 },
    { "END_TO_START", "I", .constantValue.asInt = ADXConstraintSet_END_TO_START, 0x1a, -1, -1, -1, -1 },
    { "GONE_BOTTOM_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_BOTTOM_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_END_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_END_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_LEFT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_LEFT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_RIGHT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_RIGHT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_START_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_START_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_TOP_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_TOP_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GUIDE_BEGIN", "I", .constantValue.asInt = ADXConstraintSet_GUIDE_BEGIN, 0x1a, -1, -1, -1, -1 },
    { "GUIDE_END", "I", .constantValue.asInt = ADXConstraintSet_GUIDE_END, 0x1a, -1, -1, -1, -1 },
    { "GUIDE_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_GUIDE_PERCENT, 0x1a, -1, -1, -1, -1 },
    { "HORIZONTAL_BIAS", "I", .constantValue.asInt = ADXConstraintSet_HORIZONTAL_BIAS, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_HEIGHT", "I", .constantValue.asInt = ADXConstraintSet_LAYOUT_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_VISIBILITY", "I", .constantValue.asInt = ADXConstraintSet_LAYOUT_VISIBILITY, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_WIDTH", "I", .constantValue.asInt = ADXConstraintSet_LAYOUT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "LEFT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_LEFT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "LEFT_TO_LEFT", "I", .constantValue.asInt = ADXConstraintSet_LEFT_TO_LEFT, 0x1a, -1, -1, -1, -1 },
    { "LEFT_TO_RIGHT", "I", .constantValue.asInt = ADXConstraintSet_LEFT_TO_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "ORIENTATION", "I", .constantValue.asInt = ADXConstraintSet_ORIENTATION, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_RIGHT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_TO_LEFT", "I", .constantValue.asInt = ADXConstraintSet_RIGHT_TO_LEFT, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_TO_RIGHT", "I", .constantValue.asInt = ADXConstraintSet_RIGHT_TO_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "START_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_START_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "START_TO_END", "I", .constantValue.asInt = ADXConstraintSet_START_TO_END, 0x1a, -1, -1, -1, -1 },
    { "START_TO_START", "I", .constantValue.asInt = ADXConstraintSet_START_TO_START, 0x1a, -1, -1, -1, -1 },
    { "TOP_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_TOP_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "TOP_TO_BOTTOM", "I", .constantValue.asInt = ADXConstraintSet_TOP_TO_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "TOP_TO_TOP", "I", .constantValue.asInt = ADXConstraintSet_TOP_TO_TOP, 0x1a, -1, -1, -1, -1 },
    { "VERTICAL_BIAS", "I", .constantValue.asInt = ADXConstraintSet_VERTICAL_BIAS, 0x1a, -1, -1, -1, -1 },
    { "VIEW_ID", "I", .constantValue.asInt = ADXConstraintSet_VIEW_ID, 0x1a, -1, -1, -1, -1 },
    { "HORIZONTAL_WEIGHT", "I", .constantValue.asInt = ADXConstraintSet_HORIZONTAL_WEIGHT, 0x1a, -1, -1, -1, -1 },
    { "VERTICAL_WEIGHT", "I", .constantValue.asInt = ADXConstraintSet_VERTICAL_WEIGHT, 0x1a, -1, -1, -1, -1 },
    { "HORIZONTAL_STYLE", "I", .constantValue.asInt = ADXConstraintSet_HORIZONTAL_STYLE, 0x1a, -1, -1, -1, -1 },
    { "VERTICAL_STYLE", "I", .constantValue.asInt = ADXConstraintSet_VERTICAL_STYLE, 0x1a, -1, -1, -1, -1 },
    { "ALPHA", "I", .constantValue.asInt = ADXConstraintSet_ALPHA, 0x1a, -1, -1, -1, -1 },
    { "ELEVATION", "I", .constantValue.asInt = ADXConstraintSet_ELEVATION, 0x1a, -1, -1, -1, -1 },
    { "ROTATION_X", "I", .constantValue.asInt = ADXConstraintSet_ROTATION_X, 0x1a, -1, -1, -1, -1 },
    { "ROTATION_Y", "I", .constantValue.asInt = ADXConstraintSet_ROTATION_Y, 0x1a, -1, -1, -1, -1 },
    { "SCALE_X", "I", .constantValue.asInt = ADXConstraintSet_SCALE_X, 0x1a, -1, -1, -1, -1 },
    { "SCALE_Y", "I", .constantValue.asInt = ADXConstraintSet_SCALE_Y, 0x1a, -1, -1, -1, -1 },
    { "TRANSFORM_PIVOT_X", "I", .constantValue.asInt = ADXConstraintSet_TRANSFORM_PIVOT_X, 0x1a, -1, -1, -1, -1 },
    { "TRANSFORM_PIVOT_Y", "I", .constantValue.asInt = ADXConstraintSet_TRANSFORM_PIVOT_Y, 0x1a, -1, -1, -1, -1 },
    { "TRANSLATION_X", "I", .constantValue.asInt = ADXConstraintSet_TRANSLATION_X, 0x1a, -1, -1, -1, -1 },
    { "TRANSLATION_Y", "I", .constantValue.asInt = ADXConstraintSet_TRANSLATION_Y, 0x1a, -1, -1, -1, -1 },
    { "TRANSLATION_Z", "I", .constantValue.asInt = ADXConstraintSet_TRANSLATION_Z, 0x1a, -1, -1, -1, -1 },
    { "WIDTH_DEFAULT", "I", .constantValue.asInt = ADXConstraintSet_WIDTH_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "HEIGHT_DEFAULT", "I", .constantValue.asInt = ADXConstraintSet_HEIGHT_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "WIDTH_MAX", "I", .constantValue.asInt = ADXConstraintSet_WIDTH_MAX, 0x1a, -1, -1, -1, -1 },
    { "HEIGHT_MAX", "I", .constantValue.asInt = ADXConstraintSet_HEIGHT_MAX, 0x1a, -1, -1, -1, -1 },
    { "WIDTH_MIN", "I", .constantValue.asInt = ADXConstraintSet_WIDTH_MIN, 0x1a, -1, -1, -1, -1 },
    { "HEIGHT_MIN", "I", .constantValue.asInt = ADXConstraintSet_HEIGHT_MIN, 0x1a, -1, -1, -1, -1 },
    { "ROTATION", "I", .constantValue.asInt = ADXConstraintSet_ROTATION, 0x1a, -1, -1, -1, -1 },
    { "CIRCLE", "I", .constantValue.asInt = ADXConstraintSet_CIRCLE, 0x1a, -1, -1, -1, -1 },
    { "CIRCLE_RADIUS", "I", .constantValue.asInt = ADXConstraintSet_CIRCLE_RADIUS, 0x1a, -1, -1, -1, -1 },
    { "CIRCLE_ANGLE", "I", .constantValue.asInt = ADXConstraintSet_CIRCLE_ANGLE, 0x1a, -1, -1, -1, -1 },
    { "ANIMATE_RELATIVE_TO", "I", .constantValue.asInt = ADXConstraintSet_ANIMATE_RELATIVE_TO, 0x1a, -1, -1, -1, -1 },
    { "TRANSITION_EASING", "I", .constantValue.asInt = ADXConstraintSet_TRANSITION_EASING, 0x1a, -1, -1, -1, -1 },
    { "DRAW_PATH", "I", .constantValue.asInt = ADXConstraintSet_DRAW_PATH, 0x1a, -1, -1, -1, -1 },
    { "TRANSITION_PATH_ROTATE", "I", .constantValue.asInt = ADXConstraintSet_TRANSITION_PATH_ROTATE, 0x1a, -1, -1, -1, -1 },
    { "PROGRESS", "I", .constantValue.asInt = ADXConstraintSet_PROGRESS, 0x1a, -1, -1, -1, -1 },
    { "WIDTH_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_WIDTH_PERCENT, 0x1a, -1, -1, -1, -1 },
    { "HEIGHT_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_HEIGHT_PERCENT, 0x1a, -1, -1, -1, -1 },
    { "CHAIN_USE_RTL", "I", .constantValue.asInt = ADXConstraintSet_CHAIN_USE_RTL, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_DIRECTION", "I", .constantValue.asInt = ADXConstraintSet_BARRIER_DIRECTION, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_BARRIER_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "CONSTRAINT_REFERENCED_IDS", "I", .constantValue.asInt = ADXConstraintSet_CONSTRAINT_REFERENCED_IDS, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_ALLOWS_GONE_WIDGETS", "I", .constantValue.asInt = ADXConstraintSet_BARRIER_ALLOWS_GONE_WIDGETS, 0x1a, -1, -1, -1, -1 },
    { "PATH_MOTION_ARC", "I", .constantValue.asInt = ADXConstraintSet_PATH_MOTION_ARC, 0x1a, -1, -1, -1, -1 },
    { "CONSTRAINT_TAG", "I", .constantValue.asInt = ADXConstraintSet_CONSTRAINT_TAG, 0x1a, -1, -1, -1, -1 },
    { "VISIBILITY_MODE", "I", .constantValue.asInt = ADXConstraintSet_VISIBILITY_MODE, 0x1a, -1, -1, -1, -1 },
    { "MOTION_STAGGER", "I", .constantValue.asInt = ADXConstraintSet_MOTION_STAGGER, 0x1a, -1, -1, -1, -1 },
    { "CONSTRAINED_WIDTH", "I", .constantValue.asInt = ADXConstraintSet_CONSTRAINED_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "CONSTRAINED_HEIGHT", "I", .constantValue.asInt = ADXConstraintSet_CONSTRAINED_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "ANIMATE_CIRCLE_ANGLE_TO", "I", .constantValue.asInt = ADXConstraintSet_ANIMATE_CIRCLE_ANGLE_TO, 0x1a, -1, -1, -1, -1 },
    { "TRANSFORM_PIVOT_TARGET", "I", .constantValue.asInt = ADXConstraintSet_TRANSFORM_PIVOT_TARGET, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_STEPS", "I", .constantValue.asInt = ADXConstraintSet_QUANTIZE_MOTION_STEPS, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_PHASE", "I", .constantValue.asInt = ADXConstraintSet_QUANTIZE_MOTION_PHASE, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_INTERPOLATOR", "I", .constantValue.asInt = ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR, 0x1a, -1, -1, -1, -1 },
    { "UNUSED", "I", .constantValue.asInt = ADXConstraintSet_UNUSED, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_INTERPOLATOR_TYPE", "I", .constantValue.asInt = ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_TYPE, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_INTERPOLATOR_ID", "I", .constantValue.asInt = ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_ID, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_INTERPOLATOR_STR", "I", .constantValue.asInt = ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_STR, 0x1a, -1, -1, -1, -1 },
    { "BASELINE_TO_TOP", "I", .constantValue.asInt = ADXConstraintSet_BASELINE_TO_TOP, 0x1a, -1, -1, -1, -1 },
    { "BASELINE_TO_BOTTOM", "I", .constantValue.asInt = ADXConstraintSet_BASELINE_TO_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "BASELINE_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_BASELINE_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_BASELINE_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_GONE_BASELINE_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_CONSTRAINT_WIDTH", "I", .constantValue.asInt = ADXConstraintSet_LAYOUT_CONSTRAINT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_CONSTRAINT_HEIGHT", "I", .constantValue.asInt = ADXConstraintSet_LAYOUT_CONSTRAINT_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_WRAP_BEHAVIOR", "I", .constantValue.asInt = ADXConstraintSet_LAYOUT_WRAP_BEHAVIOR, 0x1a, -1, -1, -1, -1 },
    { "MOTION_TARGET", "I", .constantValue.asInt = ADXConstraintSet_MOTION_TARGET, 0x1a, -1, -1, -1, -1 },
    { "KEY_WEIGHT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 108, -1, -1 },
    { "KEY_RATIO", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 109, -1, -1 },
    { "KEY_PERCENT_PARENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 110, -1, -1 },
  };
  static const void *ptrTable[] = { "getParameters", "I", "readFallback", "LADXConstraintSet;", "LADXConstraintLayout;", "applyDeltaFrom", "clone", "LADXConstraints;", "applyTo", "applyCustomAttributes", "applyToHelper", "LADXConstraintHelper;LADXConstraintWidget;LADXConstraintLayout_LayoutParams;LADSparseArray;", "(Landroidx/constraintlayout/widget/ConstraintHelper;Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/widget/ConstraintLayout$LayoutParams;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "applyToLayoutParams", "ILADXConstraintLayout_LayoutParams;", "applyToInternal", "LADXConstraintLayout;Z", "center", "IIIIIIIF", "centerHorizontally", "centerHorizontallyRtl", "centerVertically", "createVerticalChain", "IIII[I[FI", "createHorizontalChain", "createHorizontalChainRtl", "IIII[I[FIII", "connect", "IIIII", "IIII", "II", "clear", "setMargin", "III", "setGoneMargin", "setHorizontalBias", "IF", "setVerticalBias", "setDimensionRatio", "ILNSString;", "setVisibility", "getVisibilityMode", "getVisibility", "getHeight", "getWidth", "setAlpha", "getApplyElevation", "setApplyElevation", "IZ", "setElevation", "setRotation", "setRotationX", "setRotationY", "setScaleX", "setScaleY", "setTransformPivotX", "setTransformPivotY", "setTransformPivot", "IFF", "setTranslationX", "setTranslationY", "setTranslation", "setTranslationZ", "constrainHeight", "constrainWidth", "constrainCircle", "IIIF", "constrainMaxHeight", "constrainMaxWidth", "constrainMinHeight", "constrainMinWidth", "constrainPercentWidth", "constrainPercentHeight", "constrainDefaultHeight", "constrainDefaultWidth", "setHorizontalWeight", "setVerticalWeight", "setHorizontalChainStyle", "setVerticalChainStyle", "addToHorizontalChain", "addToHorizontalChainRTL", "addToVerticalChain", "removeFromVerticalChain", "removeFromHorizontalChain", "create", "createBarrier", "III[I", "setGuidelineBegin", "setGuidelineEnd", "setGuidelinePercent", "setBarrierType", "get", "sideToString", "setDeltaValue", "LADXConstraintSet_Constraint;IF", "LADXConstraintSet_Constraint;II", "LADXConstraintSet_Constraint;ILNSString;", "LADXConstraintSet_Constraint;IZ", "convertReferenceString", "LADView;LNSString;", "getConstraint", "setForceId", "Z", "setValidateOnParse", &ADXConstraintSet_TAG, &ADXConstraintSet_ERROR_MESSAGE, "Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/widget/ConstraintAttribute;>;", "Ljava/util/HashMap<Ljava/lang/Integer;Landroidx/constraintlayout/widget/ConstraintSet$Constraint;>;", &ADXConstraintSet_KEY_WEIGHT, &ADXConstraintSet_KEY_RATIO, &ADXConstraintSet_KEY_PERCENT_PARENT, "LADXConstraintSet_Layout;LADXConstraintSet_Transform;LADXConstraintSet_PropertySet;LADXConstraintSet_Motion;LADXConstraintSet_Constraint;" };
  static const J2ObjcClassInfo _ADXConstraintSet = { "ConstraintSet", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x1, 91, 148, -1, 111, -1, -1, -1 };
  return &_ADXConstraintSet;
}

@end

void ADXConstraintSet_init(ADXConstraintSet *self) {
  NSObject_init(self);
  JreStrongAssign(&self->derivedState_, @"");
  self->mRotate_ = 0;
  JreStrongAssignAndConsume(&self->mSavedAttributes_, new_JavaUtilHashMap_init());
  self->mForceId_ = true;
  JreStrongAssignAndConsume(&self->mConstraints_, new_JavaUtilHashMap_init());
}

ADXConstraintSet *new_ADXConstraintSet_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet, init)
}

ADXConstraintSet *create_ADXConstraintSet_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet, init)
}

void ADXConstraintSet_createHorizontalChainWithInt_withInt_withInt_withInt_withIntArray_withFloatArray_withInt_withInt_withInt_(ADXConstraintSet *self, int32_t leftId, int32_t leftSide, int32_t rightId, int32_t rightSide, IOSIntArray *chainIds, IOSFloatArray *weights, int32_t style, int32_t left, int32_t right) {
  if (((IOSIntArray *) nil_chk(chainIds))->size_ < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"must have 2 or more widgets in a chain");
  }
  if (weights != nil && weights->size_ != chainIds->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"must have 2 or more widgets in a chain");
  }
  if (weights != nil) {
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:IOSIntArray_Get(chainIds, 0)]))->layout_))->horizontalWeight_ = IOSFloatArray_Get(weights, 0);
  }
  ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:IOSIntArray_Get(chainIds, 0)]))->layout_))->horizontalChainStyle_ = style;
  [self connectWithInt:IOSIntArray_Get(chainIds, 0) withInt:left withInt:leftId withInt:leftSide withInt:ADXConstraintSet_UNSET];
  for (int32_t i = 1; i < chainIds->size_; i++) {
    int32_t chainId = IOSIntArray_Get(chainIds, i);
    [self connectWithInt:IOSIntArray_Get(chainIds, i) withInt:left withInt:IOSIntArray_Get(chainIds, i - 1) withInt:right withInt:ADXConstraintSet_UNSET];
    [self connectWithInt:IOSIntArray_Get(chainIds, i - 1) withInt:right withInt:IOSIntArray_Get(chainIds, i) withInt:left withInt:ADXConstraintSet_UNSET];
    if (weights != nil) {
      ((ADXConstraintSet_Constraint *) nil_chk([self getWithInt:IOSIntArray_Get(chainIds, i)]))->layout_->horizontalWeight_ = IOSFloatArray_Get(weights, i);
    }
  }
  [self connectWithInt:IOSIntArray_Get(chainIds, chainIds->size_ - 1) withInt:right withInt:rightId withInt:rightSide withInt:ADXConstraintSet_UNSET];
}

NSString *ADXConstraintSet_sideToStringWithInt_(ADXConstraintSet *self, int32_t side) {
  switch (side) {
    case ADXConstraintSet_LEFT:
    return @"left";
    case ADXConstraintSet_RIGHT:
    return @"right";
    case ADXConstraintSet_TOP:
    return @"top";
    case ADXConstraintSet_BOTTOM:
    return @"bottom";
    case ADXConstraintSet_BASELINE:
    return @"baseline";
    case ADXConstraintSet_START:
    return @"start";
    case ADXConstraintSet_END:
    return @"end";
  }
  return @"undefined";
}

void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withFloat_(ADXConstraintSet_Constraint *c, int32_t type, float value) {
  ADXConstraintSet_initialize();
  switch (type) {
    case ADXConstraintSet_GUIDE_PERCENT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->guidePercent_ = value;
    break;
    case ADXConstraintSet_CIRCLE_ANGLE:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->circleAngle_ = value;
    break;
    case ADXConstraintSet_HORIZONTAL_BIAS:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->horizontalBias_ = value;
    break;
    case ADXConstraintSet_VERTICAL_BIAS:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->verticalBias_ = value;
    break;
    case ADXConstraintSet_ALPHA:
    ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->propertySet_))->alpha_ = value;
    break;
    case ADXConstraintSet_ELEVATION:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->elevation_ = value;
    c->transform_->applyElevation_ = true;
    break;
    case ADXConstraintSet_ROTATION:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->rotation_ = value;
    break;
    case ADXConstraintSet_ROTATION_X:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->rotationX_ = value;
    break;
    case ADXConstraintSet_ROTATION_Y:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->rotationY_ = value;
    break;
    case ADXConstraintSet_SCALE_X:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->scaleX_ = value;
    break;
    case ADXConstraintSet_SCALE_Y:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->scaleY_ = value;
    break;
    case ADXConstraintSet_TRANSFORM_PIVOT_X:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->transformPivotX_ = value;
    break;
    case ADXConstraintSet_TRANSFORM_PIVOT_Y:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->transformPivotY_ = value;
    break;
    case ADXConstraintSet_TRANSLATION_X:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->translationX_ = value;
    break;
    case ADXConstraintSet_TRANSLATION_Y:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->translationY_ = value;
    break;
    case ADXConstraintSet_TRANSLATION_Z:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->translationZ_ = value;
    break;
    case ADXConstraintSet_VERTICAL_WEIGHT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->verticalWeight_ = value;
    break;
    case ADXConstraintSet_HORIZONTAL_WEIGHT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->horizontalWeight_ = value;
    break;
    case ADXConstraintSet_WIDTH_PERCENT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->widthPercent_ = value;
    break;
    case ADXConstraintSet_HEIGHT_PERCENT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->heightPercent_ = value;
    break;
    case ADXConstraintSet_PROGRESS:
    ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->propertySet_))->mProgress_ = value;
    break;
    case ADXConstraintSet_TRANSITION_PATH_ROTATE:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mPathRotate_ = value;
    break;
    case ADXConstraintSet_MOTION_STAGGER:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mMotionStagger_ = value;
    break;
    case ADXConstraintSet_QUANTIZE_MOTION_PHASE:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mQuantizeMotionPhase_ = value;
    break;
    case ADXConstraintSet_UNUSED:
    break;
    default:
    ADLog_wWithNSString_withNSString_(ADXConstraintSet_TAG, @"Unknown attribute 0x");
  }
}

void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withInt_(ADXConstraintSet_Constraint *c, int32_t type, int32_t value) {
  ADXConstraintSet_initialize();
  switch (type) {
    case ADXConstraintSet_EDITOR_ABSOLUTE_X:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->editorAbsoluteX_ = value;
    break;
    case ADXConstraintSet_EDITOR_ABSOLUTE_Y:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->editorAbsoluteY_ = value;
    break;
    case ADXConstraintSet_LAYOUT_WRAP_BEHAVIOR:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mWrapBehavior_ = value;
    break;
    case ADXConstraintSet_GUIDE_BEGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->guideBegin_ = value;
    break;
    case ADXConstraintSet_GUIDE_END:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->guideEnd_ = value;
    break;
    case ADXConstraintSet_ORIENTATION:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->orientation_ = value;
    break;
    case ADXConstraintSet_CIRCLE:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->circleConstraint_ = value;
    break;
    case ADXConstraintSet_CIRCLE_RADIUS:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->circleRadius_ = value;
    break;
    case ADXConstraintSet_GONE_LEFT_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneLeftMargin_ = value;
    break;
    case ADXConstraintSet_GONE_TOP_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneTopMargin_ = value;
    break;
    case ADXConstraintSet_GONE_RIGHT_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneRightMargin_ = value;
    break;
    case ADXConstraintSet_GONE_BOTTOM_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneBottomMargin_ = value;
    break;
    case ADXConstraintSet_GONE_START_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneStartMargin_ = value;
    break;
    case ADXConstraintSet_GONE_END_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneEndMargin_ = value;
    break;
    case ADXConstraintSet_GONE_BASELINE_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->goneBaselineMargin_ = value;
    break;
    case ADXConstraintSet_LEFT_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->leftMargin_ = value;
    break;
    case ADXConstraintSet_RIGHT_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->rightMargin_ = value;
    break;
    case ADXConstraintSet_START_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->startMargin_ = value;
    break;
    case ADXConstraintSet_END_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->endMargin_ = value;
    break;
    case ADXConstraintSet_TOP_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->topMargin_ = value;
    break;
    case ADXConstraintSet_BOTTOM_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->bottomMargin_ = value;
    break;
    case ADXConstraintSet_BASELINE_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->baselineMargin_ = value;
    break;
    case ADXConstraintSet_LAYOUT_WIDTH:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mWidth_ = value;
    break;
    case ADXConstraintSet_LAYOUT_HEIGHT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mHeight_ = value;
    break;
    case ADXConstraintSet_WIDTH_DEFAULT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->widthDefault_ = value;
    break;
    case ADXConstraintSet_HEIGHT_DEFAULT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->heightDefault_ = value;
    break;
    case ADXConstraintSet_HEIGHT_MAX:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->heightMax_ = value;
    break;
    case ADXConstraintSet_WIDTH_MAX:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->widthMax_ = value;
    break;
    case ADXConstraintSet_HEIGHT_MIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->heightMin_ = value;
    break;
    case ADXConstraintSet_WIDTH_MIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->widthMin_ = value;
    break;
    case ADXConstraintSet_LAYOUT_VISIBILITY:
    ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->propertySet_))->visibility_ = value;
    break;
    case ADXConstraintSet_VISIBILITY_MODE:
    ((ADXConstraintSet_PropertySet *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->propertySet_))->mVisibilityMode_ = value;
    break;
    case ADXConstraintSet_TRANSFORM_PIVOT_TARGET:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->transformPivotTarget_ = value;
    break;
    case ADXConstraintSet_VERTICAL_STYLE:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->verticalChainStyle_ = value;
    break;
    case ADXConstraintSet_HORIZONTAL_STYLE:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->horizontalChainStyle_ = value;
    break;
    case ADXConstraintSet_VIEW_ID:
    ((ADXConstraintSet_Constraint *) nil_chk(c))->mViewId_ = value;
    break;
    case ADXConstraintSet_ANIMATE_RELATIVE_TO:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mAnimateRelativeTo_ = value;
    break;
    case ADXConstraintSet_ANIMATE_CIRCLE_ANGLE_TO:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mAnimateCircleAngleTo_ = value;
    break;
    case ADXConstraintSet_PATH_MOTION_ARC:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mPathMotionArc_ = value;
    break;
    case ADXConstraintSet_QUANTIZE_MOTION_STEPS:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mQuantizeMotionSteps_ = value;
    break;
    case ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_TYPE:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mQuantizeInterpolatorType_ = value;
    break;
    case ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_ID:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mQuantizeInterpolatorID_ = value;
    break;
    case ADXConstraintSet_DRAW_PATH:
    ((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mDrawPath_ = value;
    break;
    case ADXConstraintSet_BARRIER_DIRECTION:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mBarrierDirection_ = value;
    break;
    case ADXConstraintSet_BARRIER_MARGIN:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mBarrierMargin_ = value;
    break;
    case ADXConstraintSet_UNUSED:
    break;
    default:
    ADLog_wWithNSString_withNSString_(ADXConstraintSet_TAG, @"Unknown attribute 0x");
  }
}

void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withNSString_(ADXConstraintSet_Constraint *c, int32_t type, NSString *value) {
  ADXConstraintSet_initialize();
  switch (type) {
    case ADXConstraintSet_DIMENSION_RATIO:
    JreStrongAssign(&((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->dimensionRatio_, value);
    break;
    case ADXConstraintSet_TRANSITION_EASING:
    JreStrongAssign(&((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mTransitionEasing_, value);
    break;
    case ADXConstraintSet_QUANTIZE_MOTION_INTERPOLATOR_STR:
    JreStrongAssign(&((ADXConstraintSet_Motion *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->motion_))->mQuantizeInterpolatorString_, value);
    break;
    case ADXConstraintSet_CONSTRAINT_REFERENCED_IDS:
    JreStrongAssign(&((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mReferenceIdString_, value);
    break;
    case ADXConstraintSet_CONSTRAINT_TAG:
    JreStrongAssign(&((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mConstraintTag_, value);
    break;
    case ADXConstraintSet_UNUSED:
    break;
    default:
    ADLog_wWithNSString_withNSString_(ADXConstraintSet_TAG, @"Unknown attribute 0x");
  }
}

void ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withBoolean_(ADXConstraintSet_Constraint *c, int32_t type, bool value) {
  ADXConstraintSet_initialize();
  switch (type) {
    case ADXConstraintSet_CONSTRAINED_WIDTH:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->constrainedWidth_ = value;
    break;
    case ADXConstraintSet_CONSTRAINED_HEIGHT:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->constrainedHeight_ = value;
    break;
    case ADXConstraintSet_ELEVATION:
    ((ADXConstraintSet_Transform *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->transform_))->applyElevation_ = value;
    break;
    case ADXConstraintSet_BARRIER_ALLOWS_GONE_WIDGETS:
    ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(c))->layout_))->mBarrierAllowsGoneWidgets_ = value;
    break;
    case ADXConstraintSet_UNUSED:
    break;
    default:
    ADLog_wWithNSString_withNSString_(ADXConstraintSet_TAG, @"Unknown attribute 0x");
  }
}

IOSIntArray *ADXConstraintSet_convertReferenceStringWithADView_withNSString_(ADXConstraintSet *self, ADView *view, NSString *referenceIdString) {
  IOSObjectArray *split = [((NSString *) nil_chk(referenceIdString)) java_split:@","];
  ADContext *context = JreRetainedLocalValue([((ADView *) nil_chk(view)) getContext]);
  IOSIntArray *tags = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(split))->size_];
  int32_t count = 0;
  for (int32_t i = 0; i < split->size_; i++) {
    NSString *idString = IOSObjectArray_Get(split, i);
    idString = [((NSString *) nil_chk(idString)) java_trim];
    int32_t tag = 0;
    @try {
      IOSClass *res = ADR_id_class_();
    }
    @catch (JavaLangException *e) {
    }
    if (tag == 0) {
      tag = [((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getIdentifierWithNSString:idString withNSString:@"id" withNSString:[context getPackageName]];
    }
    if (tag == 0 && [view isInEditMode] && [[view getParent] isKindOfClass:[ADXConstraintLayout class]]) {
      ADXConstraintLayout *constraintLayout = (ADXConstraintLayout *) cast_chk([view getParent], [ADXConstraintLayout class]);
      id value = JreRetainedLocalValue([((ADXConstraintLayout *) nil_chk(constraintLayout)) getDesignInformationWithInt:0 withId:idString]);
      if (value != nil && [value isKindOfClass:[JavaLangInteger class]]) {
        tag = [(JavaLangInteger *) cast_chk(value, [JavaLangInteger class]) intValue];
      }
    }
    *IOSIntArray_GetRef(tags, count++) = tag;
  }
  if (count != split->size_) {
    tags = JavaUtilArrays_copyOfWithIntArray_withInt_(tags, count);
  }
  return tags;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet)

J2OBJC_NAME_MAPPING(ADXConstraintSet, "androidx.constraintlayout.widget", "ADX")

@implementation ADXConstraintSet_Layout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_Layout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copyFromWithADXConstraintSet_Layout:(ADXConstraintSet_Layout *)src {
  mIsGuideline_ = ((ADXConstraintSet_Layout *) nil_chk(src))->mIsGuideline_;
  mWidth_ = src->mWidth_;
  mApply_ = src->mApply_;
  mHeight_ = src->mHeight_;
  guideBegin_ = src->guideBegin_;
  guideEnd_ = src->guideEnd_;
  guidePercent_ = src->guidePercent_;
  leftToLeft_ = src->leftToLeft_;
  leftToRight_ = src->leftToRight_;
  rightToLeft_ = src->rightToLeft_;
  rightToRight_ = src->rightToRight_;
  topToTop_ = src->topToTop_;
  topToBottom_ = src->topToBottom_;
  bottomToTop_ = src->bottomToTop_;
  bottomToBottom_ = src->bottomToBottom_;
  baselineToBaseline_ = src->baselineToBaseline_;
  baselineToTop_ = src->baselineToTop_;
  baselineToBottom_ = src->baselineToBottom_;
  startToEnd_ = src->startToEnd_;
  startToStart_ = src->startToStart_;
  endToStart_ = src->endToStart_;
  endToEnd_ = src->endToEnd_;
  horizontalBias_ = src->horizontalBias_;
  verticalBias_ = src->verticalBias_;
  JreStrongAssign(&dimensionRatio_, src->dimensionRatio_);
  circleConstraint_ = src->circleConstraint_;
  circleRadius_ = src->circleRadius_;
  circleAngle_ = src->circleAngle_;
  editorAbsoluteX_ = src->editorAbsoluteX_;
  editorAbsoluteY_ = src->editorAbsoluteY_;
  orientation_ = src->orientation_;
  leftMargin_ = src->leftMargin_;
  rightMargin_ = src->rightMargin_;
  topMargin_ = src->topMargin_;
  bottomMargin_ = src->bottomMargin_;
  endMargin_ = src->endMargin_;
  startMargin_ = src->startMargin_;
  baselineMargin_ = src->baselineMargin_;
  goneLeftMargin_ = src->goneLeftMargin_;
  goneTopMargin_ = src->goneTopMargin_;
  goneRightMargin_ = src->goneRightMargin_;
  goneBottomMargin_ = src->goneBottomMargin_;
  goneEndMargin_ = src->goneEndMargin_;
  goneStartMargin_ = src->goneStartMargin_;
  goneBaselineMargin_ = src->goneBaselineMargin_;
  verticalWeight_ = src->verticalWeight_;
  horizontalWeight_ = src->horizontalWeight_;
  horizontalChainStyle_ = src->horizontalChainStyle_;
  verticalChainStyle_ = src->verticalChainStyle_;
  widthDefault_ = src->widthDefault_;
  heightDefault_ = src->heightDefault_;
  widthMax_ = src->widthMax_;
  heightMax_ = src->heightMax_;
  widthMin_ = src->widthMin_;
  heightMin_ = src->heightMin_;
  widthPercent_ = src->widthPercent_;
  heightPercent_ = src->heightPercent_;
  mBarrierDirection_ = src->mBarrierDirection_;
  mBarrierMargin_ = src->mBarrierMargin_;
  mHelperType_ = src->mHelperType_;
  JreStrongAssign(&mConstraintTag_, src->mConstraintTag_);
  if (src->mReferenceIds_ != nil) {
    JreStrongAssign(&mReferenceIds_, JavaUtilArrays_copyOfWithIntArray_withInt_(src->mReferenceIds_, src->mReferenceIds_->size_));
  }
  else {
    JreStrongAssign(&mReferenceIds_, nil);
  }
  JreStrongAssign(&mReferenceIdString_, src->mReferenceIdString_);
  constrainedWidth_ = src->constrainedWidth_;
  constrainedHeight_ = src->constrainedHeight_;
  mBarrierAllowsGoneWidgets_ = src->mBarrierAllowsGoneWidgets_;
  mWrapBehavior_ = src->mWrapBehavior_;
}

- (void)dealloc {
  RELEASE_(dimensionRatio_);
  RELEASE_(mReferenceIds_);
  RELEASE_(mReferenceIdString_);
  RELEASE_(mConstraintTag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFromWithADXConstraintSet_Layout:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mIsGuideline_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mApply_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mOverride_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "UNSET", "I", .constantValue.asInt = ADXConstraintSet_Layout_UNSET, 0x19, -1, -1, -1, -1 },
    { "UNSET_GONE_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_UNSET_GONE_MARGIN, 0x19, -1, -1, -1, -1 },
    { "guideBegin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "guideEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "guidePercent_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leftToLeft_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leftToRight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightToLeft_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightToRight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "topToTop_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "topToBottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottomToTop_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottomToBottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineToBaseline_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineToTop_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineToBottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startToEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startToStart_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endToStart_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endToEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalBias_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalBias_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dimensionRatio_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "circleConstraint_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "circleRadius_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "circleAngle_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "editorAbsoluteX_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "editorAbsoluteY_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "orientation_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leftMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "topMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottomMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneLeftMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneTopMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneRightMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneBottomMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneEndMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneStartMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneBaselineMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalWeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalWeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalChainStyle_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalChainStyle_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widthDefault_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "heightDefault_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widthMax_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "heightMax_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widthMin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "heightMin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widthPercent_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "heightPercent_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBarrierDirection_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBarrierMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mHelperType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mReferenceIds_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mReferenceIdString_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mConstraintTag_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "constrainedWidth_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "constrainedHeight_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBarrierAllowsGoneWidgets_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWrapBehavior_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "BASELINE_TO_BASELINE", "I", .constantValue.asInt = ADXConstraintSet_Layout_BASELINE_TO_BASELINE, 0x1a, -1, -1, -1, -1 },
    { "BOTTOM_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_BOTTOM_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "BOTTOM_TO_BOTTOM", "I", .constantValue.asInt = ADXConstraintSet_Layout_BOTTOM_TO_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "BOTTOM_TO_TOP", "I", .constantValue.asInt = ADXConstraintSet_Layout_BOTTOM_TO_TOP, 0x1a, -1, -1, -1, -1 },
    { "DIMENSION_RATIO", "I", .constantValue.asInt = ADXConstraintSet_Layout_DIMENSION_RATIO, 0x1a, -1, -1, -1, -1 },
    { "EDITOR_ABSOLUTE_X", "I", .constantValue.asInt = ADXConstraintSet_Layout_EDITOR_ABSOLUTE_X, 0x1a, -1, -1, -1, -1 },
    { "EDITOR_ABSOLUTE_Y", "I", .constantValue.asInt = ADXConstraintSet_Layout_EDITOR_ABSOLUTE_Y, 0x1a, -1, -1, -1, -1 },
    { "END_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_END_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "END_TO_END", "I", .constantValue.asInt = ADXConstraintSet_Layout_END_TO_END, 0x1a, -1, -1, -1, -1 },
    { "END_TO_START", "I", .constantValue.asInt = ADXConstraintSet_Layout_END_TO_START, 0x1a, -1, -1, -1, -1 },
    { "GONE_BOTTOM_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GONE_BOTTOM_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_END_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GONE_END_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_LEFT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GONE_LEFT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_RIGHT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GONE_RIGHT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_START_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GONE_START_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GONE_TOP_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GONE_TOP_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "GUIDE_BEGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_GUIDE_BEGIN, 0x1a, -1, -1, -1, -1 },
    { "GUIDE_END", "I", .constantValue.asInt = ADXConstraintSet_Layout_GUIDE_END, 0x1a, -1, -1, -1, -1 },
    { "GUIDE_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_Layout_GUIDE_PERCENT, 0x1a, -1, -1, -1, -1 },
    { "HORIZONTAL_BIAS", "I", .constantValue.asInt = ADXConstraintSet_Layout_HORIZONTAL_BIAS, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_HEIGHT", "I", .constantValue.asInt = ADXConstraintSet_Layout_LAYOUT_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_WIDTH", "I", .constantValue.asInt = ADXConstraintSet_Layout_LAYOUT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "LEFT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_LEFT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "LEFT_TO_LEFT", "I", .constantValue.asInt = ADXConstraintSet_Layout_LEFT_TO_LEFT, 0x1a, -1, -1, -1, -1 },
    { "LEFT_TO_RIGHT", "I", .constantValue.asInt = ADXConstraintSet_Layout_LEFT_TO_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "ORIENTATION", "I", .constantValue.asInt = ADXConstraintSet_Layout_ORIENTATION, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_RIGHT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_TO_LEFT", "I", .constantValue.asInt = ADXConstraintSet_Layout_RIGHT_TO_LEFT, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_TO_RIGHT", "I", .constantValue.asInt = ADXConstraintSet_Layout_RIGHT_TO_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "START_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_START_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "START_TO_END", "I", .constantValue.asInt = ADXConstraintSet_Layout_START_TO_END, 0x1a, -1, -1, -1, -1 },
    { "START_TO_START", "I", .constantValue.asInt = ADXConstraintSet_Layout_START_TO_START, 0x1a, -1, -1, -1, -1 },
    { "TOP_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_TOP_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "TOP_TO_BOTTOM", "I", .constantValue.asInt = ADXConstraintSet_Layout_TOP_TO_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "TOP_TO_TOP", "I", .constantValue.asInt = ADXConstraintSet_Layout_TOP_TO_TOP, 0x1a, -1, -1, -1, -1 },
    { "VERTICAL_BIAS", "I", .constantValue.asInt = ADXConstraintSet_Layout_VERTICAL_BIAS, 0x1a, -1, -1, -1, -1 },
    { "HORIZONTAL_WEIGHT", "I", .constantValue.asInt = ADXConstraintSet_Layout_HORIZONTAL_WEIGHT, 0x1a, -1, -1, -1, -1 },
    { "VERTICAL_WEIGHT", "I", .constantValue.asInt = ADXConstraintSet_Layout_VERTICAL_WEIGHT, 0x1a, -1, -1, -1, -1 },
    { "HORIZONTAL_STYLE", "I", .constantValue.asInt = ADXConstraintSet_Layout_HORIZONTAL_STYLE, 0x1a, -1, -1, -1, -1 },
    { "VERTICAL_STYLE", "I", .constantValue.asInt = ADXConstraintSet_Layout_VERTICAL_STYLE, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_CONSTRAINT_WIDTH", "I", .constantValue.asInt = ADXConstraintSet_Layout_LAYOUT_CONSTRAINT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_CONSTRAINT_HEIGHT", "I", .constantValue.asInt = ADXConstraintSet_Layout_LAYOUT_CONSTRAINT_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "CIRCLE", "I", .constantValue.asInt = ADXConstraintSet_Layout_CIRCLE, 0x1a, -1, -1, -1, -1 },
    { "CIRCLE_RADIUS", "I", .constantValue.asInt = ADXConstraintSet_Layout_CIRCLE_RADIUS, 0x1a, -1, -1, -1, -1 },
    { "CIRCLE_ANGLE", "I", .constantValue.asInt = ADXConstraintSet_Layout_CIRCLE_ANGLE, 0x1a, -1, -1, -1, -1 },
    { "WIDTH_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_Layout_WIDTH_PERCENT, 0x1a, -1, -1, -1, -1 },
    { "HEIGHT_PERCENT", "I", .constantValue.asInt = ADXConstraintSet_Layout_HEIGHT_PERCENT, 0x1a, -1, -1, -1, -1 },
    { "CHAIN_USE_RTL", "I", .constantValue.asInt = ADXConstraintSet_Layout_CHAIN_USE_RTL, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_DIRECTION", "I", .constantValue.asInt = ADXConstraintSet_Layout_BARRIER_DIRECTION, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_MARGIN", "I", .constantValue.asInt = ADXConstraintSet_Layout_BARRIER_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "CONSTRAINT_REFERENCED_IDS", "I", .constantValue.asInt = ADXConstraintSet_Layout_CONSTRAINT_REFERENCED_IDS, 0x1a, -1, -1, -1, -1 },
    { "BARRIER_ALLOWS_GONE_WIDGETS", "I", .constantValue.asInt = ADXConstraintSet_Layout_BARRIER_ALLOWS_GONE_WIDGETS, 0x1a, -1, -1, -1, -1 },
    { "UNUSED", "I", .constantValue.asInt = ADXConstraintSet_Layout_UNUSED, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFrom", "LADXConstraintSet_Layout;", "LADXConstraintSet;" };
  static const J2ObjcClassInfo _ADXConstraintSet_Layout = { "Layout", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x9, 2, 123, 2, -1, -1, -1, -1 };
  return &_ADXConstraintSet_Layout;
}

@end

void ADXConstraintSet_Layout_init(ADXConstraintSet_Layout *self) {
  NSObject_init(self);
  self->mIsGuideline_ = false;
  self->mApply_ = false;
  self->mOverride_ = false;
  self->guideBegin_ = ADXConstraintSet_Layout_UNSET;
  self->guideEnd_ = ADXConstraintSet_Layout_UNSET;
  self->guidePercent_ = ADXConstraintSet_Layout_UNSET;
  self->leftToLeft_ = ADXConstraintSet_Layout_UNSET;
  self->leftToRight_ = ADXConstraintSet_Layout_UNSET;
  self->rightToLeft_ = ADXConstraintSet_Layout_UNSET;
  self->rightToRight_ = ADXConstraintSet_Layout_UNSET;
  self->topToTop_ = ADXConstraintSet_Layout_UNSET;
  self->topToBottom_ = ADXConstraintSet_Layout_UNSET;
  self->bottomToTop_ = ADXConstraintSet_Layout_UNSET;
  self->bottomToBottom_ = ADXConstraintSet_Layout_UNSET;
  self->baselineToBaseline_ = ADXConstraintSet_Layout_UNSET;
  self->baselineToTop_ = ADXConstraintSet_Layout_UNSET;
  self->baselineToBottom_ = ADXConstraintSet_Layout_UNSET;
  self->startToEnd_ = ADXConstraintSet_Layout_UNSET;
  self->startToStart_ = ADXConstraintSet_Layout_UNSET;
  self->endToStart_ = ADXConstraintSet_Layout_UNSET;
  self->endToEnd_ = ADXConstraintSet_Layout_UNSET;
  self->horizontalBias_ = 0.5f;
  self->verticalBias_ = 0.5f;
  JreStrongAssign(&self->dimensionRatio_, nil);
  self->circleConstraint_ = ADXConstraintSet_Layout_UNSET;
  self->circleRadius_ = 0;
  self->circleAngle_ = 0;
  self->editorAbsoluteX_ = ADXConstraintSet_Layout_UNSET;
  self->editorAbsoluteY_ = ADXConstraintSet_Layout_UNSET;
  self->orientation_ = ADXConstraintSet_Layout_UNSET;
  self->leftMargin_ = 0;
  self->rightMargin_ = 0;
  self->topMargin_ = 0;
  self->bottomMargin_ = 0;
  self->endMargin_ = 0;
  self->startMargin_ = 0;
  self->baselineMargin_ = 0;
  self->goneLeftMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->goneTopMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->goneRightMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->goneBottomMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->goneEndMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->goneStartMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->goneBaselineMargin_ = ADXConstraintSet_Layout_UNSET_GONE_MARGIN;
  self->verticalWeight_ = ADXConstraintSet_Layout_UNSET;
  self->horizontalWeight_ = ADXConstraintSet_Layout_UNSET;
  self->horizontalChainStyle_ = ADXConstraintSet_CHAIN_SPREAD;
  self->verticalChainStyle_ = ADXConstraintSet_CHAIN_SPREAD;
  self->widthDefault_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  self->heightDefault_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  self->widthMax_ = ADXConstraintSet_Layout_UNSET;
  self->heightMax_ = ADXConstraintSet_Layout_UNSET;
  self->widthMin_ = ADXConstraintSet_Layout_UNSET;
  self->heightMin_ = ADXConstraintSet_Layout_UNSET;
  self->widthPercent_ = 1;
  self->heightPercent_ = 1;
  self->mBarrierDirection_ = ADXConstraintSet_Layout_UNSET;
  self->mBarrierMargin_ = 0;
  self->mHelperType_ = ADXConstraintSet_Layout_UNSET;
  self->constrainedWidth_ = false;
  self->constrainedHeight_ = false;
  self->mBarrierAllowsGoneWidgets_ = true;
  self->mWrapBehavior_ = ADXConstraintWidget_WRAP_BEHAVIOR_INCLUDED;
}

ADXConstraintSet_Layout *new_ADXConstraintSet_Layout_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet_Layout, init)
}

ADXConstraintSet_Layout *create_ADXConstraintSet_Layout_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet_Layout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet_Layout)

@implementation ADXConstraintSet_Transform

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_Transform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copyFromWithADXConstraintSet_Transform:(ADXConstraintSet_Transform *)src {
  mApply_ = ((ADXConstraintSet_Transform *) nil_chk(src))->mApply_;
  rotation_ = src->rotation_;
  rotationX_ = src->rotationX_;
  rotationY_ = src->rotationY_;
  scaleX_ = src->scaleX_;
  scaleY_ = src->scaleY_;
  transformPivotX_ = src->transformPivotX_;
  transformPivotY_ = src->transformPivotY_;
  transformPivotTarget_ = src->transformPivotTarget_;
  translationX_ = src->translationX_;
  translationY_ = src->translationY_;
  translationZ_ = src->translationZ_;
  applyElevation_ = src->applyElevation_;
  elevation_ = src->elevation_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFromWithADXConstraintSet_Transform:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mApply_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rotation_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rotationX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rotationY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "scaleX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "scaleY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "transformPivotX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "transformPivotY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "transformPivotTarget_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "translationX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "translationY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "translationZ_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "applyElevation_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "elevation_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ROTATION", "I", .constantValue.asInt = ADXConstraintSet_Transform_ROTATION, 0x1a, -1, -1, -1, -1 },
    { "ROTATION_X", "I", .constantValue.asInt = ADXConstraintSet_Transform_ROTATION_X, 0x1a, -1, -1, -1, -1 },
    { "ROTATION_Y", "I", .constantValue.asInt = ADXConstraintSet_Transform_ROTATION_Y, 0x1a, -1, -1, -1, -1 },
    { "SCALE_X", "I", .constantValue.asInt = ADXConstraintSet_Transform_SCALE_X, 0x1a, -1, -1, -1, -1 },
    { "SCALE_Y", "I", .constantValue.asInt = ADXConstraintSet_Transform_SCALE_Y, 0x1a, -1, -1, -1, -1 },
    { "TRANSFORM_PIVOT_X", "I", .constantValue.asInt = ADXConstraintSet_Transform_TRANSFORM_PIVOT_X, 0x1a, -1, -1, -1, -1 },
    { "TRANSFORM_PIVOT_Y", "I", .constantValue.asInt = ADXConstraintSet_Transform_TRANSFORM_PIVOT_Y, 0x1a, -1, -1, -1, -1 },
    { "TRANSLATION_X", "I", .constantValue.asInt = ADXConstraintSet_Transform_TRANSLATION_X, 0x1a, -1, -1, -1, -1 },
    { "TRANSLATION_Y", "I", .constantValue.asInt = ADXConstraintSet_Transform_TRANSLATION_Y, 0x1a, -1, -1, -1, -1 },
    { "TRANSLATION_Z", "I", .constantValue.asInt = ADXConstraintSet_Transform_TRANSLATION_Z, 0x1a, -1, -1, -1, -1 },
    { "ELEVATION", "I", .constantValue.asInt = ADXConstraintSet_Transform_ELEVATION, 0x1a, -1, -1, -1, -1 },
    { "TRANSFORM_PIVOT_TARGET", "I", .constantValue.asInt = ADXConstraintSet_Transform_TRANSFORM_PIVOT_TARGET, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFrom", "LADXConstraintSet_Transform;", "LADXConstraintSet;" };
  static const J2ObjcClassInfo _ADXConstraintSet_Transform = { "Transform", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x9, 2, 26, 2, -1, -1, -1, -1 };
  return &_ADXConstraintSet_Transform;
}

@end

void ADXConstraintSet_Transform_init(ADXConstraintSet_Transform *self) {
  NSObject_init(self);
  self->mApply_ = false;
  self->rotation_ = 0;
  self->rotationX_ = 0;
  self->rotationY_ = 0;
  self->scaleX_ = 1;
  self->scaleY_ = 1;
  self->transformPivotX_ = JavaLangFloat_NaN;
  self->transformPivotY_ = JavaLangFloat_NaN;
  self->transformPivotTarget_ = ADXConstraintSet_UNSET;
  self->translationX_ = 0;
  self->translationY_ = 0;
  self->translationZ_ = 0;
  self->applyElevation_ = false;
  self->elevation_ = 0;
}

ADXConstraintSet_Transform *new_ADXConstraintSet_Transform_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet_Transform, init)
}

ADXConstraintSet_Transform *create_ADXConstraintSet_Transform_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet_Transform, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet_Transform)

@implementation ADXConstraintSet_PropertySet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_PropertySet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copyFromWithADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)src {
  mApply_ = ((ADXConstraintSet_PropertySet *) nil_chk(src))->mApply_;
  visibility_ = src->visibility_;
  alpha_ = src->alpha_;
  mProgress_ = src->mProgress_;
  mVisibilityMode_ = src->mVisibilityMode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFromWithADXConstraintSet_PropertySet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mApply_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "visibility_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVisibilityMode_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "alpha_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mProgress_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFrom", "LADXConstraintSet_PropertySet;", "LADXConstraintSet;" };
  static const J2ObjcClassInfo _ADXConstraintSet_PropertySet = { "PropertySet", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x9, 2, 5, 2, -1, -1, -1, -1 };
  return &_ADXConstraintSet_PropertySet;
}

@end

void ADXConstraintSet_PropertySet_init(ADXConstraintSet_PropertySet *self) {
  NSObject_init(self);
  self->mApply_ = false;
  self->visibility_ = ADView_VISIBLE;
  self->mVisibilityMode_ = ADXConstraintSet_VISIBILITY_MODE_NORMAL;
  self->alpha_ = 1;
  self->mProgress_ = JavaLangFloat_NaN;
}

ADXConstraintSet_PropertySet *new_ADXConstraintSet_PropertySet_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet_PropertySet, init)
}

ADXConstraintSet_PropertySet *create_ADXConstraintSet_PropertySet_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet_PropertySet, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet_PropertySet)

@implementation ADXConstraintSet_Motion

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_Motion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copyFromWithADXConstraintSet_Motion:(ADXConstraintSet_Motion *)src {
  mApply_ = ((ADXConstraintSet_Motion *) nil_chk(src))->mApply_;
  mAnimateRelativeTo_ = src->mAnimateRelativeTo_;
  JreStrongAssign(&mTransitionEasing_, src->mTransitionEasing_);
  mPathMotionArc_ = src->mPathMotionArc_;
  mDrawPath_ = src->mDrawPath_;
  mPathRotate_ = src->mPathRotate_;
  mMotionStagger_ = src->mMotionStagger_;
  mPolarRelativeTo_ = src->mPolarRelativeTo_;
}

- (void)dealloc {
  RELEASE_(mTransitionEasing_);
  RELEASE_(mQuantizeInterpolatorString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFromWithADXConstraintSet_Motion:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mApply_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAnimateRelativeTo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAnimateCircleAngleTo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTransitionEasing_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPathMotionArc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDrawPath_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMotionStagger_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPolarRelativeTo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPathRotate_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeMotionPhase_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeMotionSteps_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeInterpolatorString_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeInterpolatorType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeInterpolatorID_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "INTERPOLATOR_REFERENCE_ID", "I", .constantValue.asInt = ADXConstraintSet_Motion_INTERPOLATOR_REFERENCE_ID, 0x1a, -1, -1, -1, -1 },
    { "SPLINE_STRING", "I", .constantValue.asInt = ADXConstraintSet_Motion_SPLINE_STRING, 0x1a, -1, -1, -1, -1 },
    { "INTERPOLATOR_UNDEFINED", "I", .constantValue.asInt = ADXConstraintSet_Motion_INTERPOLATOR_UNDEFINED, 0x1a, -1, -1, -1, -1 },
    { "TRANSITION_PATH_ROTATE", "I", .constantValue.asInt = ADXConstraintSet_Motion_TRANSITION_PATH_ROTATE, 0x1a, -1, -1, -1, -1 },
    { "PATH_MOTION_ARC", "I", .constantValue.asInt = ADXConstraintSet_Motion_PATH_MOTION_ARC, 0x1a, -1, -1, -1, -1 },
    { "TRANSITION_EASING", "I", .constantValue.asInt = ADXConstraintSet_Motion_TRANSITION_EASING, 0x1a, -1, -1, -1, -1 },
    { "MOTION_DRAW_PATH", "I", .constantValue.asInt = ADXConstraintSet_Motion_MOTION_DRAW_PATH, 0x1a, -1, -1, -1, -1 },
    { "ANIMATE_RELATIVE_TO", "I", .constantValue.asInt = ADXConstraintSet_Motion_ANIMATE_RELATIVE_TO, 0x1a, -1, -1, -1, -1 },
    { "ANIMATE_CIRCLE_ANGLE_TO", "I", .constantValue.asInt = ADXConstraintSet_Motion_ANIMATE_CIRCLE_ANGLE_TO, 0x1a, -1, -1, -1, -1 },
    { "MOTION_STAGGER", "I", .constantValue.asInt = ADXConstraintSet_Motion_MOTION_STAGGER, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_STEPS", "I", .constantValue.asInt = ADXConstraintSet_Motion_QUANTIZE_MOTION_STEPS, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_PHASE", "I", .constantValue.asInt = ADXConstraintSet_Motion_QUANTIZE_MOTION_PHASE, 0x1a, -1, -1, -1, -1 },
    { "QUANTIZE_MOTION_INTERPOLATOR", "I", .constantValue.asInt = ADXConstraintSet_Motion_QUANTIZE_MOTION_INTERPOLATOR, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFrom", "LADXConstraintSet_Motion;", "LADXConstraintSet;" };
  static const J2ObjcClassInfo _ADXConstraintSet_Motion = { "Motion", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x9, 2, 27, 2, -1, -1, -1, -1 };
  return &_ADXConstraintSet_Motion;
}

@end

void ADXConstraintSet_Motion_init(ADXConstraintSet_Motion *self) {
  NSObject_init(self);
  self->mApply_ = false;
  self->mAnimateRelativeTo_ = ADXConstraintSet_Layout_UNSET;
  self->mAnimateCircleAngleTo_ = 0;
  JreStrongAssign(&self->mTransitionEasing_, nil);
  self->mPathMotionArc_ = ADXConstraintSet_Layout_UNSET;
  self->mDrawPath_ = 0;
  self->mMotionStagger_ = JavaLangFloat_NaN;
  self->mPolarRelativeTo_ = ADXConstraintSet_Layout_UNSET;
  self->mPathRotate_ = JavaLangFloat_NaN;
  self->mQuantizeMotionPhase_ = JavaLangFloat_NaN;
  self->mQuantizeMotionSteps_ = ADXConstraintSet_Layout_UNSET;
  JreStrongAssign(&self->mQuantizeInterpolatorString_, nil);
  self->mQuantizeInterpolatorType_ = ADXConstraintSet_Motion_INTERPOLATOR_UNDEFINED;
  self->mQuantizeInterpolatorID_ = -1;
}

ADXConstraintSet_Motion *new_ADXConstraintSet_Motion_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet_Motion, init)
}

ADXConstraintSet_Motion *create_ADXConstraintSet_Motion_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet_Motion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet_Motion)

@implementation ADXConstraintSet_Constraint

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_Constraint_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)applyDeltaWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c {
  if (mDelta_ != nil) {
    [mDelta_ applyDeltaWithADXConstraintSet_Constraint:c];
  }
}

- (ADXConstraintSet_Constraint *)java_clone {
  ADXConstraintSet_Constraint *clone = create_ADXConstraintSet_Constraint_init();
  [((ADXConstraintSet_Layout *) nil_chk(clone->layout_)) copyFromWithADXConstraintSet_Layout:layout_];
  [((ADXConstraintSet_Motion *) nil_chk(clone->motion_)) copyFromWithADXConstraintSet_Motion:motion_];
  [((ADXConstraintSet_PropertySet *) nil_chk(clone->propertySet_)) copyFromWithADXConstraintSet_PropertySet:propertySet_];
  [((ADXConstraintSet_Transform *) nil_chk(clone->transform_)) copyFromWithADXConstraintSet_Transform:transform_];
  clone->mViewId_ = mViewId_;
  JreStrongAssign(&clone->mDelta_, mDelta_);
  return clone;
}

- (void)fillFromConstraintsWithADXConstraintHelper:(ADXConstraintHelper *)helper
                                           withInt:(int32_t)viewId
                   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)param {
  [self fillFromConstraintsWithInt:viewId withADXConstraints_LayoutParams:param];
  if ([helper isKindOfClass:[ADXBarrier class]]) {
    ((ADXConstraintSet_Layout *) nil_chk(layout_))->mHelperType_ = ADXConstraintSet_BARRIER_TYPE;
    ADXBarrier *barrier = (ADXBarrier *) helper;
    layout_->mBarrierDirection_ = [((ADXBarrier *) nil_chk(barrier)) getType];
    JreStrongAssign(&layout_->mReferenceIds_, [barrier getReferencedIds]);
    layout_->mBarrierMargin_ = [barrier getMargin];
  }
}

- (void)fillFromConstraintsWithInt:(int32_t)viewId
   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)param {
  ADXConstraintSet_Constraint_fillFromWithInt_withADXConstraintLayout_LayoutParams_(self, viewId, param);
  ((ADXConstraintSet_PropertySet *) nil_chk(propertySet_))->alpha_ = ((ADXConstraints_LayoutParams *) nil_chk(param))->alpha_;
  ((ADXConstraintSet_Transform *) nil_chk(transform_))->rotation_ = param->rotation_;
  transform_->rotationX_ = param->rotationX_;
  transform_->rotationY_ = param->rotationY_;
  transform_->scaleX_ = param->scaleX_;
  transform_->scaleY_ = param->scaleY_;
  transform_->transformPivotX_ = param->transformPivotX_;
  transform_->transformPivotY_ = param->transformPivotY_;
  transform_->translationX_ = param->translationX_;
  transform_->translationY_ = param->translationY_;
  transform_->translationZ_ = param->translationZ_;
  transform_->elevation_ = param->elevation_;
  transform_->applyElevation_ = param->applyElevation_;
}

- (void)fillFromWithInt:(int32_t)viewId
withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)param {
  ADXConstraintSet_Constraint_fillFromWithInt_withADXConstraintLayout_LayoutParams_(self, viewId, param);
}

- (void)applyToWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)param {
  ((ADXConstraintLayout_LayoutParams *) nil_chk(param))->leftToLeft_ = ((ADXConstraintSet_Layout *) nil_chk(layout_))->leftToLeft_;
  param->leftToRight_ = layout_->leftToRight_;
  param->rightToLeft_ = layout_->rightToLeft_;
  param->rightToRight_ = layout_->rightToRight_;
  param->topToTop_ = layout_->topToTop_;
  param->topToBottom_ = layout_->topToBottom_;
  param->bottomToTop_ = layout_->bottomToTop_;
  param->bottomToBottom_ = layout_->bottomToBottom_;
  param->baselineToBaseline_ = layout_->baselineToBaseline_;
  param->baselineToTop_ = layout_->baselineToTop_;
  param->baselineToBottom_ = layout_->baselineToBottom_;
  param->startToEnd_ = layout_->startToEnd_;
  param->startToStart_ = layout_->startToStart_;
  param->endToStart_ = layout_->endToStart_;
  param->endToEnd_ = layout_->endToEnd_;
  param->leftMargin_ = layout_->leftMargin_;
  param->rightMargin_ = layout_->rightMargin_;
  param->topMargin_ = layout_->topMargin_;
  param->bottomMargin_ = layout_->bottomMargin_;
  param->goneStartMargin_ = layout_->goneStartMargin_;
  param->goneEndMargin_ = layout_->goneEndMargin_;
  param->goneTopMargin_ = layout_->goneTopMargin_;
  param->goneBottomMargin_ = layout_->goneBottomMargin_;
  param->horizontalBias_ = layout_->horizontalBias_;
  param->verticalBias_ = layout_->verticalBias_;
  param->circleConstraint_ = layout_->circleConstraint_;
  param->circleRadius_ = layout_->circleRadius_;
  param->circleAngle_ = layout_->circleAngle_;
  JreStrongAssign(&param->dimensionRatio_, layout_->dimensionRatio_);
  param->editorAbsoluteX_ = layout_->editorAbsoluteX_;
  param->editorAbsoluteY_ = layout_->editorAbsoluteY_;
  param->verticalWeight_ = layout_->verticalWeight_;
  param->horizontalWeight_ = layout_->horizontalWeight_;
  param->verticalChainStyle_ = layout_->verticalChainStyle_;
  param->horizontalChainStyle_ = layout_->horizontalChainStyle_;
  param->constrainedWidth_ = layout_->constrainedWidth_;
  param->constrainedHeight_ = layout_->constrainedHeight_;
  param->matchConstraintDefaultWidth_ = layout_->widthDefault_;
  param->matchConstraintDefaultHeight_ = layout_->heightDefault_;
  param->matchConstraintMaxWidth_ = layout_->widthMax_;
  param->matchConstraintMaxHeight_ = layout_->heightMax_;
  param->matchConstraintMinWidth_ = layout_->widthMin_;
  param->matchConstraintMinHeight_ = layout_->heightMin_;
  param->matchConstraintPercentWidth_ = layout_->widthPercent_;
  param->matchConstraintPercentHeight_ = layout_->heightPercent_;
  param->orientation_ = layout_->orientation_;
  param->guidePercent_ = layout_->guidePercent_;
  param->guideBegin_ = layout_->guideBegin_;
  param->guideEnd_ = layout_->guideEnd_;
  param->width_ = layout_->mWidth_;
  param->height_ = layout_->mHeight_;
  if (layout_->mConstraintTag_ != nil) {
    JreStrongAssign(&param->constraintTag_, layout_->mConstraintTag_);
  }
  param->wrapBehaviorInParent_ = layout_->mWrapBehavior_;
  {
    [param setMarginStartWithInt:layout_->startMargin_];
    [param setMarginEndWithInt:layout_->endMargin_];
  }
  [param validate];
}

- (void)dealloc {
  RELEASE_(mTargetString_);
  RELEASE_(propertySet_);
  RELEASE_(motion_);
  RELEASE_(layout_);
  RELEASE_(transform_);
  RELEASE_(mCustomConstraints_);
  RELEASE_(mDelta_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet_Constraint;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyDeltaWithADXConstraintSet_Constraint:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(fillFromConstraintsWithADXConstraintHelper:withInt:withADXConstraints_LayoutParams:);
  methods[4].selector = @selector(fillFromConstraintsWithInt:withADXConstraints_LayoutParams:);
  methods[5].selector = @selector(fillFromWithInt:withADXConstraintLayout_LayoutParams:);
  methods[6].selector = @selector(applyToWithADXConstraintLayout_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mViewId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTargetString_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "propertySet_", "LADXConstraintSet_PropertySet;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "motion_", "LADXConstraintSet_Motion;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "layout_", "LADXConstraintSet_Layout;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "transform_", "LADXConstraintSet_Transform;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "mCustomConstraints_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1, -1, -1, 10, -1 },
    { "mDelta_", "LADXConstraintSet_Constraint_Delta;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "applyDelta", "LADXConstraintSet_Constraint;", "clone", "fillFromConstraints", "LADXConstraintHelper;ILADXConstraints_LayoutParams;", "ILADXConstraints_LayoutParams;", "fillFrom", "ILADXConstraintLayout_LayoutParams;", "applyTo", "LADXConstraintLayout_LayoutParams;", "Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/widget/ConstraintAttribute;>;", "LADXConstraintSet;", "LADXConstraintSet_Constraint_Delta;" };
  static const J2ObjcClassInfo _ADXConstraintSet_Constraint = { "Constraint", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x9, 7, 8, 11, 12, -1, -1, -1 };
  return &_ADXConstraintSet_Constraint;
}

@end

void ADXConstraintSet_Constraint_init(ADXConstraintSet_Constraint *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->propertySet_, new_ADXConstraintSet_PropertySet_init());
  JreStrongAssignAndConsume(&self->motion_, new_ADXConstraintSet_Motion_init());
  JreStrongAssignAndConsume(&self->layout_, new_ADXConstraintSet_Layout_init());
  JreStrongAssignAndConsume(&self->transform_, new_ADXConstraintSet_Transform_init());
  JreStrongAssignAndConsume(&self->mCustomConstraints_, new_JavaUtilHashMap_init());
}

ADXConstraintSet_Constraint *new_ADXConstraintSet_Constraint_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet_Constraint, init)
}

ADXConstraintSet_Constraint *create_ADXConstraintSet_Constraint_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet_Constraint, init)
}

void ADXConstraintSet_Constraint_fillFromWithInt_withADXConstraintLayout_LayoutParams_(ADXConstraintSet_Constraint *self, int32_t viewId, ADXConstraintLayout_LayoutParams *param) {
  self->mViewId_ = viewId;
  ((ADXConstraintSet_Layout *) nil_chk(self->layout_))->leftToLeft_ = ((ADXConstraintLayout_LayoutParams *) nil_chk(param))->leftToLeft_;
  self->layout_->leftToRight_ = param->leftToRight_;
  self->layout_->rightToLeft_ = param->rightToLeft_;
  self->layout_->rightToRight_ = param->rightToRight_;
  self->layout_->topToTop_ = param->topToTop_;
  self->layout_->topToBottom_ = param->topToBottom_;
  self->layout_->bottomToTop_ = param->bottomToTop_;
  self->layout_->bottomToBottom_ = param->bottomToBottom_;
  self->layout_->baselineToBaseline_ = param->baselineToBaseline_;
  self->layout_->baselineToTop_ = param->baselineToTop_;
  self->layout_->baselineToBottom_ = param->baselineToBottom_;
  self->layout_->startToEnd_ = param->startToEnd_;
  self->layout_->startToStart_ = param->startToStart_;
  self->layout_->endToStart_ = param->endToStart_;
  self->layout_->endToEnd_ = param->endToEnd_;
  self->layout_->horizontalBias_ = param->horizontalBias_;
  self->layout_->verticalBias_ = param->verticalBias_;
  JreStrongAssign(&self->layout_->dimensionRatio_, param->dimensionRatio_);
  self->layout_->circleConstraint_ = param->circleConstraint_;
  self->layout_->circleRadius_ = param->circleRadius_;
  self->layout_->circleAngle_ = param->circleAngle_;
  self->layout_->editorAbsoluteX_ = param->editorAbsoluteX_;
  self->layout_->editorAbsoluteY_ = param->editorAbsoluteY_;
  self->layout_->orientation_ = param->orientation_;
  self->layout_->guidePercent_ = param->guidePercent_;
  self->layout_->guideBegin_ = param->guideBegin_;
  self->layout_->guideEnd_ = param->guideEnd_;
  self->layout_->mWidth_ = param->width_;
  self->layout_->mHeight_ = param->height_;
  self->layout_->leftMargin_ = param->leftMargin_;
  self->layout_->rightMargin_ = param->rightMargin_;
  self->layout_->topMargin_ = param->topMargin_;
  self->layout_->bottomMargin_ = param->bottomMargin_;
  self->layout_->baselineMargin_ = param->baselineMargin_;
  self->layout_->verticalWeight_ = param->verticalWeight_;
  self->layout_->horizontalWeight_ = param->horizontalWeight_;
  self->layout_->verticalChainStyle_ = param->verticalChainStyle_;
  self->layout_->horizontalChainStyle_ = param->horizontalChainStyle_;
  self->layout_->constrainedWidth_ = param->constrainedWidth_;
  self->layout_->constrainedHeight_ = param->constrainedHeight_;
  self->layout_->widthDefault_ = param->matchConstraintDefaultWidth_;
  self->layout_->heightDefault_ = param->matchConstraintDefaultHeight_;
  self->layout_->widthMax_ = param->matchConstraintMaxWidth_;
  self->layout_->heightMax_ = param->matchConstraintMaxHeight_;
  self->layout_->widthMin_ = param->matchConstraintMinWidth_;
  self->layout_->heightMin_ = param->matchConstraintMinHeight_;
  self->layout_->widthPercent_ = param->matchConstraintPercentWidth_;
  self->layout_->heightPercent_ = param->matchConstraintPercentHeight_;
  JreStrongAssign(&self->layout_->mConstraintTag_, param->constraintTag_);
  self->layout_->goneTopMargin_ = param->goneTopMargin_;
  self->layout_->goneBottomMargin_ = param->goneBottomMargin_;
  self->layout_->goneLeftMargin_ = param->goneLeftMargin_;
  self->layout_->goneRightMargin_ = param->goneRightMargin_;
  self->layout_->goneStartMargin_ = param->goneStartMargin_;
  self->layout_->goneEndMargin_ = param->goneEndMargin_;
  self->layout_->goneBaselineMargin_ = param->goneBaselineMargin_;
  self->layout_->mWrapBehavior_ = param->wrapBehaviorInParent_;
  int32_t currentApiVersion = ADBuild_VERSION_SDK_INT;
  if (currentApiVersion >= ADBuild_VERSION_CODES_JELLY_BEAN_MR1) {
    self->layout_->endMargin_ = [param getMarginEnd];
    self->layout_->startMargin_ = [param getMarginStart];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet_Constraint)

@implementation ADXConstraintSet_Constraint_Delta

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintSet_Constraint_Delta_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)applyDeltaWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)c {
  for (int32_t i = 0; i < mCountInt_; i++) {
    ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withInt_(c, IOSIntArray_Get(nil_chk(mTypeInt_), i), IOSIntArray_Get(nil_chk(mValueInt_), i));
  }
  for (int32_t i = 0; i < mCountFloat_; i++) {
    ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withFloat_(c, IOSIntArray_Get(nil_chk(mTypeFloat_), i), IOSFloatArray_Get(nil_chk(mValueFloat_), i));
  }
  for (int32_t i = 0; i < mCountString_; i++) {
    ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withNSString_(c, IOSIntArray_Get(nil_chk(mTypeString_), i), IOSObjectArray_Get(nil_chk(mValueString_), i));
  }
  for (int32_t i = 0; i < mCountBoolean_; i++) {
    ADXConstraintSet_setDeltaValueWithADXConstraintSet_Constraint_withInt_withBoolean_(c, IOSIntArray_Get(nil_chk(mTypeBoolean_), i), IOSBooleanArray_Get(nil_chk(mValueBoolean_), i));
  }
}

- (void)dealloc {
  RELEASE_(mTypeInt_);
  RELEASE_(mValueInt_);
  RELEASE_(mTypeFloat_);
  RELEASE_(mValueFloat_);
  RELEASE_(mTypeString_);
  RELEASE_(mValueString_);
  RELEASE_(mTypeBoolean_);
  RELEASE_(mValueBoolean_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyDeltaWithADXConstraintSet_Constraint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_BOOLEAN", "I", .constantValue.asInt = ADXConstraintSet_Constraint_Delta_INITIAL_BOOLEAN, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_INT", "I", .constantValue.asInt = ADXConstraintSet_Constraint_Delta_INITIAL_INT, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_FLOAT", "I", .constantValue.asInt = ADXConstraintSet_Constraint_Delta_INITIAL_FLOAT, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_STRING", "I", .constantValue.asInt = ADXConstraintSet_Constraint_Delta_INITIAL_STRING, 0x1a, -1, -1, -1, -1 },
    { "mTypeInt_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueInt_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountInt_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTypeFloat_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueFloat_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountFloat_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTypeString_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueString_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountString_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTypeBoolean_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueBoolean_", "[Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountBoolean_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "applyDelta", "LADXConstraintSet_Constraint;" };
  static const J2ObjcClassInfo _ADXConstraintSet_Constraint_Delta = { "Delta", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x8, 2, 16, 1, -1, -1, -1, -1 };
  return &_ADXConstraintSet_Constraint_Delta;
}

@end

void ADXConstraintSet_Constraint_Delta_init(ADXConstraintSet_Constraint_Delta *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mTypeInt_, [IOSIntArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_INT]);
  JreStrongAssignAndConsume(&self->mValueInt_, [IOSIntArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_INT]);
  self->mCountInt_ = 0;
  JreStrongAssignAndConsume(&self->mTypeFloat_, [IOSIntArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_FLOAT]);
  JreStrongAssignAndConsume(&self->mValueFloat_, [IOSFloatArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_FLOAT]);
  self->mCountFloat_ = 0;
  JreStrongAssignAndConsume(&self->mTypeString_, [IOSIntArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_STRING]);
  JreStrongAssignAndConsume(&self->mValueString_, [IOSObjectArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_STRING type:NSString_class_()]);
  self->mCountString_ = 0;
  JreStrongAssignAndConsume(&self->mTypeBoolean_, [IOSIntArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_BOOLEAN]);
  JreStrongAssignAndConsume(&self->mValueBoolean_, [IOSBooleanArray newArrayWithLength:ADXConstraintSet_Constraint_Delta_INITIAL_BOOLEAN]);
  self->mCountBoolean_ = 0;
}

ADXConstraintSet_Constraint_Delta *new_ADXConstraintSet_Constraint_Delta_init() {
  J2OBJC_NEW_IMPL(ADXConstraintSet_Constraint_Delta, init)
}

ADXConstraintSet_Constraint_Delta *create_ADXConstraintSet_Constraint_Delta_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintSet_Constraint_Delta, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintSet_Constraint_Delta)
