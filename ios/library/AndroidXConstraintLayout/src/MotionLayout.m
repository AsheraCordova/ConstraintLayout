//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\motion\widget\MotionLayout.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Barrier.h"
#include "BasicMeasure.h"
#include "Bundle.h"
#include "CLDebug.h"
#include "CLStateSet.h"
#include "ConstraintAnchor.h"
#include "ConstraintHelper.h"
#include "ConstraintLayout.h"
#include "ConstraintLayoutStates.h"
#include "ConstraintSet.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "Constraints.h"
#include "Context.h"
#include "CoreBarrier.h"
#include "CoreFlow.h"
#include "CoreGuideline.h"
#include "CoreVirtualLayout.h"
#include "Helper.h"
#include "HelperWidget.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Interpolator.h"
#include "J2ObjC_source.h"
#include "KeyCache.h"
#include "Log.h"
#include "MotionController.h"
#include "MotionEvent.h"
#include "MotionHelper.h"
#include "MotionInterpolator.h"
#include "MotionLayout.h"
#include "MotionScene.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "Resources.h"
#include "SparseArray.h"
#include "SparseBooleanArray.h"
#include "StopLogic.h"
#include "TextView.h"
#include "TouchResponse.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "ViewState.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADXMotionLayout () {
 @public
  int32_t mBeginState_;
  int32_t mEndState_;
  int32_t mLastWidthMeasureSpec_;
  int32_t mLastHeightMeasureSpec_;
  bool mInteractionEnabled_;
  int64_t mAnimationStartTime_;
  float mTransitionDuration_;
  int64_t mTransitionLastTime_;
  bool mTransitionInstantly_;
  id<ADXMotionLayout_TransitionListener> mTransitionListener_;
  float lastPos_;
  float lastY_;
  bool mTemporalInterpolator_;
  ADXStopLogic *mStopLogic_;
  ADXMotionLayout_DecelerateInterpolator *mDecelerateLogic_;
  bool mKeepAnimating_;
  JavaUtilArrayList *mOnShowHelpers_;
  JavaUtilArrayList *mOnHideHelpers_;
  JavaUtilArrayList *mDecoratorsHelpers_;
  JavaUtilConcurrentCopyOnWriteArrayList *mTransitionListeners_;
  int32_t mFrames_;
  float mLastFps_;
  int32_t mListenerState_;
  float mListenerPosition_;
  ADXKeyCache *mKeyCache_;
  bool mInLayout_;
  ADXMotionLayout_StateCache *mStateCache_;
  id<JavaLangRunnable> mOnComplete_;
  IOSIntArray *mScheduledTransitionTo_;
  bool mInRotation_;
  int32_t mPreRotateWidth_;
  int32_t mPreRotateHeight_;
  int32_t mPreviouseRotation_;
  bool mDelayedApply_;
  bool mNeedsFireTransitionCompleted_;
  bool reduceFlicker_;
  ADXMotionLayout_MyTracker *myTracker_;
}

- (void)setupMotionViews;

+ (bool)willJumpWithFloat:(float)velocity
                withFloat:(float)position
                withFloat:(float)maxAcceleration;

- (void)computeCurrentPositions;

- (ADRect *)toRectWithADXConstraintWidget:(ADXConstraintWidget *)cw;

- (void)evaluateLayout;

- (void)fireTransitionChange;

- (void)processTransitionCompleted;

- (void)run;

@end

J2OBJC_FIELD_SETTER(ADXMotionLayout, mTransitionListener_, id<ADXMotionLayout_TransitionListener>)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mStopLogic_, ADXStopLogic *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mDecelerateLogic_, ADXMotionLayout_DecelerateInterpolator *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mOnShowHelpers_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mOnHideHelpers_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mDecoratorsHelpers_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mTransitionListeners_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mKeyCache_, ADXKeyCache *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mStateCache_, ADXMotionLayout_StateCache *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mOnComplete_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ADXMotionLayout, mScheduledTransitionTo_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXMotionLayout, myTracker_, ADXMotionLayout_MyTracker *)

inline bool ADXMotionLayout_get_DEBUG(void);
#define ADXMotionLayout_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionLayout, DEBUG, bool)

inline float ADXMotionLayout_get_EPSILON(void);
#define ADXMotionLayout_EPSILON 1.0E-5f
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionLayout, EPSILON, float)

__attribute__((unused)) static void ADXMotionLayout_setupMotionViews(ADXMotionLayout *self);

__attribute__((unused)) static bool ADXMotionLayout_willJumpWithFloat_withFloat_withFloat_(float velocity, float position, float maxAcceleration);

__attribute__((unused)) static void ADXMotionLayout_computeCurrentPositions(ADXMotionLayout *self);

__attribute__((unused)) static ADRect *ADXMotionLayout_toRectWithADXConstraintWidget_(ADXMotionLayout *self, ADXConstraintWidget *cw);

__attribute__((unused)) static void ADXMotionLayout_evaluateLayout(ADXMotionLayout *self);

__attribute__((unused)) static void ADXMotionLayout_fireTransitionChange(ADXMotionLayout *self);

__attribute__((unused)) static void ADXMotionLayout_processTransitionCompleted(ADXMotionLayout *self);

__attribute__((unused)) static void ADXMotionLayout_run(ADXMotionLayout *self);

__attribute__((unused)) static void ADXMotionLayout_TransitionState_initWithNSString_withInt_(ADXMotionLayout_TransitionState *self, NSString *__name, int32_t __ordinal);

@interface ADXMotionLayout_MotionTracker : NSObject

@end

@interface ADXMotionLayout_StateCache () {
 @public
  ADXMotionLayout *this$0_;
}

@end

@interface ADXMotionLayout_DecelerateInterpolator () {
 @public
  ADXMotionLayout *this$0_;
}

@end

@interface ADXMotionLayout_Model () {
 @public
  ADXMotionLayout *this$0_;
}

- (void)setupConstraintWidgetWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)base
                                         withADXConstraintSet:(ADXConstraintSet *)cSet;

- (void)debugLayoutParamWithNSString:(NSString *)str
withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)params;

- (void)debugWidgetWithNSString:(NSString *)str
        withADXConstraintWidget:(ADXConstraintWidget *)child;

- (void)debugLayoutWithNSString:(NSString *)title
withADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)c;

@end

__attribute__((unused)) static void ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(ADXMotionLayout_Model *self, ADXConstraintWidgetContainer *base, ADXConstraintSet *cSet);

__attribute__((unused)) static void ADXMotionLayout_Model_debugLayoutParamWithNSString_withADXConstraintLayout_LayoutParams_(ADXMotionLayout_Model *self, NSString *str, ADXConstraintLayout_LayoutParams *params);

__attribute__((unused)) static void ADXMotionLayout_Model_debugWidgetWithNSString_withADXConstraintWidget_(ADXMotionLayout_Model *self, NSString *str, ADXConstraintWidget *child);

__attribute__((unused)) static void ADXMotionLayout_Model_debugLayoutWithNSString_withADXConstraintWidgetContainer_(ADXMotionLayout_Model *self, NSString *title, ADXConstraintWidgetContainer *c);

@interface ADXMotionLayout_TransitionListener : NSObject

@end

@interface ADXMotionLayout_1 : NSObject < JavaLangRunnable > {
 @public
  ADXMotionLayout *this$0_;
}

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXMotionLayout_1)

__attribute__((unused)) static void ADXMotionLayout_1_initWithADXMotionLayout_(ADXMotionLayout_1 *self, ADXMotionLayout *outer$);

__attribute__((unused)) static ADXMotionLayout_1 *new_ADXMotionLayout_1_initWithADXMotionLayout_(ADXMotionLayout *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXMotionLayout_1 *create_ADXMotionLayout_1_initWithADXMotionLayout_(ADXMotionLayout *outer$);


@interface ADXMotionLayout_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ADXMotionLayout *target$_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXMotionLayout_$Lambda$1)

__attribute__((unused)) static void ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(ADXMotionLayout_$Lambda$1 *self, ADXMotionLayout *outer$);

__attribute__((unused)) static ADXMotionLayout_$Lambda$1 *new_ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(ADXMotionLayout *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXMotionLayout_$Lambda$1 *create_ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(ADXMotionLayout *outer$);


NSString *ADXMotionLayout_TAG = @"MotionLayout";
bool ADXMotionLayout_IS_IN_EDIT_MODE;

@implementation ADXMotionLayout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADXMotionController *)getMotionControllerWithInt:(int32_t)mTouchAnchorId {
  return [((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:[self findViewByIdWithInt:mTouchAnchorId]];
}

- (int64_t)getNanoTime {
  return JavaLangSystem_nanoTime();
}

- (void)setStateWithADXMotionLayout_TransitionState:(ADXMotionLayout_TransitionState *)newState {
  if (newState == JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED) && mCurrentState_ == ADXConstraintSet_UNSET) {
    return;
  }
  ADXMotionLayout_TransitionState *oldState = JreRetainedLocalValue(mTransitionState_);
  JreStrongAssign(&mTransitionState_, newState);
  if (oldState == JreLoadEnum(ADXMotionLayout_TransitionState, MOVING) && newState == JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)) {
    ADXMotionLayout_fireTransitionChange(self);
  }
  switch ([oldState ordinal]) {
    case ADXMotionLayout_TransitionState_Enum_UNDEFINED:
    case ADXMotionLayout_TransitionState_Enum_SETUP:
    if (newState == JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)) {
      ADXMotionLayout_fireTransitionChange(self);
    }
    if (newState == JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)) {
      [self fireTransitionCompleted];
    }
    break;
    case ADXMotionLayout_TransitionState_Enum_MOVING:
    if (newState == JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)) {
      [self fireTransitionCompleted];
    }
    break;
    case ADXMotionLayout_TransitionState_Enum_FINISHED:
    break;
  }
}

- (void)setTransitionWithInt:(int32_t)beginId
                     withInt:(int32_t)endId {
  if (![self isAttachedToWindow]) {
    if (mStateCache_ == nil) {
      JreStrongAssignAndConsume(&mStateCache_, new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(self));
    }
    [mStateCache_ setStartStateWithInt:beginId];
    [((ADXMotionLayout_StateCache *) nil_chk(mStateCache_)) setEndStateWithInt:endId];
    return;
  }
  if (mScene_ != nil) {
    mBeginState_ = beginId;
    mEndState_ = endId;
    [mScene_ setTransitionWithInt:beginId withInt:endId];
    [((ADXMotionLayout_Model *) nil_chk(mModel_)) initFromWithADXConstraintWidgetContainer:mLayoutWidget_ withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:beginId] withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:endId]];
    [self rebuildScene];
    mTransitionLastPosition_ = 0;
    [self transitionToStart];
  }
}

- (void)setTransitionWithInt:(int32_t)transitionId {
  if (mScene_ != nil) {
    ADXMotionScene_Transition *transition = JreRetainedLocalValue([self getTransitionWithInt:transitionId]);
    int32_t current = mCurrentState_;
    mBeginState_ = [((ADXMotionScene_Transition *) nil_chk(transition)) getStartConstraintSetId];
    mEndState_ = [transition getEndConstraintSetId];
    if (![self isAttachedToWindow]) {
      if (mStateCache_ == nil) {
        JreStrongAssignAndConsume(&mStateCache_, new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(self));
      }
      [mStateCache_ setStartStateWithInt:mBeginState_];
      [((ADXMotionLayout_StateCache *) nil_chk(mStateCache_)) setEndStateWithInt:mEndState_];
      return;
    }
    float pos = JavaLangFloat_NaN;
    if (mCurrentState_ == mBeginState_) {
      pos = 0;
    }
    else if (mCurrentState_ == mEndState_) {
      pos = 1;
    }
    [((ADXMotionScene *) nil_chk(mScene_)) setTransitionWithADXMotionScene_Transition:transition];
    [((ADXMotionLayout_Model *) nil_chk(mModel_)) initFromWithADXConstraintWidgetContainer:mLayoutWidget_ withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mBeginState_] withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mEndState_]];
    [self rebuildScene];
    if (mTransitionLastPosition_ != pos) {
      if (pos == 0) {
        [self endTriggerWithBoolean:true];
        [((ADXConstraintSet *) nil_chk([((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mBeginState_])) applyToWithADXConstraintLayout:self];
      }
      else if (pos == 1) {
        [self endTriggerWithBoolean:false];
        [((ADXConstraintSet *) nil_chk([((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mEndState_])) applyToWithADXConstraintLayout:self];
      }
    }
    mTransitionLastPosition_ = JavaLangFloat_isNaNWithFloat_(pos) ? 0 : pos;
    if (JavaLangFloat_isNaNWithFloat_(pos)) {
      ADLog_vWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$", ADXCLDebug_getLocation(), @" transitionToStart "));
      [self transitionToStart];
    }
    else {
      [self setProgressWithFloat:pos];
    }
  }
}

- (void)setTransitionWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition {
  [((ADXMotionScene *) nil_chk(mScene_)) setTransitionWithADXMotionScene_Transition:transition];
  [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
  if (mCurrentState_ == [((ADXMotionScene *) nil_chk(mScene_)) getEndId]) {
    mTransitionLastPosition_ = 1.0f;
    mTransitionPosition_ = 1.0f;
    mTransitionGoalPosition_ = 1;
  }
  else {
    mTransitionLastPosition_ = 0;
    mTransitionPosition_ = 0.0f;
    mTransitionGoalPosition_ = 0;
  }
  mTransitionLastTime_ = ([((ADXMotionScene_Transition *) nil_chk(transition)) isTransitionFlagWithInt:ADXMotionScene_Transition_TRANSITION_FLAG_FIRST_DRAW]) ? -1 : [self getNanoTime];
  int32_t newBeginState = [((ADXMotionScene *) nil_chk(mScene_)) getStartId];
  int32_t newEndState = [((ADXMotionScene *) nil_chk(mScene_)) getEndId];
  if (newBeginState == mBeginState_ && newEndState == mEndState_) {
    return;
  }
  mBeginState_ = newBeginState;
  mEndState_ = newEndState;
  [((ADXMotionScene *) nil_chk(mScene_)) setTransitionWithInt:mBeginState_ withInt:mEndState_];
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) initFromWithADXConstraintWidgetContainer:mLayoutWidget_ withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mBeginState_] withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mEndState_]];
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) setMeasuredIdWithInt:mBeginState_ withInt:mEndState_];
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) reEvaluateState];
  [self rebuildScene];
}

- (void)setStateWithInt:(int32_t)id_
                withInt:(int32_t)screenWidth
                withInt:(int32_t)screenHeight {
  [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
  mCurrentState_ = id_;
  mBeginState_ = ADXConstraintSet_UNSET;
  mEndState_ = ADXConstraintSet_UNSET;
  if (mConstraintLayoutSpec_ != nil) {
    [mConstraintLayoutSpec_ updateConstraintsWithInt:id_ withFloat:screenWidth withFloat:screenHeight];
  }
  else if (mScene_ != nil) {
    [((ADXConstraintSet *) nil_chk([mScene_ getConstraintSetWithInt:id_])) applyToWithADXConstraintLayout:self];
  }
}

- (void)setProgressWithFloat:(float)pos
                   withFloat:(float)velocity {
  if (![self isAttachedToWindow]) {
    if (mStateCache_ == nil) {
      JreStrongAssignAndConsume(&mStateCache_, new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(self));
    }
    [mStateCache_ setProgressWithFloat:pos];
    [((ADXMotionLayout_StateCache *) nil_chk(mStateCache_)) setVelocityWithFloat:velocity];
    return;
  }
  [self setProgressWithFloat:pos];
  [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
  mLastVelocity_ = velocity;
  [self animateToWithFloat:1];
}

- (void)setProgressWithFloat:(float)pos {
  if (pos < 0.0f || pos > 1.0f) {
    ADLog_wWithNSString_withNSString_(ADXMotionLayout_TAG, @"Warning! Progress is defined for values between 0.0 and 1.0 inclusive");
  }
  if (![self isAttachedToWindow]) {
    if (mStateCache_ == nil) {
      JreStrongAssignAndConsume(&mStateCache_, new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(self));
    }
    [mStateCache_ setProgressWithFloat:pos];
    return;
  }
  if (pos <= 0.0f) {
    if (mTransitionLastPosition_ == 1.0f && mCurrentState_ == mEndState_) {
      [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
    }
    mCurrentState_ = mBeginState_;
    if (mTransitionLastPosition_ == 0.0f) {
      [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
    }
  }
  else if (pos >= 1.0f) {
    if (mTransitionLastPosition_ == 0.0f && mCurrentState_ == mBeginState_) {
      [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
    }
    mCurrentState_ = mEndState_;
    if (mTransitionLastPosition_ == 1.0f) {
      [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
    }
  }
  else {
    mCurrentState_ = ADXConstraintSet_UNSET;
    [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
  }
  if (mScene_ == nil) {
    return;
  }
  mTransitionInstantly_ = true;
  mTransitionGoalPosition_ = pos;
  mTransitionPosition_ = pos;
  mTransitionLastTime_ = -1;
  mAnimationStartTime_ = -1;
  JreStrongAssign(&mInterpolator_, nil);
  mInTransition_ = true;
  [self invalidate];
}

- (void)setupMotionViews {
  ADXMotionLayout_setupMotionViews(self);
}

- (void)touchAnimateToWithInt:(int32_t)touchUpMode
                    withFloat:(float)position
                    withFloat:(float)currentVelocity {
  if (mScene_ == nil) {
    return;
  }
  if (mTransitionLastPosition_ == position) {
    return;
  }
  mTemporalInterpolator_ = true;
  mAnimationStartTime_ = [self getNanoTime];
  mTransitionDuration_ = [((ADXMotionScene *) nil_chk(mScene_)) getDuration] / 1000.0f;
  mTransitionGoalPosition_ = position;
  mInTransition_ = true;
  switch (touchUpMode) {
    case ADXMotionLayout_TOUCH_UP_COMPLETE:
    case ADXMotionLayout_TOUCH_UP_NEVER_TO_START:
    case ADXMotionLayout_TOUCH_UP_NEVER_TO_END:
    case ADXMotionLayout_TOUCH_UP_COMPLETE_TO_START:
    case ADXMotionLayout_TOUCH_UP_COMPLETE_TO_END:
    {
      if (touchUpMode == ADXMotionLayout_TOUCH_UP_COMPLETE_TO_START || touchUpMode == ADXMotionLayout_TOUCH_UP_NEVER_TO_END) {
        position = 0;
      }
      else if (touchUpMode == ADXMotionLayout_TOUCH_UP_COMPLETE_TO_END || touchUpMode == ADXMotionLayout_TOUCH_UP_NEVER_TO_START) {
        position = 1;
      }
      if ([((ADXMotionScene *) nil_chk(mScene_)) getAutoCompleteMode] == ADXTouchResponse_COMPLETE_MODE_CONTINUOUS_VELOCITY) {
        [((ADXStopLogic *) nil_chk(mStopLogic_)) configWithFloat:mTransitionLastPosition_ withFloat:position withFloat:currentVelocity withFloat:mTransitionDuration_ withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getMaxAcceleration] withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getMaxVelocity]];
      }
      else {
        [((ADXStopLogic *) nil_chk(mStopLogic_)) springConfigWithFloat:mTransitionLastPosition_ withFloat:position withFloat:currentVelocity withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getSpringMass] withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getSpringStiffiness] withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getSpringDamping] withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getSpringStopThreshold] withInt:[((ADXMotionScene *) nil_chk(mScene_)) getSpringBoundary]];
      }
      int32_t currentState = mCurrentState_;
      mTransitionGoalPosition_ = position;
      mCurrentState_ = currentState;
      JreStrongAssign(&mInterpolator_, mStopLogic_);
    }
    break;
    case ADXMotionLayout_TOUCH_UP_STOP:
    {
    }
    break;
    case ADXMotionLayout_TOUCH_UP_DECELERATE:
    {
      [((ADXMotionLayout_DecelerateInterpolator *) nil_chk(mDecelerateLogic_)) configWithFloat:currentVelocity withFloat:mTransitionLastPosition_ withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getMaxAcceleration]];
      JreStrongAssign(&mInterpolator_, mDecelerateLogic_);
    }
    break;
    case ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE:
    {
      if (ADXMotionLayout_willJumpWithFloat_withFloat_withFloat_(currentVelocity, mTransitionLastPosition_, [((ADXMotionScene *) nil_chk(mScene_)) getMaxAcceleration])) {
        [((ADXMotionLayout_DecelerateInterpolator *) nil_chk(mDecelerateLogic_)) configWithFloat:currentVelocity withFloat:mTransitionLastPosition_ withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getMaxAcceleration]];
        JreStrongAssign(&mInterpolator_, mDecelerateLogic_);
      }
      else {
        [((ADXStopLogic *) nil_chk(mStopLogic_)) configWithFloat:mTransitionLastPosition_ withFloat:position withFloat:currentVelocity withFloat:mTransitionDuration_ withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getMaxAcceleration] withFloat:[((ADXMotionScene *) nil_chk(mScene_)) getMaxVelocity]];
        mLastVelocity_ = 0;
        int32_t currentState = mCurrentState_;
        mTransitionGoalPosition_ = position;
        mCurrentState_ = currentState;
        JreStrongAssign(&mInterpolator_, mStopLogic_);
      }
    }
    break;
  }
  mTransitionInstantly_ = false;
  mAnimationStartTime_ = [self getNanoTime];
  [self invalidate];
}

+ (bool)willJumpWithFloat:(float)velocity
                withFloat:(float)position
                withFloat:(float)maxAcceleration {
  return ADXMotionLayout_willJumpWithFloat_withFloat_withFloat_(velocity, position, maxAcceleration);
}

- (void)animateToWithFloat:(float)position {
  if (mScene_ == nil) {
    return;
  }
  if (mTransitionLastPosition_ != mTransitionPosition_ && mTransitionInstantly_) {
    mTransitionLastPosition_ = mTransitionPosition_;
  }
  if (mTransitionLastPosition_ == position) {
    return;
  }
  mTemporalInterpolator_ = false;
  float currentPosition = mTransitionLastPosition_;
  mTransitionGoalPosition_ = position;
  mTransitionDuration_ = [mScene_ getDuration] / 1000.0f;
  [self setProgressWithFloat:mTransitionGoalPosition_];
  JreStrongAssign(&mInterpolator_, nil);
  JreStrongAssign(&mProgressInterpolator_, [((ADXMotionScene *) nil_chk(mScene_)) getInterpolator]);
  mTransitionInstantly_ = false;
  mAnimationStartTime_ = [self getNanoTime];
  mInTransition_ = true;
  mTransitionPosition_ = currentPosition;
  mTransitionLastPosition_ = currentPosition;
  [self invalidate];
}

- (void)computeCurrentPositions {
  ADXMotionLayout_computeCurrentPositions(self);
}

- (void)transitionToStart {
  [self animateToWithFloat:0.0f];
}

- (void)transitionToEnd {
  [self animateToWithFloat:1.0f];
  JreStrongAssign(&mOnComplete_, nil);
}

- (void)transitionToEndWithJavaLangRunnable:(id<JavaLangRunnable>)onComplete {
  [self animateToWithFloat:1.0f];
  JreStrongAssign(&mOnComplete_, onComplete);
}

- (void)transitionToStateWithInt:(int32_t)id_ {
  if (![self isAttachedToWindow]) {
    if (mStateCache_ == nil) {
      JreStrongAssignAndConsume(&mStateCache_, new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(self));
    }
    [mStateCache_ setEndStateWithInt:id_];
    return;
  }
  [self transitionToStateWithInt:id_ withInt:-1 withInt:-1];
}

- (void)transitionToStateWithInt:(int32_t)id_
                         withInt:(int32_t)duration {
  if (![self isAttachedToWindow]) {
    if (mStateCache_ == nil) {
      JreStrongAssignAndConsume(&mStateCache_, new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(self));
    }
    [mStateCache_ setEndStateWithInt:id_];
    return;
  }
  [self transitionToStateWithInt:id_ withInt:-1 withInt:-1 withInt:duration];
}

- (void)transitionToStateWithInt:(int32_t)id_
                         withInt:(int32_t)screenWidth
                         withInt:(int32_t)screenHeight {
  [self transitionToStateWithInt:id_ withInt:screenWidth withInt:screenHeight withInt:-1];
}

- (void)transitionToStateWithInt:(int32_t)id_
                         withInt:(int32_t)screenWidth
                         withInt:(int32_t)screenHeight
                         withInt:(int32_t)duration {
  if (mScene_ != nil && mScene_->mStateSet_ != nil) {
    int32_t tmp_id = [mScene_->mStateSet_ convertToConstraintSetWithInt:mCurrentState_ withInt:id_ withFloat:screenWidth withFloat:screenHeight];
    if (tmp_id != -1) {
      id_ = tmp_id;
    }
  }
  if (mCurrentState_ == id_) {
    return;
  }
  if (mBeginState_ == id_) {
    [self animateToWithFloat:0.0f];
    if (duration > 0) {
      mTransitionDuration_ = duration / 1000.0f;
    }
    return;
  }
  if (mEndState_ == id_) {
    [self animateToWithFloat:1.0f];
    if (duration > 0) {
      mTransitionDuration_ = duration / 1000.0f;
    }
    return;
  }
  mEndState_ = id_;
  if (mCurrentState_ != ADXConstraintSet_UNSET) {
    [self setTransitionWithInt:mCurrentState_ withInt:id_];
    [self animateToWithFloat:1.0f];
    mTransitionLastPosition_ = 0;
    [self transitionToEnd];
    if (duration > 0) {
      mTransitionDuration_ = duration / 1000.0f;
    }
    return;
  }
  mTemporalInterpolator_ = false;
  mTransitionGoalPosition_ = 1;
  mTransitionPosition_ = 0;
  mTransitionLastPosition_ = 0;
  mTransitionLastTime_ = [self getNanoTime];
  mAnimationStartTime_ = [self getNanoTime];
  mTransitionInstantly_ = false;
  JreStrongAssign(&mInterpolator_, nil);
  if (duration == -1) {
    mTransitionDuration_ = [((ADXMotionScene *) nil_chk(mScene_)) getDuration] / 1000.0f;
  }
  mBeginState_ = ADXConstraintSet_UNSET;
  [((ADXMotionScene *) nil_chk(mScene_)) setTransitionWithInt:mBeginState_ withInt:mEndState_];
  ADSparseArray *controllers = create_ADSparseArray_init();
  if (duration == 0) {
    mTransitionDuration_ = [((ADXMotionScene *) nil_chk(mScene_)) getDuration] / 1000.0f;
  }
  else if (duration > 0) {
    mTransitionDuration_ = duration / 1000.0f;
  }
  int32_t n = [self getChildCount];
  [((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) clear];
  for (int32_t i = 0; i < n; i++) {
    ADView *v = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXMotionController *f = create_ADXMotionController_initWithADView_(v);
    [((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) putWithId:v withId:f];
    [controllers putWithInt:[((ADView *) nil_chk(v)) getId] withId:[((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:v]];
  }
  mInTransition_ = true;
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) initFromWithADXConstraintWidgetContainer:mLayoutWidget_ withADXConstraintSet:nil withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:id_]];
  [self rebuildScene];
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) build];
  ADXMotionLayout_computeCurrentPositions(self);
  int32_t layoutWidth = [self getWidth];
  int32_t layoutHeight = [self getHeight];
  if (mDecoratorsHelpers_ != nil) {
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      if (motionController == nil) {
        continue;
      }
      [((ADXMotionScene *) nil_chk(mScene_)) getKeyFramesWithADXMotionController:motionController];
    }
    for (ADXMotionHelper * __strong mDecoratorsHelper in nil_chk(mDecoratorsHelpers_)) {
      [((ADXMotionHelper *) nil_chk(mDecoratorsHelper)) onPreSetupWithADXMotionLayout:self withJavaUtilHashMap:mFrameArrayList_];
    }
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      if (motionController == nil) {
        continue;
      }
      [motionController setupWithInt:layoutWidth withInt:layoutHeight withFloat:mTransitionDuration_ withLong:[self getNanoTime]];
    }
  }
  else {
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      if (motionController == nil) {
        continue;
      }
      [((ADXMotionScene *) nil_chk(mScene_)) getKeyFramesWithADXMotionController:motionController];
      [motionController setupWithInt:layoutWidth withInt:layoutHeight withFloat:mTransitionDuration_ withLong:[self getNanoTime]];
    }
  }
  float stagger = [((ADXMotionScene *) nil_chk(mScene_)) getStaggered];
  if (stagger != 0.0f) {
    float min = JavaLangFloat_MAX_VALUE;
    float max = -JavaLangFloat_MAX_VALUE;
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      float x = [((ADXMotionController *) nil_chk(f)) getFinalX];
      float y = [f getFinalY];
      min = JavaLangMath_minWithFloat_withFloat_(min, y + x);
      max = JavaLangMath_maxWithFloat_withFloat_(max, y + x);
    }
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      float x = [((ADXMotionController *) nil_chk(f)) getFinalX];
      float y = [f getFinalY];
      f->mStaggerScale_ = 1 / (1 - stagger);
      f->mStaggerOffset_ = stagger - stagger * (x + y - (min)) / (max - (min));
    }
  }
  mTransitionPosition_ = 0;
  mTransitionLastPosition_ = 0;
  mInTransition_ = true;
  [self invalidate];
}

- (float)getVelocity {
  return mLastVelocity_;
}

- (ADRect *)toRectWithADXConstraintWidget:(ADXConstraintWidget *)cw {
  return ADXMotionLayout_toRectWithADXConstraintWidget_(self, cw);
}

- (void)requestLayout {
  if (!(mMeasureDuringTransition_)) {
    if (mCurrentState_ == ADXConstraintSet_UNSET && mScene_ != nil && mScene_->mCurrentTransition_ != nil && [mScene_->mCurrentTransition_ getLayoutDuringTransition] == ADXMotionScene_LAYOUT_IGNORE_REQUEST) {
      return;
    }
  }
  [super requestLayout];
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mScene_ == nil) {
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
    return;
  }
  bool recalc = (mLastWidthMeasureSpec_ != widthMeasureSpec || mLastHeightMeasureSpec_ != heightMeasureSpec);
  if (mNeedsFireTransitionCompleted_) {
    mNeedsFireTransitionCompleted_ = false;
    [self onNewStateAttachHandlers];
    ADXMotionLayout_processTransitionCompleted(self);
    recalc = true;
  }
  if (mDirtyHierarchy_) {
    recalc = true;
  }
  mLastWidthMeasureSpec_ = widthMeasureSpec;
  mLastHeightMeasureSpec_ = heightMeasureSpec;
  int32_t startId = [((ADXMotionScene *) nil_chk(mScene_)) getStartId];
  int32_t endId = [((ADXMotionScene *) nil_chk(mScene_)) getEndId];
  bool setMeasure = true;
  if ((recalc || [((ADXMotionLayout_Model *) nil_chk(mModel_)) isNotConfiguredWithWithInt:startId withInt:endId]) && mBeginState_ != ADXConstraintSet_UNSET) {
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
    [((ADXMotionLayout_Model *) nil_chk(mModel_)) initFromWithADXConstraintWidgetContainer:mLayoutWidget_ withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:startId] withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:endId]];
    [((ADXMotionLayout_Model *) nil_chk(mModel_)) reEvaluateState];
    [((ADXMotionLayout_Model *) nil_chk(mModel_)) setMeasuredIdWithInt:startId withInt:endId];
    setMeasure = false;
  }
  else if (recalc) {
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
  if (mMeasureDuringTransition_ || setMeasure) {
    int32_t heightPadding = [self getPaddingTop] + [self getPaddingBottom];
    int32_t widthPadding = [self getPaddingLeft] + [self getPaddingRight];
    int32_t androidLayoutWidth = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getWidth] + widthPadding;
    int32_t androidLayoutHeight = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getHeight] + heightPadding;
    if (mWidthMeasureMode_ == ADView_MeasureSpec_AT_MOST || mWidthMeasureMode_ == ADView_MeasureSpec_UNSPECIFIED) {
      androidLayoutWidth = JreFpToInt((mStartWrapWidth_ + mPostInterpolationPosition_ * (mEndWrapWidth_ - mStartWrapWidth_)));
      [self requestLayout];
    }
    if (mHeightMeasureMode_ == ADView_MeasureSpec_AT_MOST || mHeightMeasureMode_ == ADView_MeasureSpec_UNSPECIFIED) {
      androidLayoutHeight = JreFpToInt((mStartWrapHeight_ + mPostInterpolationPosition_ * (mEndWrapHeight_ - mStartWrapHeight_)));
      [self requestLayout];
    }
    [self setMeasuredDimensionWithInt:androidLayoutWidth withInt:androidLayoutHeight];
  }
  if (!reduceFlicker_) {
    [self setRedrawWithBoolean:false];
    ADXMotionLayout_evaluateLayout(self);
    [self setRedrawWithBoolean:true];
  }
}

- (void)evaluateLayout {
  ADXMotionLayout_evaluateLayout(self);
}

- (void)endTriggerWithBoolean:(bool)start {
  if (reduceFlicker_) {
    ADXMotionLayout_evaluateLayout(self);
  }
  int32_t n = [self getChildCount];
  for (int32_t i = 0; i < n; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADXMotionController *frame = [((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:child];
    if (frame != nil) {
      [frame endTriggerWithBoolean:start];
    }
  }
}

- (void)evaluateWithBoolean:(bool)force {
  if (mTransitionLastTime_ == -1) {
    mTransitionLastTime_ = [self getNanoTime];
  }
  if (mTransitionLastPosition_ > 0.0f && mTransitionLastPosition_ < 1.0f) {
    mCurrentState_ = ADXConstraintSet_UNSET;
  }
  bool newState = false;
  if (mKeepAnimating_ || (mInTransition_ && (force || mTransitionGoalPosition_ != mTransitionLastPosition_))) {
    float dir = JavaLangMath_signumWithFloat_(mTransitionGoalPosition_ - mTransitionLastPosition_);
    int64_t currentTime = [self getNanoTime];
    float deltaPos = 0.0f;
    if (!([mInterpolator_ isKindOfClass:[ADXMotionInterpolator class]])) {
      deltaPos = dir * (currentTime - mTransitionLastTime_) * 1E-9f / mTransitionDuration_;
    }
    float position = mTransitionLastPosition_ + deltaPos;
    bool done = false;
    if (mTransitionInstantly_) {
      position = mTransitionGoalPosition_;
    }
    if ((dir > 0 && position >= mTransitionGoalPosition_) || (dir <= 0 && position <= mTransitionGoalPosition_)) {
      position = mTransitionGoalPosition_;
      mInTransition_ = false;
      done = true;
    }
    mTransitionLastPosition_ = position;
    mTransitionPosition_ = position;
    mTransitionLastTime_ = currentTime;
    int32_t NOT_STOP_LOGIC = 0;
    int32_t STOP_LOGIC_CONTINUE = 1;
    int32_t STOP_LOGIC_STOP = 2;
    int32_t stopLogicDone = NOT_STOP_LOGIC;
    if (mInterpolator_ != nil && !done) {
      if (mTemporalInterpolator_) {
        float time = (currentTime - mAnimationStartTime_) * 1E-9f;
        position = [mInterpolator_ getInterpolationWithFloat:time];
        if (JreObjectEqualsEquals(mInterpolator_, mStopLogic_)) {
          bool dp = [((ADXStopLogic *) nil_chk(mStopLogic_)) isStopped];
          stopLogicDone = (dp) ? STOP_LOGIC_STOP : STOP_LOGIC_CONTINUE;
        }
        mTransitionLastPosition_ = position;
        mTransitionLastTime_ = currentTime;
        if ([mInterpolator_ isKindOfClass:[ADXMotionInterpolator class]]) {
          float lastVelocity = [((ADXMotionInterpolator *) nil_chk(((ADXMotionInterpolator *) mInterpolator_))) getVelocity];
          mLastVelocity_ = lastVelocity;
          if (JavaLangMath_absWithFloat_(lastVelocity) * mTransitionDuration_ <= ADXMotionLayout_EPSILON && stopLogicDone == STOP_LOGIC_STOP) {
            mInTransition_ = false;
          }
          if (lastVelocity > 0 && position >= 1.0f) {
            mTransitionLastPosition_ = position = 1.0f;
            mInTransition_ = false;
          }
          if (lastVelocity < 0 && position <= 0) {
            mTransitionLastPosition_ = position = 0.0f;
            mInTransition_ = false;
          }
        }
      }
      else {
        float p2 = position;
        position = [mInterpolator_ getInterpolationWithFloat:position];
        if ([mInterpolator_ isKindOfClass:[ADXMotionInterpolator class]]) {
          mLastVelocity_ = [((ADXMotionInterpolator *) nil_chk(((ADXMotionInterpolator *) mInterpolator_))) getVelocity];
        }
        else {
          p2 = [((id<ADInterpolator>) nil_chk(mInterpolator_)) getInterpolationWithFloat:p2 + deltaPos];
          mLastVelocity_ = dir * (p2 - position) / deltaPos;
        }
      }
    }
    else {
      mLastVelocity_ = deltaPos;
    }
    if (JavaLangMath_absWithFloat_(mLastVelocity_) > ADXMotionLayout_EPSILON) {
      [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
    }
    if (stopLogicDone != STOP_LOGIC_CONTINUE) {
      if ((dir > 0 && position >= mTransitionGoalPosition_) || (dir <= 0 && position <= mTransitionGoalPosition_)) {
        position = mTransitionGoalPosition_;
        mInTransition_ = false;
      }
      if (position >= 1.0f || position <= 0.0f) {
        mInTransition_ = false;
        [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      }
    }
    int32_t n = [self getChildCount];
    mKeepAnimating_ = false;
    int64_t time = [self getNanoTime];
    mPostInterpolationPosition_ = position;
    float interPos = mProgressInterpolator_ == nil ? position : [mProgressInterpolator_ getInterpolationWithFloat:position];
    if (mProgressInterpolator_ != nil) {
      mLastVelocity_ = [mProgressInterpolator_ getInterpolationWithFloat:position + dir / mTransitionDuration_];
      JreMinusAssignFloatF(&mLastVelocity_, [((id<ADInterpolator>) nil_chk(mProgressInterpolator_)) getInterpolationWithFloat:position]);
    }
    for (int32_t i = 0; i < n; i++) {
      ADView *child = [self getChildAtWithInt:i];
      ADXMotionController *frame = [((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:child];
      if (frame != nil) {
        mKeepAnimating_ |= [frame interpolateWithADView:child withFloat:interPos withLong:time withADXKeyCache:mKeyCache_];
      }
    }
    bool end = ((dir > 0 && position >= mTransitionGoalPosition_) || (dir <= 0 && position <= mTransitionGoalPosition_));
    if (!mKeepAnimating_ && !mInTransition_ && end) {
      [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
    }
    if (mMeasureDuringTransition_) {
      [self requestLayout];
    }
    mKeepAnimating_ |= !end;
    if (position <= 0 && mBeginState_ != ADXConstraintSet_UNSET) {
      if (mCurrentState_ != mBeginState_) {
        newState = true;
        mCurrentState_ = mBeginState_;
        ADXConstraintSet *set = JreRetainedLocalValue([((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mBeginState_]);
        [((ADXConstraintSet *) nil_chk(set)) applyCustomAttributesWithADXConstraintLayout:self];
        [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      }
    }
    if (position >= 1.0) {
      if (mCurrentState_ != mEndState_) {
        newState = true;
        mCurrentState_ = mEndState_;
        ADXConstraintSet *set = JreRetainedLocalValue([((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mEndState_]);
        [((ADXConstraintSet *) nil_chk(set)) applyCustomAttributesWithADXConstraintLayout:self];
        [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      }
    }
    if (mKeepAnimating_ || mInTransition_) {
      [self invalidate];
    }
    else {
      if ((dir > 0 && position == 1) || (dir < 0 && position == 0)) {
        [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, FINISHED)];
      }
    }
    if (!mKeepAnimating_ && !mInTransition_ && ((dir > 0 && position == 1) || (dir < 0 && position == 0))) {
      [self onNewStateAttachHandlers];
    }
  }
  if (mTransitionLastPosition_ >= 1.0f) {
    if (mCurrentState_ != mEndState_) {
      newState = true;
    }
    mCurrentState_ = mEndState_;
  }
  else if (mTransitionLastPosition_ <= 0.0f) {
    if (mCurrentState_ != mBeginState_) {
      newState = true;
    }
    mCurrentState_ = mBeginState_;
  }
  mNeedsFireTransitionCompleted_ |= newState;
  if (newState && !mInLayout_) {
    [self requestLayout];
  }
  mTransitionPosition_ = mTransitionLastPosition_;
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)left
                    withInt:(int32_t)top
                    withInt:(int32_t)right
                    withInt:(int32_t)bottom {
  mInLayout_ = true;
  @try {
    if (mScene_ == nil) {
      [super onLayoutWithBoolean:changed withInt:left withInt:top withInt:right withInt:bottom];
      return;
    }
    int32_t w = right - left;
    int32_t h = bottom - top;
    if (mLastLayoutWidth_ != w || mLastLayoutHeight_ != h) {
      [self rebuildScene];
      [self evaluateWithBoolean:true];
    }
    mLastLayoutWidth_ = w;
    mLastLayoutHeight_ = h;
    mOldWidth_ = w;
    mOldHeight_ = h;
  }
  @finally {
    mInLayout_ = false;
  }
}

- (bool)onTouchEventWithADMotionEvent:(ADMotionEvent *)event {
  if (mScene_ != nil && mInteractionEnabled_ && [mScene_ supportTouch]) {
    ADXMotionScene_Transition *currentTransition = JreRetainedLocalValue(mScene_->mCurrentTransition_);
    if (currentTransition != nil && ![currentTransition isEnabled]) {
      return false;
    }
    [((ADXMotionScene *) nil_chk(mScene_)) processTouchEventWithADMotionEvent:event withInt:[self getCurrentState] withADXMotionLayout:self];
    return true;
  }
  return false;
}

- (void)onNewStateAttachHandlers {
  if (mScene_ == nil) {
    return;
  }
  if ([mScene_ autoTransitionWithADXMotionLayout:self withInt:mCurrentState_]) {
    [self requestLayout];
    return;
  }
  if (mCurrentState_ != ADXConstraintSet_UNSET) {
    [((ADXMotionScene *) nil_chk(mScene_)) addOnClickListenersWithADXMotionLayout:self withInt:mCurrentState_];
  }
  if ([((ADXMotionScene *) nil_chk(mScene_)) supportTouch]) {
    [((ADXMotionScene *) nil_chk(mScene_)) setupTouch];
  }
}

- (int32_t)getCurrentState {
  return mCurrentState_;
}

- (float)getProgress {
  return mTransitionLastPosition_;
}

- (void)getAnchorDpDtWithInt:(int32_t)mTouchAnchorId
                   withFloat:(float)pos
                   withFloat:(float)locationX
                   withFloat:(float)locationY
              withFloatArray:(IOSFloatArray *)mAnchorDpDt {
  ADView *v;
  ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mFrameArrayList_)) getWithId:v = [self getViewByIdWithInt:mTouchAnchorId]]);
  if (f != nil) {
    [f getDpDtWithFloat:pos withFloat:locationX withFloat:locationY withFloatArray:mAnchorDpDt];
    float y = [((ADView *) nil_chk(v)) getY];
    float deltaPos = pos - lastPos_;
    float deltaY = y - lastY_;
    float dydp = (deltaPos != 0.0f) ? deltaY / deltaPos : JavaLangFloat_NaN;
    lastPos_ = pos;
    lastY_ = y;
  }
  else {
    NSString *idName = (v == nil) ? JreStrcat("I", mTouchAnchorId) : [((ADResources *) nil_chk([((ADContext *) nil_chk([((ADView *) nil_chk(v)) getContext])) getResources])) getResourceNameWithInt:mTouchAnchorId];
    ADLog_wWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$", @"WARNING could not find view id ", idName));
  }
}

- (void)fireTriggerWithInt:(int32_t)triggerId
               withBoolean:(bool)positive
                 withFloat:(float)progress {
  if (mTransitionListener_ != nil) {
    [mTransitionListener_ onTransitionTriggerWithADXMotionLayout:self withInt:triggerId withBoolean:positive withFloat:progress];
  }
  if (mTransitionListeners_ != nil) {
    for (id<ADXMotionLayout_TransitionListener> __strong listeners in mTransitionListeners_) {
      [((id<ADXMotionLayout_TransitionListener>) nil_chk(listeners)) onTransitionTriggerWithADXMotionLayout:self withInt:triggerId withBoolean:positive withFloat:progress];
    }
  }
}

- (void)fireTransitionChange {
  ADXMotionLayout_fireTransitionChange(self);
}

- (void)fireTransitionCompleted {
  if (mTransitionListener_ != nil || (mTransitionListeners_ != nil && ![mTransitionListeners_ isEmpty])) {
    if (mListenerState_ == ADXConstraintSet_UNSET) {
      mListenerState_ = mCurrentState_;
      int32_t lastState = ADXConstraintSet_UNSET;
      if (![((JavaUtilArrayList *) nil_chk(mTransitionCompleted_)) isEmpty]) {
        lastState = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(mTransitionCompleted_)) getWithInt:[mTransitionCompleted_ size] - 1])) intValue];
      }
      if (lastState != mCurrentState_ && mCurrentState_ != -1) {
        [((JavaUtilArrayList *) nil_chk(mTransitionCompleted_)) addWithId:JavaLangInteger_valueOfWithInt_(mCurrentState_)];
      }
    }
  }
  ADXMotionLayout_processTransitionCompleted(self);
  if (mOnComplete_ != nil) {
    [mOnComplete_ run];
  }
  if (mScheduledTransitionTo_ != nil && mScheduledTransitions_ > 0) {
    [self transitionToStateWithInt:IOSIntArray_Get(mScheduledTransitionTo_, 0)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mScheduledTransitionTo_, 1, mScheduledTransitionTo_, 0, ((IOSIntArray *) nil_chk(mScheduledTransitionTo_))->size_ - 1);
    mScheduledTransitions_--;
  }
}

- (void)processTransitionCompleted {
  ADXMotionLayout_processTransitionCompleted(self);
}

- (void)onViewAddedWithADView:(ADView *)view {
  [super onViewAddedWithADView:view];
  if ([view isKindOfClass:[ADXMotionHelper class]]) {
    ADXMotionHelper *helper = (ADXMotionHelper *) view;
    if (mTransitionListeners_ == nil) {
      JreStrongAssignAndConsume(&mTransitionListeners_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
    }
    [mTransitionListeners_ addWithId:helper];
    if ([((ADXMotionHelper *) nil_chk(helper)) isUsedOnShow]) {
      if (mOnShowHelpers_ == nil) {
        JreStrongAssignAndConsume(&mOnShowHelpers_, new_JavaUtilArrayList_init());
      }
      [mOnShowHelpers_ addWithId:helper];
    }
    if ([helper isUseOnHide]) {
      if (mOnHideHelpers_ == nil) {
        JreStrongAssignAndConsume(&mOnHideHelpers_, new_JavaUtilArrayList_init());
      }
      [mOnHideHelpers_ addWithId:helper];
    }
    if ([helper isDecorator]) {
      if (mDecoratorsHelpers_ == nil) {
        JreStrongAssignAndConsume(&mDecoratorsHelpers_, new_JavaUtilArrayList_init());
      }
      [mDecoratorsHelpers_ addWithId:helper];
    }
  }
}

- (void)onViewRemovedWithADView:(ADView *)view {
  [super onViewRemovedWithADView:view];
  if (mOnShowHelpers_ != nil) {
    [mOnShowHelpers_ removeWithId:view];
  }
  if (mOnHideHelpers_ != nil) {
    [mOnHideHelpers_ removeWithId:view];
  }
}

- (void)setOnShowWithFloat:(float)progress {
  if (mOnShowHelpers_ != nil) {
    int32_t count = [mOnShowHelpers_ size];
    for (int32_t i = 0; i < count; i++) {
      ADXMotionHelper *helper = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mOnShowHelpers_)) getWithInt:i]);
      [((ADXMotionHelper *) nil_chk(helper)) setProgressWithFloat:progress];
    }
  }
}

- (void)setOnHideWithFloat:(float)progress {
  if (mOnHideHelpers_ != nil) {
    int32_t count = [mOnHideHelpers_ size];
    for (int32_t i = 0; i < count; i++) {
      ADXMotionHelper *helper = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mOnHideHelpers_)) getWithInt:i]);
      [((ADXMotionHelper *) nil_chk(helper)) setProgressWithFloat:progress];
    }
  }
}

- (IOSIntArray *)getConstraintSetIds {
  if (mScene_ == nil) {
    return nil;
  }
  return [mScene_ getConstraintSetIds];
}

- (ADXConstraintSet *)getConstraintSetWithInt:(int32_t)id_ {
  if (mScene_ == nil) {
    return nil;
  }
  return [mScene_ getConstraintSetWithInt:id_];
}

- (void)rebuildScene {
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) reEvaluateState];
  [self invalidate];
}

- (void)updateStateWithInt:(int32_t)stateId
      withADXConstraintSet:(ADXConstraintSet *)set {
  if (mScene_ != nil) {
    [mScene_ setConstraintSetWithInt:stateId withADXConstraintSet:set];
  }
  [self updateState];
  if (mCurrentState_ == stateId) {
    [((ADXConstraintSet *) nil_chk(set)) applyToWithADXConstraintLayout:self];
  }
}

- (void)updateState {
  [((ADXMotionLayout_Model *) nil_chk(mModel_)) initFromWithADXConstraintWidgetContainer:mLayoutWidget_ withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mBeginState_] withADXConstraintSet:[((ADXMotionScene *) nil_chk(mScene_)) getConstraintSetWithInt:mEndState_]];
  [self rebuildScene];
}

- (JavaUtilArrayList *)getDefinedTransitions {
  if (mScene_ == nil) {
    return nil;
  }
  return [mScene_ getDefinedTransitions];
}

- (int32_t)getStartState {
  return mBeginState_;
}

- (int32_t)getEndState {
  return mEndState_;
}

- (void)setTransitionDurationWithInt:(int32_t)milliseconds {
  if (mScene_ == nil) {
    ADLog_eWithNSString_withNSString_(ADXMotionLayout_TAG, @"MotionScene not defined");
    return;
  }
  [mScene_ setDurationWithInt:milliseconds];
}

- (ADXMotionScene_Transition *)getTransitionWithInt:(int32_t)id_ {
  return [((ADXMotionScene *) nil_chk(mScene_)) getTransitionByIdWithInt:id_];
}

- (bool)isInteractionEnabled {
  return mInteractionEnabled_;
}

- (void)viewTransitionWithInt:(int32_t)viewTransitionId
              withADViewArray:(IOSObjectArray *)view {
  if (mScene_ != nil) {
    [mScene_ viewTransitionWithInt:viewTransitionId withADViewArray:view];
  }
  else {
    ADLog_eWithNSString_withNSString_(ADXMotionLayout_TAG, @" no motionScene");
  }
}

- (void)setSceneWithADXMotionScene:(ADXMotionScene *)scene {
  JreStrongAssign(&mScene_, scene);
}

- (void)invalidate {
  [super invalidate];
  ASPluginInvoker_enqueueTaskForEventLoopWithJavaLangRunnable_withLong_(create_ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(self), JavaLangSystem_currentTimeMillis());
}

- (void)run {
  ADXMotionLayout_run(self);
}

- (ADXMotionScene *)getScene {
  return mScene_;
}

- (void)setReduceFlickerWithBoolean:(bool)reduceFlicker {
  self->reduceFlicker_ = reduceFlicker;
}

- (void)postInit {
  if (mCurrentState_ == ADXConstraintSet_UNSET && mScene_ != nil) {
    mCurrentState_ = [mScene_ getStartId];
    mBeginState_ = [((ADXMotionScene *) nil_chk(mScene_)) getStartId];
    mEndState_ = [((ADXMotionScene *) nil_chk(mScene_)) getEndId];
  }
  if ([self isAttachedToWindow]) {
    if (mScene_ != nil) {
      ADXConstraintSet *cSet = JreRetainedLocalValue([mScene_ getConstraintSetWithInt:mCurrentState_]);
      if (mDecoratorsHelpers_ != nil) {
        for (ADXMotionHelper * __strong mh in mDecoratorsHelpers_) {
          [((ADXMotionHelper *) nil_chk(mh)) onFinishedMotionSceneWithADXMotionLayout:self];
        }
      }
      if (cSet != nil) {
        [cSet applyToWithADXConstraintLayout:self];
      }
      mBeginState_ = mCurrentState_;
    }
    [self onNewStateAttachHandlers];
    if (mStateCache_ != nil) {
      if (mDelayedApply_) {
        [self postWithJavaLangRunnable:create_ADXMotionLayout_1_initWithADXMotionLayout_(self)];
      }
      else {
        [mStateCache_ apply];
      }
    }
    else {
      if (mScene_ != nil && mScene_->mCurrentTransition_ != nil) {
        if ([mScene_->mCurrentTransition_ getAutoTransition] == ADXMotionScene_Transition_AUTO_ANIMATE_TO_END) {
          [self transitionToEnd];
          [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
          [self setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, MOVING)];
        }
      }
    }
  }
}

- (id<ADXMotionLayout_MotionTracker>)obtainVelocityTracker {
  return myTracker_;
}

- (void)dealloc {
  RELEASE_(mScene_);
  RELEASE_(mInterpolator_);
  RELEASE_(mProgressInterpolator_);
  RELEASE_(mFrameArrayList_);
  RELEASE_(mTransitionListener_);
  RELEASE_(mStopLogic_);
  RELEASE_(mDecelerateLogic_);
  RELEASE_(mOnShowHelpers_);
  RELEASE_(mOnHideHelpers_);
  RELEASE_(mDecoratorsHelpers_);
  RELEASE_(mTransitionListeners_);
  RELEASE_(mKeyCache_);
  RELEASE_(mStateCache_);
  RELEASE_(mOnComplete_);
  RELEASE_(mScheduledTransitionTo_);
  RELEASE_(mPreRotate_);
  RELEASE_(mTempRect_);
  RELEASE_(mTransitionState_);
  RELEASE_(mModel_);
  RELEASE_(mTransitionCompleted_);
  RELEASE_(myTracker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMotionController;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintSet;", 0x1, 39, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "LADXMotionScene_Transition;", 0x1, 44, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMotionScene;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMotionLayout_MotionTracker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMotionControllerWithInt:);
  methods[2].selector = @selector(getNanoTime);
  methods[3].selector = @selector(setStateWithADXMotionLayout_TransitionState:);
  methods[4].selector = @selector(setTransitionWithInt:withInt:);
  methods[5].selector = @selector(setTransitionWithInt:);
  methods[6].selector = @selector(setTransitionWithADXMotionScene_Transition:);
  methods[7].selector = @selector(setStateWithInt:withInt:withInt:);
  methods[8].selector = @selector(setProgressWithFloat:withFloat:);
  methods[9].selector = @selector(setProgressWithFloat:);
  methods[10].selector = @selector(setupMotionViews);
  methods[11].selector = @selector(touchAnimateToWithInt:withFloat:withFloat:);
  methods[12].selector = @selector(willJumpWithFloat:withFloat:withFloat:);
  methods[13].selector = @selector(animateToWithFloat:);
  methods[14].selector = @selector(computeCurrentPositions);
  methods[15].selector = @selector(transitionToStart);
  methods[16].selector = @selector(transitionToEnd);
  methods[17].selector = @selector(transitionToEndWithJavaLangRunnable:);
  methods[18].selector = @selector(transitionToStateWithInt:);
  methods[19].selector = @selector(transitionToStateWithInt:withInt:);
  methods[20].selector = @selector(transitionToStateWithInt:withInt:withInt:);
  methods[21].selector = @selector(transitionToStateWithInt:withInt:withInt:withInt:);
  methods[22].selector = @selector(getVelocity);
  methods[23].selector = @selector(toRectWithADXConstraintWidget:);
  methods[24].selector = @selector(requestLayout);
  methods[25].selector = @selector(onMeasureWithInt:withInt:);
  methods[26].selector = @selector(evaluateLayout);
  methods[27].selector = @selector(endTriggerWithBoolean:);
  methods[28].selector = @selector(evaluateWithBoolean:);
  methods[29].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[30].selector = @selector(onTouchEventWithADMotionEvent:);
  methods[31].selector = @selector(onNewStateAttachHandlers);
  methods[32].selector = @selector(getCurrentState);
  methods[33].selector = @selector(getProgress);
  methods[34].selector = @selector(getAnchorDpDtWithInt:withFloat:withFloat:withFloat:withFloatArray:);
  methods[35].selector = @selector(fireTriggerWithInt:withBoolean:withFloat:);
  methods[36].selector = @selector(fireTransitionChange);
  methods[37].selector = @selector(fireTransitionCompleted);
  methods[38].selector = @selector(processTransitionCompleted);
  methods[39].selector = @selector(onViewAddedWithADView:);
  methods[40].selector = @selector(onViewRemovedWithADView:);
  methods[41].selector = @selector(setOnShowWithFloat:);
  methods[42].selector = @selector(setOnHideWithFloat:);
  methods[43].selector = @selector(getConstraintSetIds);
  methods[44].selector = @selector(getConstraintSetWithInt:);
  methods[45].selector = @selector(rebuildScene);
  methods[46].selector = @selector(updateStateWithInt:withADXConstraintSet:);
  methods[47].selector = @selector(updateState);
  methods[48].selector = @selector(getDefinedTransitions);
  methods[49].selector = @selector(getStartState);
  methods[50].selector = @selector(getEndState);
  methods[51].selector = @selector(setTransitionDurationWithInt:);
  methods[52].selector = @selector(getTransitionWithInt:);
  methods[53].selector = @selector(isInteractionEnabled);
  methods[54].selector = @selector(viewTransitionWithInt:withADViewArray:);
  methods[55].selector = @selector(setSceneWithADXMotionScene:);
  methods[56].selector = @selector(invalidate);
  methods[57].selector = @selector(run);
  methods[58].selector = @selector(getScene);
  methods[59].selector = @selector(setReduceFlickerWithBoolean:);
  methods[60].selector = @selector(postInit);
  methods[61].selector = @selector(obtainVelocityTracker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TOUCH_UP_COMPLETE", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_COMPLETE, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_COMPLETE_TO_START", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_COMPLETE_TO_START, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_COMPLETE_TO_END", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_COMPLETE_TO_END, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_STOP", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_STOP, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_DECELERATE", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_DECELERATE, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_DECELERATE_AND_COMPLETE", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_NEVER_TO_START", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_NEVER_TO_START, 0x19, -1, -1, -1, -1 },
    { "TOUCH_UP_NEVER_TO_END", "I", .constantValue.asInt = ADXMotionLayout_TOUCH_UP_NEVER_TO_END, 0x19, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 50, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXMotionLayout_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "IS_IN_EDIT_MODE", "Z", .constantValue.asLong = 0, 0x9, -1, 51, -1, -1 },
    { "mScene_", "LADXMotionScene;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInterpolator_", "LADInterpolator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mProgressInterpolator_", "LADInterpolator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastVelocity_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBeginState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurrentState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEndState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastWidthMeasureSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastHeightMeasureSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInteractionEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFrameArrayList_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 52, -1 },
    { "mAnimationStartTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionDuration_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionPosition_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTransitionLastPosition_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTransitionLastTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionGoalPosition_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTransitionInstantly_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInTransition_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIndirectTransition_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTransitionListener_", "LADXMotionLayout_TransitionListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPos_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEBUG_SHOW_NONE", "I", .constantValue.asInt = ADXMotionLayout_DEBUG_SHOW_NONE, 0x19, -1, -1, -1, -1 },
    { "DEBUG_SHOW_PROGRESS", "I", .constantValue.asInt = ADXMotionLayout_DEBUG_SHOW_PROGRESS, 0x19, -1, -1, -1, -1 },
    { "DEBUG_SHOW_PATH", "I", .constantValue.asInt = ADXMotionLayout_DEBUG_SHOW_PATH, 0x19, -1, -1, -1, -1 },
    { "mDebugPath_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "MAX_KEY_FRAMES", "I", .constantValue.asInt = ADXMotionLayout_MAX_KEY_FRAMES, 0x18, -1, -1, -1, -1 },
    { "mTemporalInterpolator_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStopLogic_", "LADXStopLogic;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDecelerateLogic_", "LADXMotionLayout_DecelerateInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstDown_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOldWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOldHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastLayoutWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastLayoutHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUndergoingMotion_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScrollTargetDX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScrollTargetDY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScrollTargetDT_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mKeepAnimating_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnShowHelpers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 53, -1 },
    { "mOnHideHelpers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 53, -1 },
    { "mDecoratorsHelpers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 53, -1 },
    { "mTransitionListeners_", "LJavaUtilConcurrentCopyOnWriteArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 54, -1 },
    { "mFrames_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastFps_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListenerState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListenerPosition_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsAnimating_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "VELOCITY_POST_LAYOUT", "I", .constantValue.asInt = ADXMotionLayout_VELOCITY_POST_LAYOUT, 0x19, -1, -1, -1, -1 },
    { "VELOCITY_LAYOUT", "I", .constantValue.asInt = ADXMotionLayout_VELOCITY_LAYOUT, 0x19, -1, -1, -1, -1 },
    { "VELOCITY_STATIC_POST_LAYOUT", "I", .constantValue.asInt = ADXMotionLayout_VELOCITY_STATIC_POST_LAYOUT, 0x19, -1, -1, -1, -1 },
    { "VELOCITY_STATIC_LAYOUT", "I", .constantValue.asInt = ADXMotionLayout_VELOCITY_STATIC_LAYOUT, 0x19, -1, -1, -1, -1 },
    { "mMeasureDuringTransition_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mStartWrapWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mStartWrapHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEndWrapWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEndWrapHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWidthMeasureMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHeightMeasureMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPostInterpolationPosition_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mKeyCache_", "LADXKeyCache;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStateCache_", "LADXMotionLayout_StateCache;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnComplete_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScheduledTransitionTo_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScheduledTransitions_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInRotation_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotatMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPreRotate_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 55, -1 },
    { "mPreRotateWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPreRotateHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPreviouseRotation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTempRect_", "LADRect;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDelayedApply_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionState_", "LADXMotionLayout_TransitionState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EPSILON", "F", .constantValue.asFloat = ADXMotionLayout_EPSILON, 0x1a, -1, -1, -1, -1 },
    { "mModel_", "LADXMotionLayout_Model;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mNeedsFireTransitionCompleted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionCompleted_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 56, -1 },
    { "reduceFlicker_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myTracker_", "LADXMotionLayout_MyTracker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getMotionController", "I", "setState", "LADXMotionLayout_TransitionState;", "setTransition", "II", "LADXMotionScene_Transition;", "III", "setProgress", "FF", "F", "touchAnimateTo", "IFF", "willJump", "FFF", "animateTo", "transitionToEnd", "LJavaLangRunnable;", "transitionToState", "IIII", "toRect", "LADXConstraintWidget;", "onMeasure", "endTrigger", "Z", "evaluate", "onLayout", "ZIIII", "onTouchEvent", "LADMotionEvent;", "getAnchorDpDt", "IFFF[F", "fireTrigger", "IZF", "onViewAdded", "LADView;", "onViewRemoved", "setOnShow", "setOnHide", "getConstraintSet", "updateState", "ILADXConstraintSet;", "()Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/MotionScene$Transition;>;", "setTransitionDuration", "getTransition", "viewTransition", "I[LADView;", "setScene", "LADXMotionScene;", "setReduceFlicker", &ADXMotionLayout_TAG, &ADXMotionLayout_IS_IN_EDIT_MODE, "Ljava/util/HashMap<Lr/android/view/View;Landroidx/constraintlayout/motion/widget/MotionController;>;", "Ljava/util/ArrayList<Landroidx/constraintlayout/motion/widget/MotionHelper;>;", "Ljava/util/concurrent/CopyOnWriteArrayList<Landroidx/constraintlayout/motion/widget/MotionLayout$TransitionListener;>;", "Ljava/util/HashMap<Lr/android/view/View;Landroidx/constraintlayout/core/motion/utils/ViewState;>;", "Ljava/util/ArrayList<Ljava/lang/Integer;>;", "LADXMotionLayout_TransitionState;LADXMotionLayout_MotionTracker;LADXMotionLayout_StateCache;LADXMotionLayout_DecelerateInterpolator;LADXMotionLayout_Model;LADXMotionLayout_TransitionListener;LADXMotionLayout_MyTracker;" };
  static const J2ObjcClassInfo _ADXMotionLayout = { "MotionLayout", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x1, 62, 94, -1, 57, -1, -1, -1 };
  return &_ADXMotionLayout;
}

@end

void ADXMotionLayout_init(ADXMotionLayout *self) {
  ADXConstraintLayout_init(self);
  JreStrongAssign(&self->mProgressInterpolator_, nil);
  self->mLastVelocity_ = 0;
  self->mBeginState_ = ADXConstraintSet_UNSET;
  self->mCurrentState_ = ADXConstraintSet_UNSET;
  self->mEndState_ = ADXConstraintSet_UNSET;
  self->mLastWidthMeasureSpec_ = 0;
  self->mLastHeightMeasureSpec_ = 0;
  self->mInteractionEnabled_ = true;
  JreStrongAssignAndConsume(&self->mFrameArrayList_, new_JavaUtilHashMap_init());
  self->mAnimationStartTime_ = 0;
  self->mTransitionDuration_ = 1.0f;
  self->mTransitionPosition_ = 0.0f;
  self->mTransitionLastPosition_ = 0.0f;
  self->mTransitionGoalPosition_ = 0.0f;
  self->mInTransition_ = false;
  self->mIndirectTransition_ = false;
  self->mDebugPath_ = 0;
  self->mTemporalInterpolator_ = false;
  JreStrongAssignAndConsume(&self->mStopLogic_, new_ADXStopLogic_init());
  JreStrongAssignAndConsume(&self->mDecelerateLogic_, new_ADXMotionLayout_DecelerateInterpolator_initWithADXMotionLayout_(self));
  self->firstDown_ = true;
  self->mUndergoingMotion_ = false;
  self->mKeepAnimating_ = false;
  JreStrongAssign(&self->mOnShowHelpers_, nil);
  JreStrongAssign(&self->mOnHideHelpers_, nil);
  JreStrongAssign(&self->mDecoratorsHelpers_, nil);
  JreStrongAssign(&self->mTransitionListeners_, nil);
  self->mFrames_ = 0;
  self->mLastFps_ = 0;
  self->mListenerState_ = 0;
  self->mListenerPosition_ = 0.0f;
  self->mIsAnimating_ = false;
  self->mMeasureDuringTransition_ = false;
  JreStrongAssignAndConsume(&self->mKeyCache_, new_ADXKeyCache_init());
  self->mInLayout_ = false;
  JreStrongAssign(&self->mOnComplete_, nil);
  JreStrongAssign(&self->mScheduledTransitionTo_, nil);
  self->mScheduledTransitions_ = 0;
  self->mInRotation_ = false;
  self->mRotatMode_ = 0;
  JreStrongAssignAndConsume(&self->mPreRotate_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->mTempRect_, new_ADRect_init());
  self->mDelayedApply_ = false;
  JreStrongAssign(&self->mTransitionState_, JreLoadEnum(ADXMotionLayout_TransitionState, UNDEFINED));
  JreStrongAssignAndConsume(&self->mModel_, new_ADXMotionLayout_Model_initWithADXMotionLayout_(self));
  self->mNeedsFireTransitionCompleted_ = false;
  JreStrongAssignAndConsume(&self->mTransitionCompleted_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->myTracker_, new_ADXMotionLayout_MyTracker_init());
}

ADXMotionLayout *new_ADXMotionLayout_init() {
  J2OBJC_NEW_IMPL(ADXMotionLayout, init)
}

ADXMotionLayout *create_ADXMotionLayout_init() {
  J2OBJC_CREATE_IMPL(ADXMotionLayout, init)
}

void ADXMotionLayout_setupMotionViews(ADXMotionLayout *self) {
  int32_t n = [self getChildCount];
  [((ADXMotionLayout_Model *) nil_chk(self->mModel_)) build];
  self->mInTransition_ = true;
  ADSparseArray *controllers = create_ADSparseArray_init();
  for (int32_t i = 0; i < n; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    [controllers putWithInt:[((ADView *) nil_chk(child)) getId] withId:[((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:child]];
  }
  int32_t layoutWidth = [self getWidth];
  int32_t layoutHeight = [self getHeight];
  int32_t arc = [((ADXMotionScene *) nil_chk(self->mScene_)) gatPathMotionArc];
  if (arc != ADXConstraintSet_UNSET) {
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      if (motionController != nil) {
        [motionController setPathMotionArcWithInt:arc];
      }
    }
  }
  ADSparseBooleanArray *sparseBooleanArray = create_ADSparseBooleanArray_init();
  IOSIntArray *depends = [IOSIntArray arrayWithLength:[((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) size]];
  int32_t count = 0;
  for (int32_t i = 0; i < n; i++) {
    ADView *view = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:view]);
    if ([((ADXMotionController *) nil_chk(motionController)) getAnimateRelativeTo] != ADXConstraintSet_UNSET) {
      [sparseBooleanArray putWithInt:[motionController getAnimateRelativeTo] withBoolean:true];
      *IOSIntArray_GetRef(depends, count++) = [motionController getAnimateRelativeTo];
    }
  }
  if (self->mDecoratorsHelpers_ != nil) {
    for (int32_t i = 0; i < count; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self findViewByIdWithInt:IOSIntArray_Get(depends, i)]]);
      if (motionController == nil) {
        continue;
      }
      [((ADXMotionScene *) nil_chk(self->mScene_)) getKeyFramesWithADXMotionController:motionController];
    }
    for (ADXMotionHelper * __strong mDecoratorsHelper in nil_chk(self->mDecoratorsHelpers_)) {
      [((ADXMotionHelper *) nil_chk(mDecoratorsHelper)) onPreSetupWithADXMotionLayout:self withJavaUtilHashMap:self->mFrameArrayList_];
    }
    for (int32_t i = 0; i < count; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self findViewByIdWithInt:IOSIntArray_Get(depends, i)]]);
      if (motionController == nil) {
        continue;
      }
      [motionController setupWithInt:layoutWidth withInt:layoutHeight withFloat:self->mTransitionDuration_ withLong:[self getNanoTime]];
    }
  }
  else {
    for (int32_t i = 0; i < count; i++) {
      ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self findViewByIdWithInt:IOSIntArray_Get(depends, i)]]);
      if (motionController == nil) {
        continue;
      }
      [((ADXMotionScene *) nil_chk(self->mScene_)) getKeyFramesWithADXMotionController:motionController];
      [motionController setupWithInt:layoutWidth withInt:layoutHeight withFloat:self->mTransitionDuration_ withLong:[self getNanoTime]];
    }
  }
  for (int32_t i = 0; i < n; i++) {
    ADView *v = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:v]);
    if ([sparseBooleanArray getWithInt:[((ADView *) nil_chk(v)) getId]]) {
      continue;
    }
    if (motionController != nil) {
      [((ADXMotionScene *) nil_chk(self->mScene_)) getKeyFramesWithADXMotionController:motionController];
      [motionController setupWithInt:layoutWidth withInt:layoutHeight withFloat:self->mTransitionDuration_ withLong:[self getNanoTime]];
    }
  }
  float stagger = [((ADXMotionScene *) nil_chk(self->mScene_)) getStaggered];
  if (stagger != 0.0f) {
    bool flip = stagger < 0.0;
    bool useMotionStagger = false;
    stagger = JavaLangMath_absWithFloat_(stagger);
    float min = JavaLangFloat_MAX_VALUE;
    float max = -JavaLangFloat_MAX_VALUE;
    for (int32_t i = 0; i < n; i++) {
      ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
      if (!JavaLangFloat_isNaNWithFloat_(((ADXMotionController *) nil_chk(f))->mMotionStagger_)) {
        useMotionStagger = true;
        break;
      }
      float x = [f getFinalX];
      float y = [f getFinalY];
      float mdist = (flip) ? (y - x) : (y + x);
      min = JavaLangMath_minWithFloat_withFloat_(min, mdist);
      max = JavaLangMath_maxWithFloat_withFloat_(max, mdist);
    }
    if (useMotionStagger) {
      min = JavaLangFloat_MAX_VALUE;
      max = -JavaLangFloat_MAX_VALUE;
      for (int32_t i = 0; i < n; i++) {
        ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
        if (!JavaLangFloat_isNaNWithFloat_(((ADXMotionController *) nil_chk(f))->mMotionStagger_)) {
          min = JavaLangMath_minWithFloat_withFloat_(min, f->mMotionStagger_);
          max = JavaLangMath_maxWithFloat_withFloat_(max, f->mMotionStagger_);
        }
      }
      for (int32_t i = 0; i < n; i++) {
        ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
        if (!JavaLangFloat_isNaNWithFloat_(((ADXMotionController *) nil_chk(f))->mMotionStagger_)) {
          f->mStaggerScale_ = 1 / (1 - stagger);
          if (flip) {
            f->mStaggerOffset_ = stagger - stagger * ((max - f->mMotionStagger_) / (max - min));
          }
          else {
            f->mStaggerOffset_ = stagger - stagger * (f->mMotionStagger_ - min) / (max - min);
          }
        }
      }
    }
    else {
      for (int32_t i = 0; i < n; i++) {
        ADXMotionController *f = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:[self getChildAtWithInt:i]]);
        float x = [((ADXMotionController *) nil_chk(f)) getFinalX];
        float y = [f getFinalY];
        float mdist = (flip) ? (y - x) : (y + x);
        f->mStaggerScale_ = 1 / (1 - stagger);
        f->mStaggerOffset_ = stagger - stagger * (mdist - (min)) / (max - (min));
      }
    }
  }
}

bool ADXMotionLayout_willJumpWithFloat_withFloat_withFloat_(float velocity, float position, float maxAcceleration) {
  ADXMotionLayout_initialize();
  if (velocity > 0) {
    float time = velocity / maxAcceleration;
    float pos = velocity * time - (maxAcceleration * time * time) / 2;
    return (position + pos > 1);
  }
  else {
    float time = -velocity / maxAcceleration;
    float pos = velocity * time + (maxAcceleration * time * time) / 2;
    return (position + pos < 0);
  }
}

void ADXMotionLayout_computeCurrentPositions(ADXMotionLayout *self) {
  int32_t n = [self getChildCount];
  for (int32_t i = 0; i < n; i++) {
    ADView *v = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXMotionController *frame = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:v]);
    if (frame == nil) {
      continue;
    }
    [frame setStartCurrentStateWithADView:v];
  }
}

ADRect *ADXMotionLayout_toRectWithADXConstraintWidget_(ADXMotionLayout *self, ADXConstraintWidget *cw) {
  ((ADRect *) nil_chk(self->mTempRect_))->top_ = [((ADXConstraintWidget *) nil_chk(cw)) getY];
  ((ADRect *) nil_chk(self->mTempRect_))->left_ = [cw getX];
  ((ADRect *) nil_chk(self->mTempRect_))->right_ = [cw getWidth] + ((ADRect *) nil_chk(self->mTempRect_))->left_;
  self->mTempRect_->bottom_ = [cw getHeight] + ((ADRect *) nil_chk(self->mTempRect_))->top_;
  return self->mTempRect_;
}

void ADXMotionLayout_evaluateLayout(ADXMotionLayout *self) {
  float dir = JavaLangMath_signumWithFloat_(self->mTransitionGoalPosition_ - self->mTransitionLastPosition_);
  int64_t currentTime = [self getNanoTime];
  float deltaPos = 0.0f;
  if (!([self->mInterpolator_ isKindOfClass:[ADXStopLogic class]])) {
    deltaPos = dir * (currentTime - self->mTransitionLastTime_) * 1E-9f / self->mTransitionDuration_;
  }
  float position = self->mTransitionLastPosition_ + deltaPos;
  bool done = false;
  if (self->mTransitionInstantly_) {
    position = self->mTransitionGoalPosition_;
  }
  if ((dir > 0 && position >= self->mTransitionGoalPosition_) || (dir <= 0 && position <= self->mTransitionGoalPosition_)) {
    position = self->mTransitionGoalPosition_;
    done = true;
  }
  if (self->mInterpolator_ != nil && !done) {
    if (self->mTemporalInterpolator_) {
      float time = (currentTime - self->mAnimationStartTime_) * 1E-9f;
      position = [self->mInterpolator_ getInterpolationWithFloat:time];
    }
    else {
      position = [self->mInterpolator_ getInterpolationWithFloat:position];
    }
  }
  if ((dir > 0 && position >= self->mTransitionGoalPosition_) || (dir <= 0 && position <= self->mTransitionGoalPosition_)) {
    position = self->mTransitionGoalPosition_;
  }
  self->mPostInterpolationPosition_ = position;
  int32_t n = [self getChildCount];
  int64_t time = [self getNanoTime];
  float interPos = self->mProgressInterpolator_ == nil ? position : [self->mProgressInterpolator_ getInterpolationWithFloat:position];
  for (int32_t i = 0; i < n; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADXMotionController *frame = [((JavaUtilHashMap *) nil_chk(self->mFrameArrayList_)) getWithId:child];
    if (frame != nil) {
      [frame interpolateWithADView:child withFloat:interPos withLong:time withADXKeyCache:self->mKeyCache_];
    }
  }
  if (self->mMeasureDuringTransition_) {
    [self requestLayout];
  }
}

void ADXMotionLayout_fireTransitionChange(ADXMotionLayout *self) {
  if (self->mTransitionListener_ != nil || (self->mTransitionListeners_ != nil && ![self->mTransitionListeners_ isEmpty])) {
    if (self->mListenerPosition_ != self->mTransitionPosition_) {
      if (self->mListenerState_ != ADXConstraintSet_UNSET) {
        if (self->mTransitionListener_ != nil) {
          [self->mTransitionListener_ onTransitionStartedWithADXMotionLayout:self withInt:self->mBeginState_ withInt:self->mEndState_];
        }
        if (self->mTransitionListeners_ != nil) {
          for (id<ADXMotionLayout_TransitionListener> __strong listeners in self->mTransitionListeners_) {
            [((id<ADXMotionLayout_TransitionListener>) nil_chk(listeners)) onTransitionStartedWithADXMotionLayout:self withInt:self->mBeginState_ withInt:self->mEndState_];
          }
        }
        self->mIsAnimating_ = true;
      }
      self->mListenerState_ = ADXConstraintSet_UNSET;
      self->mListenerPosition_ = self->mTransitionPosition_;
      if (self->mTransitionListener_ != nil) {
        [self->mTransitionListener_ onTransitionChangeWithADXMotionLayout:self withInt:self->mBeginState_ withInt:self->mEndState_ withFloat:self->mTransitionPosition_];
      }
      if (self->mTransitionListeners_ != nil) {
        for (id<ADXMotionLayout_TransitionListener> __strong listeners in self->mTransitionListeners_) {
          [((id<ADXMotionLayout_TransitionListener>) nil_chk(listeners)) onTransitionChangeWithADXMotionLayout:self withInt:self->mBeginState_ withInt:self->mEndState_ withFloat:self->mTransitionPosition_];
        }
      }
      self->mIsAnimating_ = true;
    }
  }
}

void ADXMotionLayout_processTransitionCompleted(ADXMotionLayout *self) {
  if (self->mTransitionListener_ == nil && (self->mTransitionListeners_ == nil || [self->mTransitionListeners_ isEmpty])) {
    return;
  }
  self->mIsAnimating_ = false;
  for (JavaLangInteger * __strong state in nil_chk(self->mTransitionCompleted_)) {
    if (self->mTransitionListener_ != nil) {
      [self->mTransitionListener_ onTransitionCompletedWithADXMotionLayout:self withInt:[((JavaLangInteger *) nil_chk(state)) intValue]];
    }
    if (self->mTransitionListeners_ != nil) {
      for (id<ADXMotionLayout_TransitionListener> __strong listeners in self->mTransitionListeners_) {
        [((id<ADXMotionLayout_TransitionListener>) nil_chk(listeners)) onTransitionCompletedWithADXMotionLayout:self withInt:[((JavaLangInteger *) nil_chk(state)) intValue]];
      }
    }
  }
  [self->mTransitionCompleted_ clear];
}

void ADXMotionLayout_run(ADXMotionLayout *self) {
  if (self->mLayoutWidget_ != nil) {
    @try {
      [self setRedrawWithBoolean:false];
      [self evaluateWithBoolean:false];
      [self setRedrawWithBoolean:true];
    }
    @catch (JavaLangException *e) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionLayout)

J2OBJC_NAME_MAPPING(ADXMotionLayout, "androidx.constraintlayout.motion.widget", "ADX")

J2OBJC_INITIALIZED_DEFN(ADXMotionLayout_TransitionState)

ADXMotionLayout_TransitionState *ADXMotionLayout_TransitionState_values_[4];

@implementation ADXMotionLayout_TransitionState

+ (IOSObjectArray *)values {
  return ADXMotionLayout_TransitionState_values();
}

+ (ADXMotionLayout_TransitionState *)valueOfWithNSString:(NSString *)name {
  return ADXMotionLayout_TransitionState_valueOfWithNSString_(name);
}

- (ADXMotionLayout_TransitionState_Enum)toNSEnum {
  return (ADXMotionLayout_TransitionState_Enum)[self ordinal];
}

- (ADXMotionLayout_TransitionState_Enum)enumValue {
  return (ADXMotionLayout_TransitionState_Enum)[self ordinal];
}

+ (ADXMotionLayout_TransitionState *)fromNSEnum:(ADXMotionLayout_TransitionState_Enum)nativeValue {
  ADXMotionLayout_TransitionState *javaEnum = ADXMotionLayout_TransitionState_fromOrdinal(nativeValue);
  if (!javaEnum) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"NSEnum ADXMotionLayout_TransitionState_Enum out of range.");
  return javaEnum;
}

- (ADXMotionLayout_TransitionState_ORDINAL)ordinal {
  return (ADXMotionLayout_TransitionState_ORDINAL)[super ordinal];
}

- (nullable instancetype)initWithTransitionState:(ADXMotionLayout_TransitionState_Enum)value {
  return RETAIN_(ADXMotionLayout_TransitionState_fromOrdinal((ADXMotionLayout_TransitionState_ORDINAL)value));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXMotionLayout_TransitionState;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMotionLayout_TransitionState;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNDEFINED", "LADXMotionLayout_TransitionState;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SETUP", "LADXMotionLayout_TransitionState;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MOVING", "LADXMotionLayout_TransitionState;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "FINISHED", "LADXMotionLayout_TransitionState;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXMotionLayout_TransitionState, UNDEFINED), &JreEnum(ADXMotionLayout_TransitionState, SETUP), &JreEnum(ADXMotionLayout_TransitionState, MOVING), &JreEnum(ADXMotionLayout_TransitionState, FINISHED), "LADXMotionLayout;", "Ljava/lang/Enum<Landroidx/constraintlayout/motion/widget/MotionLayout$TransitionState;>;" };
  static const J2ObjcClassInfo _ADXMotionLayout_TransitionState = { "TransitionState", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x4018, 2, 4, 6, -1, -1, 7, -1 };
  return &_ADXMotionLayout_TransitionState;
}

+ (void)initialize {
  if (self == [ADXMotionLayout_TransitionState class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (int32_t i = 0; i < 4; i++) {
      ((void)(ADXMotionLayout_TransitionState_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXMotionLayout_TransitionState_initWithNSString_withInt_(e, JreEnumConstantName(ADXMotionLayout_TransitionState_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXMotionLayout_TransitionState)
  }
}

@end

void ADXMotionLayout_TransitionState_initWithNSString_withInt_(ADXMotionLayout_TransitionState *self, NSString *__name, int32_t __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXMotionLayout_TransitionState_values() {
  ADXMotionLayout_TransitionState_initialize();
  return [IOSObjectArray arrayWithObjects:ADXMotionLayout_TransitionState_values_ count:4 type:ADXMotionLayout_TransitionState_class_()];
}

ADXMotionLayout_TransitionState *ADXMotionLayout_TransitionState_valueOfWithNSString_(NSString *name) {
  ADXMotionLayout_TransitionState_initialize();
  for (int i = 0; i < 4; i++) {
    ADXMotionLayout_TransitionState *e = ADXMotionLayout_TransitionState_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
}

ADXMotionLayout_TransitionState *ADXMotionLayout_TransitionState_fromOrdinal(ADXMotionLayout_TransitionState_ORDINAL ordinal) {
  ADXMotionLayout_TransitionState_initialize();
  if (ordinal < 0 || ordinal >= 4) {
    return nil;
  }
  return ADXMotionLayout_TransitionState_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionLayout_TransitionState)

@implementation ADXMotionLayout_MotionTracker

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 5, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(recycle);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(addMovementWithADMotionEvent:);
  methods[3].selector = @selector(computeCurrentVelocityWithInt:);
  methods[4].selector = @selector(computeCurrentVelocityWithInt:withFloat:);
  methods[5].selector = @selector(getXVelocity);
  methods[6].selector = @selector(getYVelocity);
  methods[7].selector = @selector(getXVelocityWithInt:);
  methods[8].selector = @selector(getYVelocityWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addMovement", "LADMotionEvent;", "computeCurrentVelocity", "I", "IF", "getXVelocity", "getYVelocity", "LADXMotionLayout;" };
  static const J2ObjcClassInfo _ADXMotionLayout_MotionTracker = { "MotionTracker", "androidx.constraintlayout.motion.widget", ptrTable, methods, NULL, 7, 0x60c, 9, 0, 7, -1, -1, -1, -1 };
  return &_ADXMotionLayout_MotionTracker;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXMotionLayout_MotionTracker)

@implementation ADXMotionLayout_StateCache

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)outer$ {
  ADXMotionLayout_StateCache_initWithADXMotionLayout_(self, outer$);
  return self;
}

- (void)apply {
  if (self->startState_ != ADXConstraintSet_UNSET || self->endState_ != ADXConstraintSet_UNSET) {
    if (self->startState_ == ADXConstraintSet_UNSET) {
      [this$0_ transitionToStateWithInt:endState_];
    }
    else if (self->endState_ == ADXConstraintSet_UNSET) {
      [this$0_ setStateWithInt:self->startState_ withInt:-1 withInt:-1];
    }
    else {
      [this$0_ setTransitionWithInt:startState_ withInt:endState_];
    }
    [this$0_ setStateWithADXMotionLayout_TransitionState:JreLoadEnum(ADXMotionLayout_TransitionState, SETUP)];
  }
  if (JavaLangFloat_isNaNWithFloat_(self->mVelocity_)) {
    if (JavaLangFloat_isNaNWithFloat_(self->mProgress_)) {
      return;
    }
    [this$0_ setProgressWithFloat:self->mProgress_];
    return;
  }
  [this$0_ setProgressWithFloat:self->mProgress_ withFloat:mVelocity_];
  self->mProgress_ = JavaLangFloat_NaN;
  self->mVelocity_ = JavaLangFloat_NaN;
  self->startState_ = ADXConstraintSet_UNSET;
  self->endState_ = ADXConstraintSet_UNSET;
}

- (ADBundle *)getTransitionState {
  ADBundle *bundle = create_ADBundle_init();
  [bundle putFloatWithNSString:KeyProgress_ withFloat:self->mProgress_];
  [bundle putFloatWithNSString:KeyVelocity_ withFloat:self->mVelocity_];
  [bundle putIntWithNSString:KeyStartState_ withInt:self->startState_];
  [bundle putIntWithNSString:KeyEndState_ withInt:self->endState_];
  return bundle;
}

- (void)setTransitionStateWithADBundle:(ADBundle *)bundle {
  self->mProgress_ = [((ADBundle *) nil_chk(bundle)) getFloatWithNSString:KeyProgress_];
  self->mVelocity_ = [bundle getFloatWithNSString:KeyVelocity_];
  self->startState_ = [bundle getIntWithNSString:KeyStartState_];
  self->endState_ = [bundle getIntWithNSString:KeyEndState_];
}

- (void)setProgressWithFloat:(float)progress {
  self->mProgress_ = progress;
}

- (void)setEndStateWithInt:(int32_t)endState {
  self->endState_ = endState;
}

- (void)setVelocityWithFloat:(float)mVelocity {
  self->mVelocity_ = mVelocity;
}

- (void)setStartStateWithInt:(int32_t)startState {
  self->startState_ = startState;
}

- (void)recordState {
  endState_ = this$0_->mEndState_;
  startState_ = this$0_->mBeginState_;
  mVelocity_ = [this$0_ getVelocity];
  mProgress_ = [this$0_ getProgress];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(KeyProgress_);
  RELEASE_(KeyVelocity_);
  RELEASE_(KeyStartState_);
  RELEASE_(KeyEndState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMotionLayout:);
  methods[1].selector = @selector(apply);
  methods[2].selector = @selector(getTransitionState);
  methods[3].selector = @selector(setTransitionStateWithADBundle:);
  methods[4].selector = @selector(setProgressWithFloat:);
  methods[5].selector = @selector(setEndStateWithInt:);
  methods[6].selector = @selector(setVelocityWithFloat:);
  methods[7].selector = @selector(setStartStateWithInt:);
  methods[8].selector = @selector(recordState);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mProgress_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVelocity_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "KeyProgress_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "KeyVelocity_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "KeyStartState_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "KeyEndState_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionLayout;", "setTransitionState", "LADBundle;", "setProgress", "F", "setEndState", "I", "setVelocity", "setStartState" };
  static const J2ObjcClassInfo _ADXMotionLayout_StateCache = { "StateCache", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x0, 9, 9, 0, -1, -1, -1, -1 };
  return &_ADXMotionLayout_StateCache;
}

@end

void ADXMotionLayout_StateCache_initWithADXMotionLayout_(ADXMotionLayout_StateCache *self, ADXMotionLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->mProgress_ = JavaLangFloat_NaN;
  self->mVelocity_ = JavaLangFloat_NaN;
  self->startState_ = ADXConstraintSet_UNSET;
  self->endState_ = ADXConstraintSet_UNSET;
  JreStrongAssign(&self->KeyProgress_, @"motion.progress");
  JreStrongAssign(&self->KeyVelocity_, @"motion.velocity");
  JreStrongAssign(&self->KeyStartState_, @"motion.StartState");
  JreStrongAssign(&self->KeyEndState_, @"motion.EndState");
}

ADXMotionLayout_StateCache *new_ADXMotionLayout_StateCache_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXMotionLayout_StateCache, initWithADXMotionLayout_, outer$)
}

ADXMotionLayout_StateCache *create_ADXMotionLayout_StateCache_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXMotionLayout_StateCache, initWithADXMotionLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionLayout_StateCache)

@implementation ADXMotionLayout_DecelerateInterpolator

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)outer$ {
  ADXMotionLayout_DecelerateInterpolator_initWithADXMotionLayout_(self, outer$);
  return self;
}

- (void)configWithFloat:(float)velocity
              withFloat:(float)position
              withFloat:(float)maxAcceleration {
  initalV_ = velocity;
  currentP_ = position;
  maxA_ = maxAcceleration;
}

- (float)getInterpolationWithFloat:(float)time {
  if (initalV_ > 0) {
    if (initalV_ / maxA_ < time) {
      time = initalV_ / maxA_;
    }
    this$0_->mLastVelocity_ = initalV_ - maxA_ * time;
    float pos = initalV_ * time - (maxA_ * time * time) / 2;
    return pos + currentP_;
  }
  else {
    if (-initalV_ / maxA_ < time) {
      time = -initalV_ / maxA_;
    }
    this$0_->mLastVelocity_ = initalV_ + maxA_ * time;
    float pos = initalV_ * time + (maxA_ * time * time) / 2;
    return pos + currentP_;
  }
}

- (float)getVelocity {
  return this$0_->mLastVelocity_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMotionLayout:);
  methods[1].selector = @selector(configWithFloat:withFloat:withFloat:);
  methods[2].selector = @selector(getInterpolationWithFloat:);
  methods[3].selector = @selector(getVelocity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "initalV_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentP_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxA_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionLayout;", "config", "FFF", "getInterpolation", "F" };
  static const J2ObjcClassInfo _ADXMotionLayout_DecelerateInterpolator = { "DecelerateInterpolator", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x0, 4, 4, 0, -1, -1, -1, -1 };
  return &_ADXMotionLayout_DecelerateInterpolator;
}

@end

void ADXMotionLayout_DecelerateInterpolator_initWithADXMotionLayout_(ADXMotionLayout_DecelerateInterpolator *self, ADXMotionLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  ADXMotionInterpolator_init(self);
  self->initalV_ = 0;
  self->currentP_ = 0;
}

ADXMotionLayout_DecelerateInterpolator *new_ADXMotionLayout_DecelerateInterpolator_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXMotionLayout_DecelerateInterpolator, initWithADXMotionLayout_, outer$)
}

ADXMotionLayout_DecelerateInterpolator *create_ADXMotionLayout_DecelerateInterpolator_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXMotionLayout_DecelerateInterpolator, initWithADXMotionLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionLayout_DecelerateInterpolator)

@implementation ADXMotionLayout_Model

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)outer$ {
  ADXMotionLayout_Model_initWithADXMotionLayout_(self, outer$);
  return self;
}

- (void)copy__WithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)src
              withADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)dest {
  JavaUtilArrayList *children = JreRetainedLocalValue([((ADXConstraintWidgetContainer *) nil_chk(src)) getChildren]);
  JavaUtilHashMap *map = create_JavaUtilHashMap_init();
  [map putWithId:src withId:dest];
  [((JavaUtilArrayList *) nil_chk([((ADXConstraintWidgetContainer *) nil_chk(dest)) getChildren])) clear];
  [dest copy__WithADXConstraintWidget:src withJavaUtilHashMap:map];
  for (ADXConstraintWidget * __strong child_s in nil_chk(children)) {
    ADXConstraintWidget *child_d;
    if ([child_s isKindOfClass:[ADXCoreBarrier class]]) {
      child_d = create_ADXCoreBarrier_init();
    }
    else if ([child_s isKindOfClass:[ADXCoreGuideline class]]) {
      child_d = create_ADXCoreGuideline_init();
    }
    else if ([child_s isKindOfClass:[ADXCoreFlow class]]) {
      child_d = create_ADXCoreFlow_init();
    }
    else if ([ADXHelper_class_() isInstance:child_s]) {
      child_d = create_ADXHelperWidget_init();
    }
    else {
      child_d = create_ADXConstraintWidget_init();
    }
    [dest addWithADXConstraintWidget:child_d];
    [map putWithId:child_s withId:child_d];
  }
  for (ADXConstraintWidget * __strong child_s in children) {
    [((ADXConstraintWidget *) nil_chk([map getWithId:child_s])) copy__WithADXConstraintWidget:child_s withJavaUtilHashMap:map];
  }
}

- (void)initFromWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)baseLayout
                            withADXConstraintSet:(ADXConstraintSet *)start
                            withADXConstraintSet:(ADXConstraintSet *)end {
  JreStrongAssign(&mStart_, start);
  JreStrongAssign(&mEnd_, end);
  JreStrongAssignAndConsume(&mLayoutStart_, new_ADXConstraintWidgetContainer_init());
  JreStrongAssignAndConsume(&mLayoutEnd_, new_ADXConstraintWidgetContainer_init());
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) setMeasurerWithADXBasicMeasure_Measurer:[((ADXConstraintWidgetContainer *) nil_chk(this$0_->mLayoutWidget_)) getMeasurer]];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) setMeasurerWithADXBasicMeasure_Measurer:[((ADXConstraintWidgetContainer *) nil_chk(this$0_->mLayoutWidget_)) getMeasurer]];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) removeAllChildren];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) removeAllChildren];
  [self copy__WithADXConstraintWidgetContainer:this$0_->mLayoutWidget_ withADXConstraintWidgetContainer:mLayoutStart_];
  [self copy__WithADXConstraintWidgetContainer:this$0_->mLayoutWidget_ withADXConstraintWidgetContainer:mLayoutEnd_];
  if (this$0_->mTransitionLastPosition_ > 0.5) {
    if (start != nil) {
      ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(self, mLayoutStart_, start);
    }
    ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(self, mLayoutEnd_, end);
  }
  else {
    ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(self, mLayoutEnd_, end);
    if (start != nil) {
      ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(self, mLayoutStart_, start);
    }
  }
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) setRtlWithBoolean:[this$0_ isRtl]];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) updateHierarchy];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) setRtlWithBoolean:[this$0_ isRtl]];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) updateHierarchy];
  ADViewGroup_LayoutParams *layoutParams = JreRetainedLocalValue([this$0_ getLayoutParams]);
  if (layoutParams != nil) {
    if (layoutParams->width_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
      [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
    }
    if (layoutParams->height_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
      [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
    }
  }
}

- (void)setupConstraintWidgetWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)base
                                         withADXConstraintSet:(ADXConstraintSet *)cSet {
  ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(self, base, cSet);
}

- (ADXConstraintWidget *)getWidgetWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                                        withADView:(ADView *)view {
  if (JreObjectEqualsEquals([((ADXConstraintWidgetContainer *) nil_chk(container)) getCompanionWidget], view)) {
    return container;
  }
  JavaUtilArrayList *children = JreRetainedLocalValue([container getChildren]);
  int32_t count = [((JavaUtilArrayList *) nil_chk(children)) size];
  for (int32_t i = 0; i < count; i++) {
    ADXConstraintWidget *widget = JreRetainedLocalValue([children getWithInt:i]);
    if (JreObjectEqualsEquals([((ADXConstraintWidget *) nil_chk(widget)) getCompanionWidget], view)) {
      return widget;
    }
  }
  return nil;
}

- (void)debugLayoutParamWithNSString:(NSString *)str
withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)params {
  ADXMotionLayout_Model_debugLayoutParamWithNSString_withADXConstraintLayout_LayoutParams_(self, str, params);
}

- (void)debugWidgetWithNSString:(NSString *)str
        withADXConstraintWidget:(ADXConstraintWidget *)child {
  ADXMotionLayout_Model_debugWidgetWithNSString_withADXConstraintWidget_(self, str, child);
}

- (void)debugLayoutWithNSString:(NSString *)title
withADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)c {
  ADXMotionLayout_Model_debugLayoutWithNSString_withADXConstraintWidgetContainer_(self, title, c);
}

- (void)reEvaluateState {
  [self measureWithInt:this$0_->mLastWidthMeasureSpec_ withInt:this$0_->mLastHeightMeasureSpec_];
  ADXMotionLayout_setupMotionViews(this$0_);
}

- (void)measureWithInt:(int32_t)widthMeasureSpec
               withInt:(int32_t)heightMeasureSpec {
  int32_t widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  int32_t heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  this$0_->mWidthMeasureMode_ = widthMode;
  this$0_->mHeightMeasureMode_ = heightMode;
  int32_t optimisationLevel = [this$0_ getOptimizationLevel];
  if (this$0_->mCurrentState_ == [this$0_ getStartState]) {
    [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutEnd_ withInt:optimisationLevel withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
    if (mStart_ != nil) {
      [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutStart_ withInt:optimisationLevel withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
    }
  }
  else {
    if (mStart_ != nil) {
      [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutStart_ withInt:optimisationLevel withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
    }
    [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutEnd_ withInt:optimisationLevel withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
  }
  bool recompute_start_end_size = true;
  if ([[this$0_ getParent] isKindOfClass:[ADXMotionLayout class]] && widthMode == ADView_MeasureSpec_EXACTLY && heightMode == ADView_MeasureSpec_EXACTLY) {
    recompute_start_end_size = false;
  }
  if (recompute_start_end_size) {
    this$0_->mWidthMeasureMode_ = widthMode;
    this$0_->mHeightMeasureMode_ = heightMode;
    if (this$0_->mCurrentState_ == [this$0_ getStartState]) {
      [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutEnd_ withInt:optimisationLevel withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
      if (mStart_ != nil) {
        [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutStart_ withInt:optimisationLevel withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
      }
    }
    else {
      if (mStart_ != nil) {
        [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutStart_ withInt:optimisationLevel withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mStart_ == nil || mStart_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
      }
      [this$0_ resolveSystemWithADXConstraintWidgetContainer:mLayoutEnd_ withInt:optimisationLevel withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? widthMeasureSpec : heightMeasureSpec withInt:(mEnd_ == nil || mEnd_->mRotate_ == 0) ? heightMeasureSpec : widthMeasureSpec];
    }
    this$0_->mStartWrapWidth_ = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) getWidth];
    this$0_->mStartWrapHeight_ = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) getHeight];
    this$0_->mEndWrapWidth_ = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) getWidth];
    this$0_->mEndWrapHeight_ = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) getHeight];
    this$0_->mMeasureDuringTransition_ = ((this$0_->mStartWrapWidth_ != this$0_->mEndWrapWidth_) || (this$0_->mStartWrapHeight_ != this$0_->mEndWrapHeight_));
  }
  int32_t width = this$0_->mStartWrapWidth_;
  int32_t height = this$0_->mStartWrapHeight_;
  if (this$0_->mWidthMeasureMode_ == ADView_MeasureSpec_AT_MOST || this$0_->mWidthMeasureMode_ == ADView_MeasureSpec_UNSPECIFIED) {
    width = JreFpToInt((this$0_->mStartWrapWidth_ + this$0_->mPostInterpolationPosition_ * (this$0_->mEndWrapWidth_ - this$0_->mStartWrapWidth_)));
  }
  if (this$0_->mHeightMeasureMode_ == ADView_MeasureSpec_AT_MOST || this$0_->mHeightMeasureMode_ == ADView_MeasureSpec_UNSPECIFIED) {
    height = JreFpToInt((this$0_->mStartWrapHeight_ + this$0_->mPostInterpolationPosition_ * (this$0_->mEndWrapHeight_ - this$0_->mStartWrapHeight_)));
  }
  bool isWidthMeasuredTooSmall = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) isWidthMeasuredTooSmall] || [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) isWidthMeasuredTooSmall];
  bool isHeightMeasuredTooSmall = [((ADXConstraintWidgetContainer *) nil_chk(mLayoutStart_)) isHeightMeasuredTooSmall] || [((ADXConstraintWidgetContainer *) nil_chk(mLayoutEnd_)) isHeightMeasuredTooSmall];
  [this$0_ resolveMeasuredDimensionWithInt:widthMeasureSpec withInt:heightMeasureSpec withInt:width withInt:height withBoolean:isWidthMeasuredTooSmall withBoolean:isHeightMeasuredTooSmall];
}

- (void)build {
  int32_t n = [this$0_ getChildCount];
  [((JavaUtilHashMap *) nil_chk(this$0_->mFrameArrayList_)) clear];
  ADSparseArray *controllers = create_ADSparseArray_init();
  IOSIntArray *ids = [IOSIntArray arrayWithLength:n];
  for (int32_t i = 0; i < n; i++) {
    ADView *v = JreRetainedLocalValue([this$0_ getChildAtWithInt:i]);
    ADXMotionController *motionController = create_ADXMotionController_initWithADView_(v);
    [controllers putWithInt:*IOSIntArray_GetRef(ids, i) = [((ADView *) nil_chk(v)) getId] withId:motionController];
    [((JavaUtilHashMap *) nil_chk(this$0_->mFrameArrayList_)) putWithId:v withId:motionController];
  }
  for (int32_t i = 0; i < n; i++) {
    ADView *v = JreRetainedLocalValue([this$0_ getChildAtWithInt:i]);
    ADXMotionController *motionController = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(this$0_->mFrameArrayList_)) getWithId:v]);
    if (motionController == nil) {
      continue;
    }
    if (mStart_ != nil) {
      ADXConstraintWidget *startWidget = JreRetainedLocalValue([self getWidgetWithADXConstraintWidgetContainer:mLayoutStart_ withADView:v]);
      if (startWidget != nil) {
        [motionController setStartStateWithADRect:ADXMotionLayout_toRectWithADXConstraintWidget_(this$0_, startWidget) withADXConstraintSet:mStart_ withInt:[this$0_ getWidth] withInt:[this$0_ getHeight]];
      }
      else {
        if (this$0_->mDebugPath_ != 0) {
          ADLog_eWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$$$$C", ADXCLDebug_getLocation(), @"no widget for  ", ADXCLDebug_getNameWithADView_(v), @" (", [[((ADView *) nil_chk(v)) java_getClass] getName], ')'));
        }
      }
    }
    else {
      if (this$0_->mInRotation_) {
        [motionController setStartStateWithADXViewState:[((JavaUtilHashMap *) nil_chk(this$0_->mPreRotate_)) getWithId:v] withADView:v withInt:this$0_->mRotatMode_ withInt:this$0_->mPreRotateWidth_ withInt:this$0_->mPreRotateHeight_];
      }
    }
    if (mEnd_ != nil) {
      ADXConstraintWidget *endWidget = JreRetainedLocalValue([self getWidgetWithADXConstraintWidgetContainer:mLayoutEnd_ withADView:v]);
      if (endWidget != nil) {
        [motionController setEndStateWithADRect:ADXMotionLayout_toRectWithADXConstraintWidget_(this$0_, endWidget) withADXConstraintSet:mEnd_ withInt:[this$0_ getWidth] withInt:[this$0_ getHeight]];
      }
      else {
        if (this$0_->mDebugPath_ != 0) {
          ADLog_eWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$$$$C", ADXCLDebug_getLocation(), @"no widget for  ", ADXCLDebug_getNameWithADView_(v), @" (", [[((ADView *) nil_chk(v)) java_getClass] getName], ')'));
        }
      }
    }
  }
  for (int32_t i = 0; i < n; i++) {
    ADXMotionController *controller = JreRetainedLocalValue([controllers getWithInt:IOSIntArray_Get(ids, i)]);
    int32_t relativeToId = [((ADXMotionController *) nil_chk(controller)) getAnimateRelativeTo];
    if (relativeToId != ADXConstraintSet_UNSET) {
      [controller setupRelativeWithADXMotionController:[controllers getWithInt:relativeToId]];
    }
  }
}

- (void)setMeasuredIdWithInt:(int32_t)startId
                     withInt:(int32_t)endId {
  mStartId_ = startId;
  mEndId_ = endId;
}

- (bool)isNotConfiguredWithWithInt:(int32_t)startId
                           withInt:(int32_t)endId {
  return startId != mStartId_ || endId != mEndId_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mLayoutStart_);
  RELEASE_(mLayoutEnd_);
  RELEASE_(mStart_);
  RELEASE_(mEnd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMotionLayout:);
  methods[1].selector = @selector(copy__WithADXConstraintWidgetContainer:withADXConstraintWidgetContainer:);
  methods[2].selector = @selector(initFromWithADXConstraintWidgetContainer:withADXConstraintSet:withADXConstraintSet:);
  methods[3].selector = @selector(setupConstraintWidgetWithADXConstraintWidgetContainer:withADXConstraintSet:);
  methods[4].selector = @selector(getWidgetWithADXConstraintWidgetContainer:withADView:);
  methods[5].selector = @selector(debugLayoutParamWithNSString:withADXConstraintLayout_LayoutParams:);
  methods[6].selector = @selector(debugWidgetWithNSString:withADXConstraintWidget:);
  methods[7].selector = @selector(debugLayoutWithNSString:withADXConstraintWidgetContainer:);
  methods[8].selector = @selector(reEvaluateState);
  methods[9].selector = @selector(measureWithInt:withInt:);
  methods[10].selector = @selector(build);
  methods[11].selector = @selector(setMeasuredIdWithInt:withInt:);
  methods[12].selector = @selector(isNotConfiguredWithWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mLayoutStart_", "LADXConstraintWidgetContainer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutEnd_", "LADXConstraintWidgetContainer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mStart_", "LADXConstraintSet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEnd_", "LADXConstraintSet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mStartId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEndId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionLayout;", "copy", "LADXConstraintWidgetContainer;LADXConstraintWidgetContainer;", "initFrom", "LADXConstraintWidgetContainer;LADXConstraintSet;LADXConstraintSet;", "setupConstraintWidget", "LADXConstraintWidgetContainer;LADXConstraintSet;", "getWidget", "LADXConstraintWidgetContainer;LADView;", "debugLayoutParam", "LNSString;LADXConstraintLayout_LayoutParams;", "debugWidget", "LNSString;LADXConstraintWidget;", "debugLayout", "LNSString;LADXConstraintWidgetContainer;", "measure", "II", "setMeasuredId", "isNotConfiguredWith" };
  static const J2ObjcClassInfo _ADXMotionLayout_Model = { "Model", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x0, 13, 7, 0, -1, -1, -1, -1 };
  return &_ADXMotionLayout_Model;
}

@end

void ADXMotionLayout_Model_initWithADXMotionLayout_(ADXMotionLayout_Model *self, ADXMotionLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mLayoutStart_, new_ADXConstraintWidgetContainer_init());
  JreStrongAssignAndConsume(&self->mLayoutEnd_, new_ADXConstraintWidgetContainer_init());
  JreStrongAssign(&self->mStart_, nil);
  JreStrongAssign(&self->mEnd_, nil);
}

ADXMotionLayout_Model *new_ADXMotionLayout_Model_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXMotionLayout_Model, initWithADXMotionLayout_, outer$)
}

ADXMotionLayout_Model *create_ADXMotionLayout_Model_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXMotionLayout_Model, initWithADXMotionLayout_, outer$)
}

void ADXMotionLayout_Model_setupConstraintWidgetWithADXConstraintWidgetContainer_withADXConstraintSet_(ADXMotionLayout_Model *self, ADXConstraintWidgetContainer *base, ADXConstraintSet *cSet) {
  ADSparseArray *mapIdToWidget = create_ADSparseArray_init();
  ADXConstraints_LayoutParams *layoutParams = create_ADXConstraints_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  [mapIdToWidget clear];
  [mapIdToWidget putWithInt:ADXConstraintLayout_LayoutParams_PARENT_ID withId:base];
  [mapIdToWidget putWithInt:[self->this$0_ getId] withId:base];
  if (cSet != nil && cSet->mRotate_ != 0) {
    [self->this$0_ resolveSystemWithADXConstraintWidgetContainer:self->mLayoutEnd_ withInt:[self->this$0_ getOptimizationLevel] withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self->this$0_ getHeight], ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self->this$0_ getWidth], ADView_MeasureSpec_EXACTLY)];
  }
  for (ADXConstraintWidget * __strong child in nil_chk([((ADXConstraintWidgetContainer *) nil_chk(base)) getChildren])) {
    ADView *view = (ADView *) cast_chk([((ADXConstraintWidget *) nil_chk(child)) getCompanionWidget], [ADView class]);
    [mapIdToWidget putWithInt:[((ADView *) nil_chk(view)) getId] withId:child];
  }
  for (ADXConstraintWidget * __strong child in nil_chk([base getChildren])) {
    ADView *view = (ADView *) cast_chk([((ADXConstraintWidget *) nil_chk(child)) getCompanionWidget], [ADView class]);
    [((ADXConstraintSet *) nil_chk(cSet)) applyToLayoutParamsWithInt:[((ADView *) nil_chk(view)) getId] withADXConstraintLayout_LayoutParams:layoutParams];
    [child setWidthWithInt:[cSet getWidthWithInt:[view getId]]];
    [child setHeightWithInt:[cSet getHeightWithInt:[view getId]]];
    if ([view isKindOfClass:[ADXConstraintHelper class]]) {
      [cSet applyToHelperWithADXConstraintHelper:(ADXConstraintHelper *) view withADXConstraintWidget:child withADXConstraintLayout_LayoutParams:layoutParams withADSparseArray:mapIdToWidget];
      if ([view isKindOfClass:[ADXBarrier class]]) {
        [((ADXBarrier *) view) validateParams];
      }
    }
    {
      [layoutParams resolveLayoutDirectionWithInt:[self->this$0_ getLayoutDirection]];
    }
    [self->this$0_ applyConstraintsFromLayoutParamsWithBoolean:false withADView:view withADXConstraintWidget:child withADXConstraintLayout_LayoutParams:layoutParams withADSparseArray:mapIdToWidget];
    if ([cSet getVisibilityModeWithInt:[view getId]] == ADXConstraintSet_VISIBILITY_MODE_IGNORE) {
      [child setVisibilityWithInt:[view getVisibility]];
    }
    else {
      [child setVisibilityWithInt:[cSet getVisibilityWithInt:[view getId]]];
    }
  }
  for (ADXConstraintWidget * __strong child in nil_chk([base getChildren])) {
    if ([child isKindOfClass:[ADXCoreVirtualLayout class]]) {
      ADXConstraintHelper *view = (ADXConstraintHelper *) cast_chk([((ADXConstraintWidget *) nil_chk(child)) getCompanionWidget], [ADXConstraintHelper class]);
      id<ADXHelper> helper = (id<ADXHelper>) cast_check(child, ADXHelper_class_());
      [((ADXConstraintHelper *) nil_chk(view)) updatePreLayoutWithADXConstraintWidgetContainer:base withADXHelper:helper withADSparseArray:mapIdToWidget];
      ADXCoreVirtualLayout *virtualLayout = (ADXCoreVirtualLayout *) cast_chk(helper, [ADXCoreVirtualLayout class]);
      [virtualLayout captureWidgets];
    }
  }
}

void ADXMotionLayout_Model_debugLayoutParamWithNSString_withADXConstraintLayout_LayoutParams_(ADXMotionLayout_Model *self, NSString *str, ADXConstraintLayout_LayoutParams *params) {
  NSString *a = @" ";
  JreStrAppend(&a, "$", ((ADXConstraintLayout_LayoutParams *) nil_chk(params))->startToStart_ != ADXConstraintSet_UNSET ? @"SS" : @"__");
  JreStrAppend(&a, "$", params->startToEnd_ != ADXConstraintSet_UNSET ? @"|SE" : @"|__");
  JreStrAppend(&a, "$", params->endToStart_ != ADXConstraintSet_UNSET ? @"|ES" : @"|__");
  JreStrAppend(&a, "$", params->endToEnd_ != ADXConstraintSet_UNSET ? @"|EE" : @"|__");
  JreStrAppend(&a, "$", params->leftToLeft_ != ADXConstraintSet_UNSET ? @"|LL" : @"|__");
  JreStrAppend(&a, "$", params->leftToRight_ != ADXConstraintSet_UNSET ? @"|LR" : @"|__");
  JreStrAppend(&a, "$", params->rightToLeft_ != ADXConstraintSet_UNSET ? @"|RL" : @"|__");
  JreStrAppend(&a, "$", params->rightToRight_ != ADXConstraintSet_UNSET ? @"|RR" : @"|__");
  JreStrAppend(&a, "$", params->topToTop_ != ADXConstraintSet_UNSET ? @"|TT" : @"|__");
  JreStrAppend(&a, "$", params->topToBottom_ != ADXConstraintSet_UNSET ? @"|TB" : @"|__");
  JreStrAppend(&a, "$", params->bottomToTop_ != ADXConstraintSet_UNSET ? @"|BT" : @"|__");
  JreStrAppend(&a, "$", params->bottomToBottom_ != ADXConstraintSet_UNSET ? @"|BB" : @"|__");
  ADLog_vWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$", str, a));
}

void ADXMotionLayout_Model_debugWidgetWithNSString_withADXConstraintWidget_(ADXMotionLayout_Model *self, NSString *str, ADXConstraintWidget *child) {
  NSString *a = @" ";
  JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(child))->mTop_))->mTarget_ != nil ? (JreStrcat("C$", 'T', (child->mTop_->mTarget_->mType_ == JreLoadEnum(ADXConstraintAnchor_Type, TOP) ? @"T" : @"B"))) : @"__");
  JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(child->mBottom_))->mTarget_ != nil ? (JreStrcat("C$", 'B', (child->mBottom_->mTarget_->mType_ == JreLoadEnum(ADXConstraintAnchor_Type, TOP) ? @"T" : @"B"))) : @"__");
  JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(child->mLeft_))->mTarget_ != nil ? (JreStrcat("C$", 'L', (child->mLeft_->mTarget_->mType_ == JreLoadEnum(ADXConstraintAnchor_Type, LEFT) ? @"L" : @"R"))) : @"__");
  JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(child->mRight_))->mTarget_ != nil ? (JreStrcat("C$", 'R', (child->mRight_->mTarget_->mType_ == JreLoadEnum(ADXConstraintAnchor_Type, LEFT) ? @"L" : @"R"))) : @"__");
  ADLog_vWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$$@", str, a, @" ---  ", child));
}

void ADXMotionLayout_Model_debugLayoutWithNSString_withADXConstraintWidgetContainer_(ADXMotionLayout_Model *self, NSString *title, ADXConstraintWidgetContainer *c) {
  ADView *v = (ADView *) cast_chk([((ADXConstraintWidgetContainer *) nil_chk(c)) getCompanionWidget], [ADView class]);
  NSString *cName = JreStrcat("$C$", title, ' ', ADXCLDebug_getNameWithADView_(v));
  ADLog_vWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$@", cName, @"  ========= ", c));
  int32_t count = [((JavaUtilArrayList *) nil_chk([c getChildren])) size];
  for (int32_t i = 0; i < count; i++) {
    NSString *str = JreStrcat("$CI$", cName, '[', i, @"] ");
    ADXConstraintWidget *child = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk([c getChildren])) getWithInt:i]);
    NSString *a = @"";
    JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(child))->mTop_))->mTarget_ != nil ? @"T" : @"_");
    JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(child->mBottom_))->mTarget_ != nil ? @"B" : @"_");
    JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(child->mLeft_))->mTarget_ != nil ? @"L" : @"_");
    JreStrAppend(&a, "$", ((ADXConstraintAnchor *) nil_chk(child->mRight_))->mTarget_ != nil ? @"R" : @"_");
    v = (ADView *) cast_chk([child getCompanionWidget], [ADView class]);
    NSString *name = ADXCLDebug_getNameWithADView_(v);
    if ([v isKindOfClass:[ADTextView class]]) {
      JreStrAppend(&name, "C$C", '(', [((ADTextView *) nil_chk(((ADTextView *) v))) getText], ')');
    }
    ADLog_vWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$$C@C$", str, @"  ", name, ' ', child, ' ', a));
  }
  ADLog_vWithNSString_withNSString_(ADXMotionLayout_TAG, JreStrcat("$$", cName, @" done. "));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionLayout_Model)

@implementation ADXMotionLayout_TransitionListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onTransitionStartedWithADXMotionLayout:withInt:withInt:);
  methods[1].selector = @selector(onTransitionChangeWithADXMotionLayout:withInt:withInt:withFloat:);
  methods[2].selector = @selector(onTransitionCompletedWithADXMotionLayout:withInt:);
  methods[3].selector = @selector(onTransitionTriggerWithADXMotionLayout:withInt:withBoolean:withFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onTransitionStarted", "LADXMotionLayout;II", "onTransitionChange", "LADXMotionLayout;IIF", "onTransitionCompleted", "LADXMotionLayout;I", "onTransitionTrigger", "LADXMotionLayout;IZF", "LADXMotionLayout;" };
  static const J2ObjcClassInfo _ADXMotionLayout_TransitionListener = { "TransitionListener", "androidx.constraintlayout.motion.widget", ptrTable, methods, NULL, 7, 0x609, 4, 0, 8, -1, -1, -1, -1 };
  return &_ADXMotionLayout_TransitionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXMotionLayout_TransitionListener)

@implementation ADXMotionLayout_1

- (instancetype)initWithADXMotionLayout:(ADXMotionLayout *)outer$ {
  ADXMotionLayout_1_initWithADXMotionLayout_(self, outer$);
  return self;
}

- (void)run {
  [((ADXMotionLayout_StateCache *) nil_chk(this$0_->mStateCache_)) apply];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMotionLayout:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionLayout;", "postInit" };
  static const J2ObjcClassInfo _ADXMotionLayout_1 = { "", "androidx.constraintlayout.motion.widget", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, 1, -1, -1 };
  return &_ADXMotionLayout_1;
}

@end

void ADXMotionLayout_1_initWithADXMotionLayout_(ADXMotionLayout_1 *self, ADXMotionLayout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXMotionLayout_1 *new_ADXMotionLayout_1_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXMotionLayout_1, initWithADXMotionLayout_, outer$)
}

ADXMotionLayout_1 *create_ADXMotionLayout_1_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXMotionLayout_1, initWithADXMotionLayout_, outer$)
}

@implementation ADXMotionLayout_MyTracker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionLayout_MyTracker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)recycle {
}

- (void)clear {
}

- (void)addMovementWithADMotionEvent:(ADMotionEvent *)event {
}

- (void)computeCurrentVelocityWithInt:(int32_t)units {
}

- (void)computeCurrentVelocityWithInt:(int32_t)units
                            withFloat:(float)maxVelocity {
}

- (float)getXVelocity {
  return 0;
}

- (float)getYVelocity {
  return 0;
}

- (float)getXVelocityWithInt:(int32_t)id_ {
  return 0;
}

- (float)getYVelocityWithInt:(int32_t)id_ {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(recycle);
  methods[2].selector = @selector(clear);
  methods[3].selector = @selector(addMovementWithADMotionEvent:);
  methods[4].selector = @selector(computeCurrentVelocityWithInt:);
  methods[5].selector = @selector(computeCurrentVelocityWithInt:withFloat:);
  methods[6].selector = @selector(getXVelocity);
  methods[7].selector = @selector(getYVelocity);
  methods[8].selector = @selector(getXVelocityWithInt:);
  methods[9].selector = @selector(getYVelocityWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addMovement", "LADMotionEvent;", "computeCurrentVelocity", "I", "IF", "getXVelocity", "getYVelocity", "LADXMotionLayout;" };
  static const J2ObjcClassInfo _ADXMotionLayout_MyTracker = { "MyTracker", "androidx.constraintlayout.motion.widget", ptrTable, methods, NULL, 7, 0x19, 10, 0, 7, -1, -1, -1, -1 };
  return &_ADXMotionLayout_MyTracker;
}

@end

void ADXMotionLayout_MyTracker_init(ADXMotionLayout_MyTracker *self) {
  NSObject_init(self);
}

ADXMotionLayout_MyTracker *new_ADXMotionLayout_MyTracker_init() {
  J2OBJC_NEW_IMPL(ADXMotionLayout_MyTracker, init)
}

ADXMotionLayout_MyTracker *create_ADXMotionLayout_MyTracker_init() {
  J2OBJC_CREATE_IMPL(ADXMotionLayout_MyTracker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionLayout_MyTracker)

@implementation ADXMotionLayout_$Lambda$1

- (void)run {
  ADXMotionLayout_run(target$_);
}

- (void)dealloc {
  RELEASE_(target$_);
  [super dealloc];
}

@end

void ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(ADXMotionLayout_$Lambda$1 *self, ADXMotionLayout *outer$) {
  JreStrongAssign(&self->target$_, outer$);
  NSObject_init(self);
}

ADXMotionLayout_$Lambda$1 *new_ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXMotionLayout_$Lambda$1, initWithADXMotionLayout_, outer$)
}

ADXMotionLayout_$Lambda$1 *create_ADXMotionLayout_$Lambda$1_initWithADXMotionLayout_(ADXMotionLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXMotionLayout_$Lambda$1, initWithADXMotionLayout_, outer$)
}
