//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\LinearCurveFit.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "CurveFit.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearCurveFit.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXLinearCurveFit () {
 @public
  IOSDoubleArray *mT_;
  IOSObjectArray *mY_;
  double mTotalLength_;
  bool mExtrapolate_;
}

/*!
 @brief Calculate the length traveled by the first two parameters assuming they are x and y.
 (Added for future work)
 @param t the point to calculate the length to
 */
- (double)getLength2DWithDouble:(double)t;

@end

J2OBJC_FIELD_SETTER(ADXLinearCurveFit, mT_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(ADXLinearCurveFit, mY_, IOSObjectArray *)

inline NSString *ADXLinearCurveFit_get_TAG(void);
static NSString *ADXLinearCurveFit_TAG = @"LinearCurveFit";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXLinearCurveFit, TAG, NSString *)

__attribute__((unused)) static double ADXLinearCurveFit_getLength2DWithDouble_(ADXLinearCurveFit *self, double t);

@implementation ADXLinearCurveFit

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)time
                   withDoubleArray2:(IOSObjectArray *)y {
  ADXLinearCurveFit_initWithDoubleArray_withDoubleArray2_(self, time, y);
  return self;
}

- (double)getLength2DWithDouble:(double)t {
  return ADXLinearCurveFit_getLength2DWithDouble_(self, t);
}

- (void)getPosWithDouble:(double)t
         withDoubleArray:(IOSDoubleArray *)v {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)))->size_;
  if (mExtrapolate_) {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, 0) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), 0)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j);
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, n - 1) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), n - 1)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j);
      }
      return;
    }
  }
  else {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, 0)), j);
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, n - 1)), j);
      }
      return;
    }
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t == IOSDoubleArray_Get(mT_, i)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSDoubleArray_GetRef(nil_chk(v), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
      }
    }
    if (t < IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      for (int32_t j = 0; j < dim; j++) {
        double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
        double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
        *IOSDoubleArray_GetRef(nil_chk(v), j) = y1 * (1 - x) + y2 * x;
      }
      return;
    }
  }
}

- (void)getPosWithDouble:(double)t
          withFloatArray:(IOSFloatArray *)v {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)))->size_;
  if (mExtrapolate_) {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, 0) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), 0)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j));
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, n - 1) withDoubleArray:mSlopeTemp_];
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j) + (t - IOSDoubleArray_Get(nil_chk(mT_), n - 1)) * IOSDoubleArray_Get(nil_chk(mSlopeTemp_), j));
      }
      return;
    }
  }
  else {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, 0)), j);
      }
      return;
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, n - 1)), j);
      }
      return;
    }
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t == IOSDoubleArray_Get(mT_, i)) {
      for (int32_t j = 0; j < dim; j++) {
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
      }
    }
    if (t < IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      for (int32_t j = 0; j < dim; j++) {
        double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
        double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
        *IOSFloatArray_GetRef(nil_chk(v), j) = (float) (y1 * (1 - x) + y2 * x);
      }
      return;
    }
  }
}

- (double)getPosWithDouble:(double)t
                   withInt:(int32_t)j {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  if (mExtrapolate_) {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j) + (t - IOSDoubleArray_Get(mT_, 0)) * [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, 0) withInt:j];
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j) + (t - IOSDoubleArray_Get(mT_, n - 1)) * [self getSlopeWithDouble:IOSDoubleArray_Get(mT_, n - 1) withInt:j];
    }
  }
  else {
    if (t <= IOSDoubleArray_Get(mT_, 0)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)), j);
    }
    if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), n - 1)), j);
    }
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t == IOSDoubleArray_Get(mT_, i)) {
      return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
    }
    if (t < IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
      double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
      return (y1 * (1 - x) + y2 * x);
    }
  }
  return 0;
}

- (void)getSlopeWithDouble:(double)t
           withDoubleArray:(IOSDoubleArray *)v {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mY_), 0)))->size_;
  if (t <= IOSDoubleArray_Get(mT_, 0)) {
    t = IOSDoubleArray_Get(mT_, 0);
  }
  else if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
    t = IOSDoubleArray_Get(mT_, n - 1);
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t <= IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      for (int32_t j = 0; j < dim; j++) {
        double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i)), j);
        double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
        *IOSDoubleArray_GetRef(nil_chk(v), j) = (y2 - y1) / h;
      }
      break;
    }
  }
  return;
}

- (double)getSlopeWithDouble:(double)t
                     withInt:(int32_t)j {
  int32_t n = ((IOSDoubleArray *) nil_chk(mT_))->size_;
  if (t < IOSDoubleArray_Get(mT_, 0)) {
    t = IOSDoubleArray_Get(mT_, 0);
  }
  else if (t >= IOSDoubleArray_Get(mT_, n - 1)) {
    t = IOSDoubleArray_Get(mT_, n - 1);
  }
  for (int32_t i = 0; i < n - 1; i++) {
    if (t <= IOSDoubleArray_Get(mT_, i + 1)) {
      double h = IOSDoubleArray_Get(mT_, i + 1) - IOSDoubleArray_Get(mT_, i);
      double x = (t - IOSDoubleArray_Get(mT_, i)) / h;
      double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mY_), i)), j);
      double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(mY_, i + 1)), j);
      return (y2 - y1) / h;
    }
  }
  return 0;
}

- (IOSDoubleArray *)getTimePoints {
  return mT_;
}

- (void)dealloc {
  RELEASE_(mT_);
  RELEASE_(mY_);
  RELEASE_(mSlopeTemp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 3, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDoubleArray:withDoubleArray2:);
  methods[1].selector = @selector(getLength2DWithDouble:);
  methods[2].selector = @selector(getPosWithDouble:withDoubleArray:);
  methods[3].selector = @selector(getPosWithDouble:withFloatArray:);
  methods[4].selector = @selector(getPosWithDouble:withInt:);
  methods[5].selector = @selector(getSlopeWithDouble:withDoubleArray:);
  methods[6].selector = @selector(getSlopeWithDouble:withInt:);
  methods[7].selector = @selector(getTimePoints);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "mT_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mY_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTotalLength_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mExtrapolate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSlopeTemp_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[D[[D", "getLength2D", "D", "getPos", "D[D", "D[F", "DI", "getSlope", &ADXLinearCurveFit_TAG };
  static const J2ObjcClassInfo _ADXLinearCurveFit = { "LinearCurveFit", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 8, 6, -1, -1, -1, -1, -1 };
  return &_ADXLinearCurveFit;
}

@end

void ADXLinearCurveFit_initWithDoubleArray_withDoubleArray2_(ADXLinearCurveFit *self, IOSDoubleArray *time, IOSObjectArray *y) {
  ADXCurveFit_init(self);
  self->mTotalLength_ = JavaLangDouble_NaN;
  self->mExtrapolate_ = true;
  int32_t N = ((IOSDoubleArray *) nil_chk(time))->size_;
  int32_t dim = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(y), 0)))->size_;
  JreStrongAssignAndConsume(&self->mSlopeTemp_, [IOSDoubleArray newArrayWithLength:dim]);
  JreStrongAssign(&self->mT_, time);
  JreStrongAssign(&self->mY_, y);
  if (dim > 2) {
    double sum = 0;
    double lastx = 0;
    double lasty = 0;
    for (int32_t i = 0; i < time->size_; i++) {
      double px = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i)), 0);
      double py = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i)), 0);
      if (i > 0) {
        JrePlusAssignDoubleD(&sum, JavaLangMath_hypotWithDouble_withDouble_(px - lastx, py - lasty));
      }
      lastx = px;
      lasty = py;
    }
    self->mTotalLength_ = 0;
  }
}

ADXLinearCurveFit *new_ADXLinearCurveFit_initWithDoubleArray_withDoubleArray2_(IOSDoubleArray *time, IOSObjectArray *y) {
  J2OBJC_NEW_IMPL(ADXLinearCurveFit, initWithDoubleArray_withDoubleArray2_, time, y)
}

ADXLinearCurveFit *create_ADXLinearCurveFit_initWithDoubleArray_withDoubleArray2_(IOSDoubleArray *time, IOSObjectArray *y) {
  J2OBJC_CREATE_IMPL(ADXLinearCurveFit, initWithDoubleArray_withDoubleArray2_, time, y)
}

double ADXLinearCurveFit_getLength2DWithDouble_(ADXLinearCurveFit *self, double t) {
  if (JavaLangDouble_isNaNWithDouble_(self->mTotalLength_)) {
    return 0;
  }
  int32_t n = ((IOSDoubleArray *) nil_chk(self->mT_))->size_;
  if (t <= IOSDoubleArray_Get(self->mT_, 0)) {
    return 0;
  }
  if (t >= IOSDoubleArray_Get(self->mT_, n - 1)) {
    return self->mTotalLength_;
  }
  double sum = 0;
  double last_x = 0;
  double last_y = 0;
  for (int32_t i = 0; i < n - 1; i++) {
    double px = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->mY_), i)), 0);
    double py = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->mY_, i)), 1);
    if (i > 0) {
      JrePlusAssignDoubleD(&sum, JavaLangMath_hypotWithDouble_withDouble_(px - last_x, py - last_y));
    }
    last_x = px;
    last_y = py;
    if (t == IOSDoubleArray_Get(nil_chk(self->mT_), i)) {
      return sum;
    }
    if (t < IOSDoubleArray_Get(self->mT_, i + 1)) {
      double h = IOSDoubleArray_Get(self->mT_, i + 1) - IOSDoubleArray_Get(self->mT_, i);
      double x = (t - IOSDoubleArray_Get(self->mT_, i)) / h;
      double x1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->mY_), i)), 0);
      double x2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->mY_, i + 1)), 0);
      double y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->mY_, i)), 1);
      double y2 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->mY_, i + 1)), 1);
      JreMinusAssignDoubleD(&py, y1 * (1 - x) + y2 * x);
      JreMinusAssignDoubleD(&px, x1 * (1 - x) + x2 * x);
      JrePlusAssignDoubleD(&sum, JavaLangMath_hypotWithDouble_withDouble_(py, px));
      return sum;
    }
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXLinearCurveFit)

J2OBJC_NAME_MAPPING(ADXLinearCurveFit, "androidx.constraintlayout.core.motion.utils", "ADX")
