//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\MotionLayoutImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "Barrier.h"
#include "BaseHasWidgets.h"
#include "Color.h"
#include "ConstraintAttribute.h"
#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "Constraints.h"
#include "ConverterFactory.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "HasWidgets.h"
#include "HtmlParser.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "Key.h"
#include "KeyAttributes.h"
#include "KeyCycle.h"
#include "KeyFrames.h"
#include "KeyPosition.h"
#include "KeyTimeCycle.h"
#include "KeyTrigger.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "MotionEvent.h"
#include "MotionLayout.h"
#include "MotionLayoutImpl.h"
#include "MotionScene.h"
#include "OnLayoutEvent.h"
#include "OnSwipe.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"
#include "java/util/UUID.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/Locator.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@class JavaUtilHashMap;
@class JavaUtilStack;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxLocator;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASMotionLayoutImpl () {
 @public
  id uiView_;
  ADXMotionLayout *motionLayout_;
  jint constraintId_;
  jint action_;
  ADXKeyFrames *keyFrames_;
  jint idCounter_;
  NSString *layoutDescription_;
  ADMotionEvent *motionEvent_;
}

- (void)addDellocHandler;

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXConstraintLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                                withId:(id)objValue;

- (void)setLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                               withId:(id)objValue;

- (id)getLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams;

- (id)getLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams;

- (void)setOptimizationLevelWithId:(id)objValue;

- (id)getOptimizationLevel;

- (void)setLayoutDescriptionWithId:(id)objValue;

- (jint)getFirstTransitionId;

- (jint)getWaveVariesByWithNSString:(NSString *)value;

- (jint)getWaveShapeWithNSString:(NSString *)value;

- (void)parseConstraintWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setOrientationWithASIWidget:(id<ASIWidget>)w
                     withADXBarrier:(ADXBarrier *)barrier
        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                       withNSString:(NSString *)strValue;

- (void)setVisibilityWithASIWidget:(id<ASIWidget>)w
                    withADXBarrier:(ADXBarrier *)barrier
       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                      withNSString:(NSString *)strValue;

- (jint)getVisibilityModeWithNSString:(NSString *)value;

- (void)setVisibilityModeWithASIWidget:(id<ASIWidget>)w
                        withADXBarrier:(ADXBarrier *)barrier
           withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
       withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                          withNSString:(NSString *)strValue;

- (void)setAlphaWithASIWidget:(id<ASIWidget>)w
               withADXBarrier:(ADXBarrier *)barrier
  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                 withNSString:(NSString *)strValue;

- (void)setElevationWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setRotationWithASIWidget:(id<ASIWidget>)w
                  withADXBarrier:(ADXBarrier *)barrier
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                    withNSString:(NSString *)strValue;

- (void)setRotationXWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setRotationYWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setScaleXWithASIWidget:(id<ASIWidget>)w
                withADXBarrier:(ADXBarrier *)barrier
   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                  withNSString:(NSString *)strValue;

- (void)setScaleYWithASIWidget:(id<ASIWidget>)w
                withADXBarrier:(ADXBarrier *)barrier
   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                  withNSString:(NSString *)strValue;

- (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue;

- (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue;

- (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue;

- (void)setWidthWithASIWidget:(id<ASIWidget>)w
               withADXBarrier:(ADXBarrier *)barrier
  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                 withNSString:(NSString *)strValue;

- (void)setHeightWithASIWidget:(id<ASIWidget>)w
                withADXBarrier:(ADXBarrier *)barrier
   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                  withNSString:(NSString *)strValue;

- (void)setConstraintWidthWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setConstraintHeightWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setMarginStartWithASIWidget:(id<ASIWidget>)w
                     withADXBarrier:(ADXBarrier *)barrier
        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                       withNSString:(NSString *)strValue;

- (void)setMarginBottomWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue;

- (void)setMarginTopWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setMarginEndWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setMarginLeftWithASIWidget:(id<ASIWidget>)w
                    withADXBarrier:(ADXBarrier *)barrier
       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                      withNSString:(NSString *)strValue;

- (void)setMarginRightWithASIWidget:(id<ASIWidget>)w
                     withADXBarrier:(ADXBarrier *)barrier
        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                       withNSString:(NSString *)strValue;

- (void)setConstraintCircleWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setConstraintCircleRadiusWithASIWidget:(id<ASIWidget>)w
                                withADXBarrier:(ADXBarrier *)barrier
                   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
              withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
               withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                  withNSString:(NSString *)strValue;

- (void)setConstraintCircleAngleWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setConstraintGuide_beginWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setConstraintGuide_endWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setConstraintGuide_percentWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintLeft_toLeftOfWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintLeft_toRightOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintRight_toLeftOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintRight_toRightOfWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintTop_toTopOfWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setConstraintTop_toBottomOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintBottom_toTopOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintBottom_toBottomOfWithASIWidget:(id<ASIWidget>)w
                                     withADXBarrier:(ADXBarrier *)barrier
                        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                       withNSString:(NSString *)strValue;

- (void)setConstraintBaseline_toBaselineOfWithASIWidget:(id<ASIWidget>)w
                                         withADXBarrier:(ADXBarrier *)barrier
                            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                           withNSString:(NSString *)strValue;

- (void)setConstraintBaseline_toTopOfWithASIWidget:(id<ASIWidget>)w
                                    withADXBarrier:(ADXBarrier *)barrier
                       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                      withNSString:(NSString *)strValue;

- (void)setConstraintBaseline_toBottomOfWithASIWidget:(id<ASIWidget>)w
                                       withADXBarrier:(ADXBarrier *)barrier
                          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                         withNSString:(NSString *)strValue;

- (void)setConstraintStart_toEndOfWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintStart_toStartOfWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintEnd_toStartOfWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintEnd_toEndOfWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setGoneMarginLeftWithASIWidget:(id<ASIWidget>)w
                        withADXBarrier:(ADXBarrier *)barrier
           withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
       withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                          withNSString:(NSString *)strValue;

- (void)setGoneMarginTopWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setGoneMarginRightWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setGoneMarginBottomWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setGoneMarginStartWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setGoneMarginEndWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setGoneMarginBaselineWithASIWidget:(id<ASIWidget>)w
                            withADXBarrier:(ADXBarrier *)barrier
               withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
          withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
           withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                              withNSString:(NSString *)strValue;

- (void)setMarginBaselineWithASIWidget:(id<ASIWidget>)w
                        withADXBarrier:(ADXBarrier *)barrier
           withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
       withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                          withNSString:(NSString *)strValue;

- (void)setConstrainedWidthWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setConstrainedHeightWithASIWidget:(id<ASIWidget>)w
                           withADXBarrier:(ADXBarrier *)barrier
              withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
         withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
          withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                             withNSString:(NSString *)strValue;

- (void)setConstraintHorizontal_biasWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintVertical_biasWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintWidth_defaultWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintHeight_defaultWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintWidth_minWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setConstraintWidth_maxWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setConstraintWidth_percentWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintHeight_minWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue;

- (void)setConstraintHeight_maxWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue;

- (void)setConstraintHeight_percentWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintDimensionRatioWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintHorizontal_weightWithASIWidget:(id<ASIWidget>)w
                                     withADXBarrier:(ADXBarrier *)barrier
                        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                       withNSString:(NSString *)strValue;

- (void)setConstraintVertical_weightWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintHorizontal_chainStyleWithASIWidget:(id<ASIWidget>)w
                                         withADXBarrier:(ADXBarrier *)barrier
                            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                           withNSString:(NSString *)strValue;

- (void)setConstraintVertical_chainStyleWithASIWidget:(id<ASIWidget>)w
                                       withADXBarrier:(ADXBarrier *)barrier
                          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                         withNSString:(NSString *)strValue;

- (void)setEditor_absoluteXWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setEditor_absoluteYWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setWrapBehaviorInParentWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue;

- (void)setBarrierDirectionWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setBarrierMarginWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setConstraint_referenced_idsWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setBarrierAllowsGoneWidgetsWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setAnimateRelativeToWithASIWidget:(id<ASIWidget>)w
                           withADXBarrier:(ADXBarrier *)barrier
              withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
         withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
          withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                             withNSString:(NSString *)strValue;

- (jint)getAnimateCircleAngleToWithNSString:(NSString *)value;

- (void)setAnimateCircleAngleToWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue;

- (jint)getTransitionEasingWithNSString:(NSString *)value;

- (void)setTransitionEasingWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue;

- (jint)getPathMotionArcWithNSString:(NSString *)value;

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setPolarRelativeToWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue;

- (jint)getDrawPathWithNSString:(NSString *)value;

- (void)setDrawPathWithASIWidget:(id<ASIWidget>)w
                  withADXBarrier:(ADXBarrier *)barrier
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                    withNSString:(NSString *)strValue;

- (void)setConstraintTagWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setMotionStaggerWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setQuantizeMotionStepsWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setQuantizeMotionPhaseWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue;

- (jint)getQuantizeMotionInterpolatorWithNSString:(NSString *)value;

- (void)setEndMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
             withASIWidget:(id<ASIWidget>)w;

- (void)setLeftMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
              withASIWidget:(id<ASIWidget>)w;

- (void)setRightMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
               withASIWidget:(id<ASIWidget>)w;

- (void)parseMotionWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setAnimateRelativeToWithASIWidget:(id<ASIWidget>)w
              withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                             withNSString:(NSString *)strValue;

- (void)setAnimateCircleAngleToWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                                withNSString:(NSString *)strValue;

- (void)setTransitionEasingWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                            withNSString:(NSString *)strValue;

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                         withNSString:(NSString *)strValue;

- (void)setMotionStaggerWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                         withNSString:(NSString *)strValue;

- (void)setDrawPathWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                    withNSString:(NSString *)strValue;

- (void)setQuantizeMotionStepsWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                               withNSString:(NSString *)strValue;

- (void)setQuantizeMotionPhaseWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                               withNSString:(NSString *)strValue;

- (void)parseLayoutWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setWidthWithASIWidget:(id<ASIWidget>)w
  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                 withNSString:(NSString *)strValue;

- (void)setHeightWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                  withNSString:(NSString *)strValue;

- (void)setConstraintWidthWithASIWidget:(id<ASIWidget>)w
            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setConstraintHeightWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setConstraintCircleWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setConstraintCircleRadiusWithASIWidget:(id<ASIWidget>)w
                   withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                  withNSString:(NSString *)strValue;

- (void)setConstraintCircleAngleWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setConstraintGuide_beginWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setConstraintGuide_endWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setConstraintGuide_percentWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintLeft_toLeftOfWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintLeft_toRightOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintRight_toLeftOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintRight_toRightOfWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintTop_toTopOfWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setConstraintTop_toBottomOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintBottom_toTopOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintBottom_toBottomOfWithASIWidget:(id<ASIWidget>)w
                        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                       withNSString:(NSString *)strValue;

- (void)setConstraintBaseline_toBaselineOfWithASIWidget:(id<ASIWidget>)w
                            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                           withNSString:(NSString *)strValue;

- (void)setConstraintBaseline_toTopOfWithASIWidget:(id<ASIWidget>)w
                       withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                      withNSString:(NSString *)strValue;

- (void)setConstraintBaseline_toBottomOfWithASIWidget:(id<ASIWidget>)w
                          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                         withNSString:(NSString *)strValue;

- (void)setConstraintStart_toEndOfWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintStart_toStartOfWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintEnd_toStartOfWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintEnd_toEndOfWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue;

- (void)setGoneMarginLeftWithASIWidget:(id<ASIWidget>)w
           withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                          withNSString:(NSString *)strValue;

- (void)setGoneMarginTopWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setGoneMarginRightWithASIWidget:(id<ASIWidget>)w
            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setGoneMarginBottomWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setGoneMarginStartWithASIWidget:(id<ASIWidget>)w
            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                           withNSString:(NSString *)strValue;

- (void)setGoneMarginEndWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setGoneMarginBaselineWithASIWidget:(id<ASIWidget>)w
               withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                              withNSString:(NSString *)strValue;

- (void)setMarginBaselineWithASIWidget:(id<ASIWidget>)w
           withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                          withNSString:(NSString *)strValue;

- (void)setConstrainedWidthWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setConstrainedHeightWithASIWidget:(id<ASIWidget>)w
              withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                             withNSString:(NSString *)strValue;

- (void)setConstraintHorizontal_biasWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintVertical_biasWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintWidth_defaultWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintHeight_defaultWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintWidth_minWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setConstraintWidth_maxWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setOrientationWithASIWidget:(id<ASIWidget>)w
        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                       withNSString:(NSString *)strValue;

- (void)setConstraintWidth_percentWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue;

- (void)setConstraintHeight_minWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                withNSString:(NSString *)strValue;

- (void)setConstraintHeight_maxWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                withNSString:(NSString *)strValue;

- (void)setConstraintHeight_percentWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintDimensionRatioWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)setConstraintHorizontal_weightWithASIWidget:(id<ASIWidget>)w
                        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                       withNSString:(NSString *)strValue;

- (void)setConstraintVertical_weightWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setConstraintHorizontal_chainStyleWithASIWidget:(id<ASIWidget>)w
                            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                           withNSString:(NSString *)strValue;

- (void)setConstraintVertical_chainStyleWithASIWidget:(id<ASIWidget>)w
                          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                         withNSString:(NSString *)strValue;

- (void)setEditor_absoluteXWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setEditor_absoluteYWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setWrapBehaviorInParentWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                withNSString:(NSString *)strValue;

- (jint)getBarrierDirectionWithNSString:(NSString *)value;

- (void)setBarrierDirectionWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue;

- (void)setBarrierMarginWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                         withNSString:(NSString *)strValue;

- (void)setBarrierAllowsGoneWidgetsWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue;

- (void)parseTransformWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
            withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setElevationWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                     withNSString:(NSString *)strValue;

- (void)setRotationWithASIWidget:(id<ASIWidget>)w
  withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                    withNSString:(NSString *)strValue;

- (void)setRotationXWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                     withNSString:(NSString *)strValue;

- (void)setRotationYWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                     withNSString:(NSString *)strValue;

- (void)setScaleXWithASIWidget:(id<ASIWidget>)w
withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                  withNSString:(NSString *)strValue;

- (void)setScaleYWithASIWidget:(id<ASIWidget>)w
withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                  withNSString:(NSString *)strValue;

- (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
         withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                           withNSString:(NSString *)strValue;

- (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
         withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                           withNSString:(NSString *)strValue;

- (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                        withNSString:(NSString *)strValue;

- (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                        withNSString:(NSString *)strValue;

- (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                        withNSString:(NSString *)strValue;

- (void)parsePropertySetWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setVisibilityWithASIWidget:(id<ASIWidget>)w
  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                      withNSString:(NSString *)strValue;

- (void)setVisibilityModeWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                          withNSString:(NSString *)strValue;

- (void)setAlphaWithASIWidget:(id<ASIWidget>)w
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withNSString:(NSString *)strValue;

- (void)parseKeyPositionWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (jint)getKeyPositionTypeWithNSString:(NSString *)value;

- (void)setPercentXWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)name
                    withNSString:(NSString *)strValue;

- (void)setPercentYWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)name
                    withNSString:(NSString *)strValue;

- (void)setPercentWidthWithASIWidget:(id<ASIWidget>)w
                  withADXKeyPosition:(ADXKeyPosition *)keyPosition
                        withNSString:(NSString *)name
                        withNSString:(NSString *)strValue;

- (void)setPercentHeightWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
                         withNSString:(NSString *)name
                         withNSString:(NSString *)strValue;

- (void)setTransitionEasingWithASIWidget:(id<ASIWidget>)w
                      withADXKeyPosition:(ADXKeyPosition *)keyPosition
                            withNSString:(NSString *)name
                            withNSString:(NSString *)strValue;

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
                         withNSString:(NSString *)strValue;

- (jint)getCurveFitWithNSString:(NSString *)value;

- (void)setDrawPathWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)name
                    withNSString:(NSString *)strValue;

- (void)parseTransitionWithASIWidget:(id<ASIWidget>)w
       withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setConstraintSetStartWithASIWidget:(id<ASIWidget>)w
             withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                              withNSString:(NSString *)strValue;

- (void)setConstraintSetEndWithASIWidget:(id<ASIWidget>)w
           withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                            withNSString:(NSString *)strValue;

- (jint)getLayoutDuringTransitionWithNSString:(NSString *)value;

- (void)setLayoutDuringTransitionWithASIWidget:(id<ASIWidget>)w
                 withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                  withNSString:(NSString *)strValue;

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
        withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                         withNSString:(NSString *)strValue;

- (jint)getAutoTransitionWithNSString:(NSString *)value;

- (void)setAutoTransitionWithASIWidget:(id<ASIWidget>)w
         withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                          withNSString:(NSString *)strValue;

- (jint)getMotionInterpolatorWithNSString:(NSString *)value;

- (void)setDurationWithASIWidget:(id<ASIWidget>)w
   withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                    withNSString:(NSString *)strValue;

- (void)setTransitionFlagWithASIWidget:(id<ASIWidget>)w
         withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                          withNSString:(NSString *)strValue;

- (void)parseKeyTriggerWithASIWidget:(id<ASIWidget>)w
                   withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setQuantizeMotionInterpolatorWithASIWidget:(id<ASIWidget>)w
                       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                                      withNSString:(NSString *)strValue;

- (void)setMotionPathRotateWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                            withNSString:(NSString *)strValue;

- (void)setQuantizeMotionInterpolatorWithASIWidget:(id<ASIWidget>)w
                                    withADXBarrier:(ADXBarrier *)barrier
                       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                      withNSString:(NSString *)strValue;

- (void)setTransitionPathRotateWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue;

- (void)setLayout_constraintHeightWithADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                                           withId:(id)objValue;

- (void)setLayout_constraintWidthWithADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                                          withId:(id)objValue;

- (void)setStartMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
               withASIWidget:(id<ASIWidget>)w;

- (void)setBottomMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams;

- (void)setTopMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams;

- (void)setMarginRightWithASIWidget:(id<ASIWidget>)w
        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                       withNSString:(NSString *)strValue;

- (void)setMarginLeftWithASIWidget:(id<ASIWidget>)w
       withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                      withNSString:(NSString *)strValue;

- (void)setMarginEndWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setMarginTopWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                     withNSString:(NSString *)strValue;

- (void)setMarginBottomWithASIWidget:(id<ASIWidget>)w
         withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                        withNSString:(NSString *)strValue;

- (void)setMarginStartWithASIWidget:(id<ASIWidget>)w
        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                       withNSString:(NSString *)strValue;

- (void)setLayout_constraintWidthWithADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                                      withId:(id)objValue;

- (void)setLayout_constraintHeightWithADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                                       withId:(id)objValue;

- (void)setConstraint_referenced_idsWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue;

- (void)setSizePercentWithASIWidget:(id<ASIWidget>)w
                 withADXKeyPosition:(ADXKeyPosition *)keyPosition
                       withNSString:(NSString *)strValue;

- (void)setCurveFitWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)strValue;

- (void)setMotionTargetWithASIWidget:(id<ASIWidget>)w
                  withADXKeyPosition:(ADXKeyPosition *)keyPosition
                        withNSString:(NSString *)strValue;

- (void)setFramePositionWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
                         withNSString:(NSString *)strValue;

- (void)setKeyPositionTypeWithASIWidget:(id<ASIWidget>)w
                     withADXKeyPosition:(ADXKeyPosition *)keyPosition
                           withNSString:(NSString *)strValue;

- (jint)getIdWithNSString:(NSString *)id_;

- (void)setStaggeredWithASIWidget:(id<ASIWidget>)w
    withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                     withNSString:(NSString *)strValue;

- (void)setMotionInterpolatorWithASIWidget:(id<ASIWidget>)w
             withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                              withNSString:(NSString *)strValue;

- (void)setTransitionDisableWithASIWidget:(id<ASIWidget>)w
            withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                             withNSString:(NSString *)strValue;

- (void)setMotion_triggerOnCollisionWithASIWidget:(id<ASIWidget>)w
                                withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                     withNSString:(NSString *)strValue;

- (void)setMotion_postLayoutCollisionWithASIWidget:(id<ASIWidget>)w
                                 withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                      withNSString:(NSString *)strValue;

- (void)setTriggerIdWithASIWidget:(id<ASIWidget>)w
                withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                     withNSString:(NSString *)strValue;

- (void)setTriggerSlackWithASIWidget:(id<ASIWidget>)w
                   withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                        withNSString:(NSString *)strValue;

- (void)setViewTransitionOnCrossWithASIWidget:(id<ASIWidget>)w
                            withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                 withNSString:(NSString *)strValue;

- (void)setViewTransitionOnPositiveCrossWithASIWidget:(id<ASIWidget>)w
                                    withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                         withNSString:(NSString *)strValue;

- (void)setViewTransitionOnNegativeCrossWithASIWidget:(id<ASIWidget>)w
                                    withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                         withNSString:(NSString *)strValue;

- (void)setOnCrossWithASIWidget:(id<ASIWidget>)w
              withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                   withNSString:(NSString *)strValue;

- (void)setOnPositiveCrossWithASIWidget:(id<ASIWidget>)w
                      withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                           withNSString:(NSString *)strValue;

- (void)setOnNegativeCrossWithASIWidget:(id<ASIWidget>)w
                      withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                           withNSString:(NSString *)strValue;

- (void)setTriggerReceiverWithASIWidget:(id<ASIWidget>)w
                      withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                           withNSString:(NSString *)strValue;

- (void)setMotionTargetWithASIWidget:(id<ASIWidget>)w
                   withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                        withNSString:(NSString *)strValue;

- (void)setFramePositionWithASIWidget:(id<ASIWidget>)w
                    withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                         withNSString:(NSString *)strValue;

- (void)setElevationAdditionalWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue;

- (void)setElevationAdditionalWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                               withNSString:(NSString *)value;

- (void)processTouchEventWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                               withInt:(jint)event
                                               withInt:(jint)clientX
                                               withInt:(jint)clientY;

- (void)setReduceFlickerWithBoolean:(jboolean)flag;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)nativeAddOnSwipeWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                        withASIWidget:(id<ASIWidget>)widget;

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl, motionLayout_, ADXMotionLayout *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl, keyFrames_, ADXKeyFrames *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl, layoutDescription_, NSString *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl, motionEvent_, ADMotionEvent *)

inline NSString *ASMotionLayoutImpl_get_DELLOC_EVENT(void);
static NSString *ASMotionLayoutImpl_DELLOC_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASMotionLayoutImpl, DELLOC_EVENT, NSString *)

__attribute__((unused)) static void ASMotionLayoutImpl_addDellocHandler(ASMotionLayoutImpl *self);

__attribute__((unused)) static void ASMotionLayoutImpl_setWidgetOnNativeClass(ASMotionLayoutImpl *self);

__attribute__((unused)) static void ASMotionLayoutImpl_nativeRemoveViewWithASIWidget_(ASMotionLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASMotionLayoutImpl_createLayoutParamsWithADView_(ASMotionLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADXConstraintLayout_LayoutParams *ASMotionLayoutImpl_getLayoutParamsWithADView_(ASMotionLayoutImpl *self, ADView *view);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static id ASMotionLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams);

__attribute__((unused)) static id ASMotionLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams);

__attribute__((unused)) static void ASMotionLayoutImpl_setOptimizationLevelWithId_(ASMotionLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASMotionLayoutImpl_getOptimizationLevel(ASMotionLayoutImpl *self);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayoutDescriptionWithId_(ASMotionLayoutImpl *self, id objValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getFirstTransitionId(ASMotionLayoutImpl *self);

__attribute__((unused)) static jint ASMotionLayoutImpl_getWaveVariesByWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static jint ASMotionLayoutImpl_getWaveShapeWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_parseConstraintWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setOrientationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getVisibilityModeWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setAlphaWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setElevationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setRotationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setRotationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setRotationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setScaleXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setScaleYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getAnimateCircleAngleToWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getTransitionEasingWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getPathMotionArcWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPolarRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getDrawPathWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintTagWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getQuantizeMotionInterpolatorWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setEndMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w);

__attribute__((unused)) static void ASMotionLayoutImpl_setLeftMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w);

__attribute__((unused)) static void ASMotionLayoutImpl_setRightMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w);

__attribute__((unused)) static void ASMotionLayoutImpl_parseMotionWithASIWidget_withADXConstraintSet_Motion_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_parseLayoutWithASIWidget_withADXConstraintSet_Layout_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setOrientationWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getBarrierDirectionWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_parseTransformWithASIWidget_withADXConstraintSet_Transform_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setElevationWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setRotationWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setRotationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setRotationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setScaleXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setScaleYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_parsePropertySetWithASIWidget_withADXConstraintSet_PropertySet_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setAlphaWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_parseKeyPositionWithASIWidget_withADXKeyPosition_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static jint ASMotionLayoutImpl_getKeyPositionTypeWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setPercentXWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPercentYWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPercentWidthWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPercentHeightWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getCurveFitWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_parseTransitionWithASIWidget_withADXMotionScene_Transition_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintSetStartWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraintSetEndWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getLayoutDuringTransitionWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayoutDuringTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getAutoTransitionWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setAutoTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getMotionInterpolatorWithNSString_(ASMotionLayoutImpl *self, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_setDurationWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransitionFlagWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_parseKeyTriggerWithASIWidget_withADXKeyTrigger_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotionPathRotateWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransitionPathRotateWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraints_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraints_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraints_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraints_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setStartMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w);

__attribute__((unused)) static void ASMotionLayoutImpl_setBottomMarginWithId_withADXConstraints_LayoutParams_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams);

__attribute__((unused)) static void ASMotionLayoutImpl_setTopMarginWithId_withADXConstraints_LayoutParams_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintSet_Layout_withId_(ASMotionLayoutImpl *self, ADXConstraintSet_Layout *layoutParams, id objValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintSet_Layout_withId_(ASMotionLayoutImpl *self, ADXConstraintSet_Layout *layoutParams, id objValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setSizePercentWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setCurveFitWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setKeyPositionTypeWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue);

__attribute__((unused)) static jint ASMotionLayoutImpl_getIdWithNSString_(ASMotionLayoutImpl *self, NSString *id_);

__attribute__((unused)) static void ASMotionLayoutImpl_setStaggeredWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotionInterpolatorWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTransitionDisableWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotion_triggerOnCollisionWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotion_postLayoutCollisionWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTriggerIdWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTriggerSlackWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setViewTransitionOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setViewTransitionOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setViewTransitionOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setTriggerReceiverWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue);

__attribute__((unused)) static void ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *value);

__attribute__((unused)) static void ASMotionLayoutImpl_processTouchEventWithADXMotionScene_Transition_withInt_withInt_withInt_(ASMotionLayoutImpl *self, ADXMotionScene_Transition *transition, jint event, jint clientX, jint clientY);

__attribute__((unused)) static void ASMotionLayoutImpl_setReduceFlickerWithBoolean_(ASMotionLayoutImpl *self, jboolean flag);

__attribute__((unused)) static void ASMotionLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASMotionLayoutImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASMotionLayoutImpl_nativeAddOnSwipeWithADXMotionScene_Transition_withASIWidget_(ASMotionLayoutImpl *self, ADXMotionScene_Transition *transition, id<ASIWidget> widget);

@interface ASMotionLayoutImpl_DallocHandler () {
 @public
  __unsafe_unretained ASMotionLayoutImpl *this$0_;
}

@end

@interface ASMotionLayoutImpl_OptimizationLevel () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_OptimizationLevel, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_constraintWidth () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_constraintWidth, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_constraintHeight () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_constraintHeight, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_constraintWidth_default () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_constraintWidth_default, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_constraintHeight_default () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_constraintHeight_default, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_constraintVertical_chainStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_constraintVertical_chainStyle, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_Layout_wrapBehaviorInParent () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_Layout_wrapBehaviorInParent, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_MotionLayoutExt () {
 @public
  __unsafe_unretained ASMotionLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_MotionLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_MotionLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_MotionLayoutExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_MotionLayoutExt, templates_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_1 : NSObject < OrgXmlSaxContentHandler > {
 @public
  ASMotionLayoutImpl *this$0_;
  ADXConstraintSet *constraintSet_;
  jint constraintSetId_;
  ADXMotionScene_Transition *transition_;
  JavaUtilStack *parents_;
  JavaUtilHashMap *mCustomConstraints_;
}

- (instancetype)initWithASMotionLayoutImpl:(ASMotionLayoutImpl *)outer$;

- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator;

- (void)startDocument;

- (void)endDocument;

- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri;

- (void)endPrefixMappingWithNSString:(NSString *)prefix;

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (jint)getClickActionWithNSString:(NSString *)value;

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName;

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length;

- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length;

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

- (void)skippedEntityWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(ASMotionLayoutImpl_1)

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_1, constraintSet_, ADXConstraintSet *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_1, transition_, ADXMotionScene_Transition *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_1, parents_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_1, mCustomConstraints_, JavaUtilHashMap *)

__attribute__((unused)) static void ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(ASMotionLayoutImpl_1 *self, ASMotionLayoutImpl *outer$);

__attribute__((unused)) static ASMotionLayoutImpl_1 *new_ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASMotionLayoutImpl_1 *create_ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$);

__attribute__((unused)) static jint ASMotionLayoutImpl_1_getClickActionWithNSString_(ASMotionLayoutImpl_1 *self, NSString *value);

@interface ASMotionLayoutImpl_TransitionFlagsConverter () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASMotionLayoutImpl_TransitionFlagsConverter, mapping_, id<JavaUtilMap>)

@interface ASMotionLayoutImpl_2 : NSObject < ASViewImpl_PanCallBack > {
 @public
  ASMotionLayoutImpl *this$0_;
  ADXMotionScene_Transition *val$transition_;
}

- (instancetype)initWithASMotionLayoutImpl:(ASMotionLayoutImpl *)outer$
             withADXMotionScene_Transition:(ADXMotionScene_Transition *)capture$0;

- (void)handlePanStartWithASIWidget:(id<ASIWidget>)widget
                             withId:(id)eventWidget
                            withInt:(jint)x
                            withInt:(jint)y;

- (void)handlePanDragWithASIWidget:(id<ASIWidget>)widget
                            withId:(id)eventWidget
                           withInt:(jint)x
                           withInt:(jint)y;

- (void)handlePanEndWithASIWidget:(id<ASIWidget>)widget
                           withId:(id)eventWidget
                          withInt:(jint)x
                          withInt:(jint)y;

@end

J2OBJC_EMPTY_STATIC_INIT(ASMotionLayoutImpl_2)

__attribute__((unused)) static void ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(ASMotionLayoutImpl_2 *self, ASMotionLayoutImpl *outer$, ADXMotionScene_Transition *capture$0);

__attribute__((unused)) static ASMotionLayoutImpl_2 *new_ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(ASMotionLayoutImpl *outer$, ADXMotionScene_Transition *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASMotionLayoutImpl_2 *create_ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(ASMotionLayoutImpl *outer$, ADXMotionScene_Transition *capture$0);

@interface ASMotionLayoutImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASMotionLayoutImpl_$Lambda$1)

__attribute__((unused)) static void ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(ASMotionLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASMotionLayoutImpl_$Lambda$1 *new_ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASMotionLayoutImpl_$Lambda$1 *create_ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

@interface ASMotionLayoutImpl_$Lambda$2 : NSObject < JavaLangRunnable > {
 @public
  ASMotionLayoutImpl *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASMotionLayoutImpl_$Lambda$2)

__attribute__((unused)) static void ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(ASMotionLayoutImpl_$Lambda$2 *self, ASMotionLayoutImpl *outer$);

__attribute__((unused)) static ASMotionLayoutImpl_$Lambda$2 *new_ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASMotionLayoutImpl_$Lambda$2 *create_ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$);

J2OBJC_INITIALIZED_DEFN(ASMotionLayoutImpl)

NSString *ASMotionLayoutImpl_LOCAL_NAME = @"androidx.constraintlayout.motion.widget.MotionLayout";
NSString *ASMotionLayoutImpl_GROUP_NAME = @"androidx.constraintlayout.motion.widget.MotionLayout";

@implementation ASMotionLayoutImpl

@synthesize uiView = uiView_;

- (void)addDellocHandler {
  ASMotionLayoutImpl_addDellocHandler(self);
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutDescription"])) withTypeWithNSString:@"string"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progress"])) withTypeWithNSString:@"float"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"reduceFlicker"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.optimizationLevel", new_ASMotionLayoutImpl_OptimizationLevel_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"optimizationLevel"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.optimizationLevel"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_optimizationLevel"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.optimizationLevel"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.orientation", new_ASMotionLayoutImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_orientation"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.orientation"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintCircle"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintCircleRadius"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintCircleAngle"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintGuide_begin"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintGuide_end"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintGuide_percent"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintLeft_toLeftOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintLeft_toRightOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintRight_toLeftOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintRight_toRightOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintTop_toTopOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintTop_toBottomOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBottom_toTopOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBottom_toBottomOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBaseline_toBaselineOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBaseline_toTopOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBaseline_toBottomOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintStart_toEndOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintStart_toStartOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintEnd_toStartOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintEnd_toEndOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginLeft"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginTop"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginRight"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginBottom"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginStart"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginEnd"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginBaseline"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginBaseline"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth", new_ASMotionLayoutImpl_Layout_constraintWidth_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight", new_ASMotionLayoutImpl_Layout_constraintHeight_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constrainedWidth"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constrainedHeight"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHorizontal_bias"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintVertical_bias"])) withTypeWithNSString:@"float"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth_default", new_ASMotionLayoutImpl_Layout_constraintWidth_default_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_default"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth_default"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight_default", new_ASMotionLayoutImpl_Layout_constraintHeight_default_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_default"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight_default"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_min"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_max"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_percent"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_min"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_max"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_percent"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintDimensionRatio"])) withTypeWithNSString:@"string"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHorizontal_weight"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintVertical_weight"])) withTypeWithNSString:@"float"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHorizontal_chainStyle", new_ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHorizontal_chainStyle"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHorizontal_chainStyle"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintVertical_chainStyle", new_ASMotionLayoutImpl_Layout_constraintVertical_chainStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintVertical_chainStyle"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintVertical_chainStyle"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_editor_absoluteX"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_editor_absoluteY"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintTag"])) withTypeWithNSString:@"string"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.motion.widget.MotionLayout.layout_wrapBehaviorInParent", new_ASMotionLayoutImpl_Layout_wrapBehaviorInParent_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_wrapBehaviorInParent"])) withTypeWithNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_wrapBehaviorInParent"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASMotionLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASMotionLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASMotionLayoutImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  motionLayout_ = new_ASMotionLayoutImpl_MotionLayoutExt_initWithASMotionLayoutImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASMotionLayoutImpl_addDellocHandler(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASMotionLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASMotionLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return motionLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXMotionLayout *) nil_chk(motionLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASMotionLayoutImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXMotionLayout *) nil_chk(motionLayout_)) getChildCount]) {
    [((ADXMotionLayout *) nil_chk(motionLayout_)) removeViewAtWithInt:index];
    ASMotionLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASMotionLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASMotionLayoutImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) addViewWithADView:view];
    }
    else {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASMotionLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXConstraintLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASMotionLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXConstraintLayout_LayoutParams *layoutParams = ASMotionLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_orientation", @"layout_constraintCircle", @"layout_constraintCircleRadius", @"layout_constraintCircleAngle", @"layout_constraintGuide_begin", @"layout_constraintGuide_end", @"layout_constraintGuide_percent", @"layout_constraintLeft_toLeftOf", @"layout_constraintLeft_toRightOf", @"layout_constraintRight_toLeftOf", @"layout_constraintRight_toRightOf", @"layout_constraintTop_toTopOf", @"layout_constraintTop_toBottomOf", @"layout_constraintBottom_toTopOf", @"layout_constraintBottom_toBottomOf", @"layout_constraintBaseline_toBaselineOf", @"layout_constraintBaseline_toTopOf", @"layout_constraintBaseline_toBottomOf", @"layout_constraintStart_toEndOf", @"layout_constraintStart_toStartOf", @"layout_constraintEnd_toStartOf", @"layout_constraintEnd_toEndOf", @"layout_goneMarginLeft", @"layout_goneMarginTop", @"layout_goneMarginRight", @"layout_goneMarginBottom", @"layout_goneMarginStart", @"layout_goneMarginEnd", @"layout_goneMarginBaseline", @"layout_marginBaseline", @"layout_constraintWidth", @"layout_constraintHeight", @"layout_constrainedWidth", @"layout_constrainedHeight", @"layout_constraintHorizontal_bias", @"layout_constraintVertical_bias", @"layout_constraintWidth_default", @"layout_constraintHeight_default", @"layout_constraintWidth_min", @"layout_constraintWidth_max", @"layout_constraintWidth_percent", @"layout_constraintHeight_min", @"layout_constraintHeight_max", @"layout_constraintHeight_percent", @"layout_constraintDimensionRatio", @"layout_constraintHorizontal_weight", @"layout_constraintVertical_weight", @"layout_constraintHorizontal_chainStyle", @"layout_constraintVertical_chainStyle", @"layout_editor_absoluteX", @"layout_editor_absoluteY", @"layout_constraintTag", @"layout_wrapBehaviorInParent" }, 55)) {
    case 0:
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->orientation_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleConstraint_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 4:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleRadius_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 5:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleAngle_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 6:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideBegin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 7:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 8:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guidePercent_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 9:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->leftToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 10:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->leftToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 11:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->rightToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 12:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->rightToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 13:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->topToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 14:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->topToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 15:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->bottomToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 16:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->bottomToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 17:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBaseline_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 18:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->baselineToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 19:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->baselineToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 20:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->startToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 21:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->startToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 22:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->endToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 23:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->endToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 24:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneLeftMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 25:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneTopMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 26:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneRightMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 27:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBottomMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 28:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneStartMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 29:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneEndMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 30:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBaselineMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 31:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 32:
    {
      ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
    }
    break;
    case 33:
    {
      ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
    }
    break;
    case 34:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedWidth_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    case 35:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedHeight_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    case 36:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalBias_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 37:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalBias_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 38:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultWidth_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 39:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultHeight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 40:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinWidth_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 41:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxWidth_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 42:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentWidth_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 43:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinHeight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 44:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxHeight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 45:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentHeight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 46:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->dimensionRatio_ = ((NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 47:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalWeight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 48:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalWeight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 49:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalChainStyle_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 50:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalChainStyle_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 51:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteX_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 52:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteY_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 53:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constraintTag_ = ((NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 54:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->wrapBehaviorInParent_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXConstraintLayout_LayoutParams *layoutParams = ASMotionLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_orientation", @"layout_constraintCircle", @"layout_constraintCircleRadius", @"layout_constraintCircleAngle", @"layout_constraintGuide_begin", @"layout_constraintGuide_end", @"layout_constraintGuide_percent", @"layout_constraintLeft_toLeftOf", @"layout_constraintLeft_toRightOf", @"layout_constraintRight_toLeftOf", @"layout_constraintRight_toRightOf", @"layout_constraintTop_toTopOf", @"layout_constraintTop_toBottomOf", @"layout_constraintBottom_toTopOf", @"layout_constraintBottom_toBottomOf", @"layout_constraintBaseline_toBaselineOf", @"layout_constraintBaseline_toTopOf", @"layout_constraintBaseline_toBottomOf", @"layout_constraintStart_toEndOf", @"layout_constraintStart_toStartOf", @"layout_constraintEnd_toStartOf", @"layout_constraintEnd_toEndOf", @"layout_goneMarginLeft", @"layout_goneMarginTop", @"layout_goneMarginRight", @"layout_goneMarginBottom", @"layout_goneMarginStart", @"layout_goneMarginEnd", @"layout_goneMarginBaseline", @"layout_marginBaseline", @"layout_constraintWidth", @"layout_constraintHeight", @"layout_constrainedWidth", @"layout_constrainedHeight", @"layout_constraintHorizontal_bias", @"layout_constraintVertical_bias", @"layout_constraintWidth_default", @"layout_constraintHeight_default", @"layout_constraintWidth_min", @"layout_constraintWidth_max", @"layout_constraintWidth_percent", @"layout_constraintHeight_min", @"layout_constraintHeight_max", @"layout_constraintHeight_percent", @"layout_constraintDimensionRatio", @"layout_constraintHorizontal_weight", @"layout_constraintVertical_weight", @"layout_constraintHorizontal_chainStyle", @"layout_constraintVertical_chainStyle", @"layout_editor_absoluteX", @"layout_editor_absoluteY", @"layout_constraintTag", @"layout_wrapBehaviorInParent" }, 55)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->orientation_);
    }
    case 3:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleConstraint_);
    }
    case 4:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleRadius_);
    }
    case 5:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleAngle_);
    }
    case 6:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideBegin_);
    }
    case 7:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideEnd_);
    }
    case 8:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guidePercent_);
    }
    case 9:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToLeft_);
    }
    case 10:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToRight_);
    }
    case 11:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToLeft_);
    }
    case 12:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToRight_);
    }
    case 13:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToTop_);
    }
    case 14:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToBottom_);
    }
    case 15:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToTop_);
    }
    case 16:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToBottom_);
    }
    case 17:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBaseline_);
    }
    case 18:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToTop_);
    }
    case 19:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBottom_);
    }
    case 20:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToEnd_);
    }
    case 21:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToStart_);
    }
    case 22:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToStart_);
    }
    case 23:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToEnd_);
    }
    case 24:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneLeftMargin_);
    }
    case 25:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneTopMargin_);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneRightMargin_);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBottomMargin_);
    }
    case 28:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneStartMargin_);
    }
    case 29:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneEndMargin_);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBaselineMargin_);
    }
    case 31:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineMargin_);
    }
    case 32:
    {
      return ASMotionLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(self, layoutParams);
    }
    case 33:
    {
      return ASMotionLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(self, layoutParams);
    }
    case 34:
    {
      return JavaLangBoolean_valueOfWithBoolean_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedWidth_);
    }
    case 35:
    {
      return JavaLangBoolean_valueOfWithBoolean_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedHeight_);
    }
    case 36:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalBias_);
    }
    case 37:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalBias_);
    }
    case 38:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultWidth_);
    }
    case 39:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultHeight_);
    }
    case 40:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinWidth_);
    }
    case 41:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxWidth_);
    }
    case 42:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentWidth_);
    }
    case 43:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinHeight_);
    }
    case 44:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxHeight_);
    }
    case 45:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentHeight_);
    }
    case 46:
    {
      return ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->dimensionRatio_;
    }
    case 47:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalWeight_);
    }
    case 48:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalWeight_);
    }
    case 49:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalChainStyle_);
    }
    case 50:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalChainStyle_);
    }
    case 51:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteX_);
    }
    case 52:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteY_);
    }
    case 53:
    {
      return ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constraintTag_;
    }
    case 54:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->wrapBehaviorInParent_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASMotionLayoutImpl_MotionLayoutExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"layoutDescription", @"progress", @"reduceFlicker", @"optimizationLevel" }, 8)) {
    case 0:
    {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      ASMotionLayoutImpl_setLayoutDescriptionWithId_(self, objValue);
    }
    break;
    case 5:
    {
      [((ADXMotionLayout *) nil_chk(motionLayout_)) setProgressWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 6:
    {
      ASMotionLayoutImpl_setReduceFlickerWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
    }
    break;
    case 7:
    {
      ASMotionLayoutImpl_setOptimizationLevelWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASMotionLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"progress", @"layout_optimizationLevel", @"optimizationLevel" }, 7)) {
    case 0:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXMotionLayout *) nil_chk(motionLayout_)) getMinWidth]);
    }
    case 1:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXMotionLayout *) nil_chk(motionLayout_)) getMinHeight]);
    }
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXMotionLayout *) nil_chk(motionLayout_)) getMaxWidth]);
    }
    case 3:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXMotionLayout *) nil_chk(motionLayout_)) getMaxHeight]);
    }
    case 4:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXMotionLayout *) nil_chk(motionLayout_)) getProgress]);
    }
    case 5:
    case 6:
    {
      return ASMotionLayoutImpl_getOptimizationLevel(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                                withId:(id)objValue {
  ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
}

- (void)setLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                               withId:(id)objValue {
  ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
}

- (id)getLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams {
  return ASMotionLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(self, layoutParams);
}

- (id)getLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams {
  return ASMotionLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(self, layoutParams);
}

- (void)setOptimizationLevelWithId:(id)objValue {
  ASMotionLayoutImpl_setOptimizationLevelWithId_(self, objValue);
}

- (id)getOptimizationLevel {
  return ASMotionLayoutImpl_getOptimizationLevel(self);
}

- (void)setLayoutDescriptionWithId:(id)objValue {
  ASMotionLayoutImpl_setLayoutDescriptionWithId_(self, objValue);
}

- (void)initialized {
  [super initialized];
  jint transitionId = ASMotionLayoutImpl_getFirstTransitionId(self);
  if (transitionId != -1) {
    [((ADXMotionLayout *) nil_chk(motionLayout_)) setTransitionWithInt:transitionId];
  }
  [((ADXMotionLayout *) nil_chk(motionLayout_)) postInit];
}

- (jint)getFirstTransitionId {
  return ASMotionLayoutImpl_getFirstTransitionId(self);
}

- (jint)getTouchAnchorSideWithNSString:(NSString *)value {
  switch (JreIndexOfStr(value, (id[]){ @"top", @"left", @"right", @"bottom", @"middle", @"start", @"end" }, 7)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    case 5:
    return 5;
    case 6:
    return 6;
    default:
    break;
  }
  return 0;
}

- (jint)getDragDirectionWithNSString:(NSString *)value {
  switch (JreIndexOfStr(value, (id[]){ @"dragUp", @"dragDown", @"dragLeft", @"dragRight", @"dragStart", @"dragEnd", @"dragClockwise", @"dragAnticlockwise" }, 8)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    case 5:
    return 5;
    case 6:
    return 6;
    case 7:
    return 7;
    default:
    break;
  }
  return 0;
}

- (jint)getWaveVariesByWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getWaveVariesByWithNSString_(self, value);
}

- (jint)getWaveShapeWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getWaveShapeWithNSString_(self, value);
}

- (void)parseConstraintWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseConstraintWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withOrgXmlSaxAttributes_(self, w, barrier, motion, propertySet, layoutParams, atts);
}

- (void)setOrientationWithASIWidget:(id<ASIWidget>)w
                     withADXBarrier:(ADXBarrier *)barrier
        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setOrientationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setVisibilityWithASIWidget:(id<ASIWidget>)w
                    withADXBarrier:(ADXBarrier *)barrier
       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (jint)getVisibilityModeWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getVisibilityModeWithNSString_(self, value);
}

- (void)setVisibilityModeWithASIWidget:(id<ASIWidget>)w
                        withADXBarrier:(ADXBarrier *)barrier
           withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
       withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setAlphaWithASIWidget:(id<ASIWidget>)w
               withADXBarrier:(ADXBarrier *)barrier
  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAlphaWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setElevationWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setElevationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setRotationWithASIWidget:(id<ASIWidget>)w
                  withADXBarrier:(ADXBarrier *)barrier
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setRotationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setRotationXWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setRotationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setRotationYWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setRotationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setScaleXWithASIWidget:(id<ASIWidget>)w
                withADXBarrier:(ADXBarrier *)barrier
   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setScaleXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setScaleYWithASIWidget:(id<ASIWidget>)w
                withADXBarrier:(ADXBarrier *)barrier
   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setScaleYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setWidthWithASIWidget:(id<ASIWidget>)w
               withADXBarrier:(ADXBarrier *)barrier
  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setHeightWithASIWidget:(id<ASIWidget>)w
                withADXBarrier:(ADXBarrier *)barrier
   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintWidthWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHeightWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginStartWithASIWidget:(id<ASIWidget>)w
                     withADXBarrier:(ADXBarrier *)barrier
        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginBottomWithASIWidget:(id<ASIWidget>)w
                      withADXBarrier:(ADXBarrier *)barrier
         withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
    withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
     withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginTopWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginEndWithASIWidget:(id<ASIWidget>)w
                   withADXBarrier:(ADXBarrier *)barrier
      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginLeftWithASIWidget:(id<ASIWidget>)w
                    withADXBarrier:(ADXBarrier *)barrier
       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginRightWithASIWidget:(id<ASIWidget>)w
                     withADXBarrier:(ADXBarrier *)barrier
        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintCircleWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintCircleRadiusWithASIWidget:(id<ASIWidget>)w
                                withADXBarrier:(ADXBarrier *)barrier
                   withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
              withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
               withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintCircleAngleWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintGuide_beginWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintGuide_endWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintGuide_percentWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintLeft_toLeftOfWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintLeft_toRightOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintRight_toLeftOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintRight_toRightOfWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintTop_toTopOfWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintTop_toBottomOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintBottom_toTopOfWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintBottom_toBottomOfWithASIWidget:(id<ASIWidget>)w
                                     withADXBarrier:(ADXBarrier *)barrier
                        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintBaseline_toBaselineOfWithASIWidget:(id<ASIWidget>)w
                                         withADXBarrier:(ADXBarrier *)barrier
                            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintBaseline_toTopOfWithASIWidget:(id<ASIWidget>)w
                                    withADXBarrier:(ADXBarrier *)barrier
                       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintBaseline_toBottomOfWithASIWidget:(id<ASIWidget>)w
                                       withADXBarrier:(ADXBarrier *)barrier
                          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintStart_toEndOfWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintStart_toStartOfWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintEnd_toStartOfWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintEnd_toEndOfWithASIWidget:(id<ASIWidget>)w
                               withADXBarrier:(ADXBarrier *)barrier
                  withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
             withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginLeftWithASIWidget:(id<ASIWidget>)w
                        withADXBarrier:(ADXBarrier *)barrier
           withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
       withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginTopWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginRightWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginBottomWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginStartWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginEndWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setGoneMarginBaselineWithASIWidget:(id<ASIWidget>)w
                            withADXBarrier:(ADXBarrier *)barrier
               withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
          withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
           withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                              withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMarginBaselineWithASIWidget:(id<ASIWidget>)w
                        withADXBarrier:(ADXBarrier *)barrier
           withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
       withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstrainedWidthWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstrainedHeightWithASIWidget:(id<ASIWidget>)w
                           withADXBarrier:(ADXBarrier *)barrier
              withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
         withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
          withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                             withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHorizontal_biasWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintVertical_biasWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintWidth_defaultWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHeight_defaultWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintWidth_minWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintWidth_maxWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintWidth_percentWithASIWidget:(id<ASIWidget>)w
                                 withADXBarrier:(ADXBarrier *)barrier
                    withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
               withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHeight_minWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHeight_maxWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHeight_percentWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintDimensionRatioWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHorizontal_weightWithASIWidget:(id<ASIWidget>)w
                                     withADXBarrier:(ADXBarrier *)barrier
                        withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                   withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                    withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintVertical_weightWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintHorizontal_chainStyleWithASIWidget:(id<ASIWidget>)w
                                         withADXBarrier:(ADXBarrier *)barrier
                            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintVertical_chainStyleWithASIWidget:(id<ASIWidget>)w
                                       withADXBarrier:(ADXBarrier *)barrier
                          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setEditor_absoluteXWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setEditor_absoluteYWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setWrapBehaviorInParentWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setBarrierDirectionWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setBarrierMarginWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraint_referenced_idsWithASIWidget:(id<ASIWidget>)w
                                   withADXBarrier:(ADXBarrier *)barrier
                      withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                 withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                  withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setBarrierAllowsGoneWidgetsWithASIWidget:(id<ASIWidget>)w
                                  withADXBarrier:(ADXBarrier *)barrier
                     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setAnimateRelativeToWithASIWidget:(id<ASIWidget>)w
                           withADXBarrier:(ADXBarrier *)barrier
              withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
         withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
          withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                             withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (jint)getAnimateCircleAngleToWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getAnimateCircleAngleToWithNSString_(self, value);
}

- (void)setAnimateCircleAngleToWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (jint)getTransitionEasingWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getTransitionEasingWithNSString_(self, value);
}

- (void)setTransitionEasingWithASIWidget:(id<ASIWidget>)w
                          withADXBarrier:(ADXBarrier *)barrier
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
        withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
         withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (jint)getPathMotionArcWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getPathMotionArcWithNSString_(self, value);
}

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setPolarRelativeToWithASIWidget:(id<ASIWidget>)w
                         withADXBarrier:(ADXBarrier *)barrier
            withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
       withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
        withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPolarRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (jint)getDrawPathWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getDrawPathWithNSString_(self, value);
}

- (void)setDrawPathWithASIWidget:(id<ASIWidget>)w
                  withADXBarrier:(ADXBarrier *)barrier
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
 withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setConstraintTagWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintTagWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setMotionStaggerWithASIWidget:(id<ASIWidget>)w
                       withADXBarrier:(ADXBarrier *)barrier
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
      withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setQuantizeMotionStepsWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setQuantizeMotionPhaseWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (jint)getQuantizeMotionInterpolatorWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getQuantizeMotionInterpolatorWithNSString_(self, value);
}

- (void)setEndMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
             withASIWidget:(id<ASIWidget>)w {
  ASMotionLayoutImpl_setEndMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

- (void)setLeftMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
              withASIWidget:(id<ASIWidget>)w {
  ASMotionLayoutImpl_setLeftMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

- (void)setRightMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
               withASIWidget:(id<ASIWidget>)w {
  ASMotionLayoutImpl_setRightMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

- (void)parseMotionWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseMotionWithASIWidget_withADXConstraintSet_Motion_withOrgXmlSaxAttributes_(self, w, motion, atts);
}

- (void)setAnimateRelativeToWithASIWidget:(id<ASIWidget>)w
              withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                             withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setAnimateCircleAngleToWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setTransitionEasingWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setMotionStaggerWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setDrawPathWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setQuantizeMotionStepsWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setQuantizeMotionPhaseWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)parseLayoutWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseLayoutWithASIWidget_withADXConstraintSet_Layout_withOrgXmlSaxAttributes_(self, w, layoutParams, atts);
}

- (void)setWidthWithASIWidget:(id<ASIWidget>)w
  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setHeightWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintWidthWithASIWidget:(id<ASIWidget>)w
            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHeightWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintCircleWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintCircleRadiusWithASIWidget:(id<ASIWidget>)w
                   withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintCircleAngleWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintGuide_beginWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintGuide_endWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintGuide_percentWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintLeft_toLeftOfWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintLeft_toRightOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintRight_toLeftOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintRight_toRightOfWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintTop_toTopOfWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintTop_toBottomOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintBottom_toTopOfWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintBottom_toBottomOfWithASIWidget:(id<ASIWidget>)w
                        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintBaseline_toBaselineOfWithASIWidget:(id<ASIWidget>)w
                            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintBaseline_toTopOfWithASIWidget:(id<ASIWidget>)w
                       withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintBaseline_toBottomOfWithASIWidget:(id<ASIWidget>)w
                          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintStart_toEndOfWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintStart_toStartOfWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintEnd_toStartOfWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintEnd_toEndOfWithASIWidget:(id<ASIWidget>)w
                  withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginLeftWithASIWidget:(id<ASIWidget>)w
           withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginTopWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginRightWithASIWidget:(id<ASIWidget>)w
            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginBottomWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginStartWithASIWidget:(id<ASIWidget>)w
            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginEndWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setGoneMarginBaselineWithASIWidget:(id<ASIWidget>)w
               withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                              withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setMarginBaselineWithASIWidget:(id<ASIWidget>)w
           withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstrainedWidthWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstrainedHeightWithASIWidget:(id<ASIWidget>)w
              withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                             withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHorizontal_biasWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintVertical_biasWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintWidth_defaultWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHeight_defaultWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintWidth_minWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintWidth_maxWithASIWidget:(id<ASIWidget>)w
                withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setOrientationWithASIWidget:(id<ASIWidget>)w
        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setOrientationWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintWidth_percentWithASIWidget:(id<ASIWidget>)w
                    withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHeight_minWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHeight_maxWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHeight_percentWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintDimensionRatioWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHorizontal_weightWithASIWidget:(id<ASIWidget>)w
                        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintVertical_weightWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintHorizontal_chainStyleWithASIWidget:(id<ASIWidget>)w
                            withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setConstraintVertical_chainStyleWithASIWidget:(id<ASIWidget>)w
                          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setEditor_absoluteXWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setEditor_absoluteYWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setWrapBehaviorInParentWithASIWidget:(id<ASIWidget>)w
                 withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (jint)getBarrierDirectionWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getBarrierDirectionWithNSString_(self, value);
}

- (void)setBarrierDirectionWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setBarrierMarginWithASIWidget:(id<ASIWidget>)w
          withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setBarrierAllowsGoneWidgetsWithASIWidget:(id<ASIWidget>)w
                     withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)parseTransformWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
            withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseTransformWithASIWidget_withADXConstraintSet_Transform_withOrgXmlSaxAttributes_(self, w, transform, atts);
}

- (void)setElevationWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setElevationWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setRotationWithASIWidget:(id<ASIWidget>)w
  withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setRotationWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setRotationXWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setRotationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setRotationYWithASIWidget:(id<ASIWidget>)w
   withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setRotationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setScaleXWithASIWidget:(id<ASIWidget>)w
withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setScaleXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setScaleYWithASIWidget:(id<ASIWidget>)w
withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setScaleYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
         withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
         withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, strValue);
}

- (void)parsePropertySetWithASIWidget:(id<ASIWidget>)w
     withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parsePropertySetWithASIWidget_withADXConstraintSet_PropertySet_withOrgXmlSaxAttributes_(self, w, propertySet, atts);
}

- (void)setVisibilityWithASIWidget:(id<ASIWidget>)w
  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(self, w, propertySet, strValue);
}

- (void)setVisibilityModeWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(self, w, propertySet, strValue);
}

- (void)setAlphaWithASIWidget:(id<ASIWidget>)w
withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAlphaWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(self, w, propertySet, strValue);
}

- (void)parseKeyPositionWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseKeyPositionWithASIWidget_withADXKeyPosition_withOrgXmlSaxAttributes_(self, w, keyPosition, atts);
}

- (jint)getKeyPositionTypeWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getKeyPositionTypeWithNSString_(self, value);
}

- (void)setPercentXWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)name
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPercentXWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, strValue);
}

- (void)setPercentYWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)name
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPercentYWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, strValue);
}

- (void)setPercentWidthWithASIWidget:(id<ASIWidget>)w
                  withADXKeyPosition:(ADXKeyPosition *)keyPosition
                        withNSString:(NSString *)name
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPercentWidthWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, strValue);
}

- (void)setPercentHeightWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
                         withNSString:(NSString *)name
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPercentHeightWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, strValue);
}

- (void)setTransitionEasingWithASIWidget:(id<ASIWidget>)w
                      withADXKeyPosition:(ADXKeyPosition *)keyPosition
                            withNSString:(NSString *)name
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, strValue);
}

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, strValue);
}

- (jint)getCurveFitWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getCurveFitWithNSString_(self, value);
}

- (void)setDrawPathWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)name
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, strValue);
}

- (void)parseTransitionWithASIWidget:(id<ASIWidget>)w
       withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseTransitionWithASIWidget_withADXMotionScene_Transition_withOrgXmlSaxAttributes_(self, w, transition, atts);
}

- (void)setConstraintSetStartWithASIWidget:(id<ASIWidget>)w
             withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                              withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintSetStartWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)setConstraintSetEndWithASIWidget:(id<ASIWidget>)w
           withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraintSetEndWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (jint)getLayoutDuringTransitionWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getLayoutDuringTransitionWithNSString_(self, value);
}

- (void)setLayoutDuringTransitionWithASIWidget:(id<ASIWidget>)w
                 withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                  withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setLayoutDuringTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)setPathMotionArcWithASIWidget:(id<ASIWidget>)w
        withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (jint)getAutoTransitionWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getAutoTransitionWithNSString_(self, value);
}

- (void)setAutoTransitionWithASIWidget:(id<ASIWidget>)w
         withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setAutoTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (jint)getMotionInterpolatorWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_getMotionInterpolatorWithNSString_(self, value);
}

- (void)setDurationWithASIWidget:(id<ASIWidget>)w
   withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setDurationWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)setTransitionFlagWithASIWidget:(id<ASIWidget>)w
         withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                          withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransitionFlagWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)parseKeyTriggerWithASIWidget:(id<ASIWidget>)w
                   withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASMotionLayoutImpl_parseKeyTriggerWithASIWidget_withADXKeyTrigger_withOrgXmlSaxAttributes_(self, w, keyTrigger, atts);
}

- (void)setQuantizeMotionInterpolatorWithASIWidget:(id<ASIWidget>)w
                       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setMotionPathRotateWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                            withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotionPathRotateWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, strValue);
}

- (void)setQuantizeMotionInterpolatorWithASIWidget:(id<ASIWidget>)w
                                    withADXBarrier:(ADXBarrier *)barrier
                       withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
                  withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
                   withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setTransitionPathRotateWithASIWidget:(id<ASIWidget>)w
                              withADXBarrier:(ADXBarrier *)barrier
                 withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
            withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
             withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransitionPathRotateWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setLayout_constraintHeightWithADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                                           withId:(id)objValue {
  ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraints_LayoutParams_withId_(self, layoutParams, objValue);
}

- (void)setLayout_constraintWidthWithADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                                                          withId:(id)objValue {
  ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraints_LayoutParams_withId_(self, layoutParams, objValue);
}

- (void)setStartMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
               withASIWidget:(id<ASIWidget>)w {
  ASMotionLayoutImpl_setStartMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

- (void)setBottomMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams {
  ASMotionLayoutImpl_setBottomMarginWithId_withADXConstraints_LayoutParams_(self, objValue, layoutParams);
}

- (void)setTopMarginWithId:(id)objValue
withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams {
  ASMotionLayoutImpl_setTopMarginWithId_withADXConstraints_LayoutParams_(self, objValue, layoutParams);
}

- (void)setMarginRightWithASIWidget:(id<ASIWidget>)w
        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setMarginLeftWithASIWidget:(id<ASIWidget>)w
       withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setMarginEndWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setMarginTopWithASIWidget:(id<ASIWidget>)w
      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setMarginBottomWithASIWidget:(id<ASIWidget>)w
         withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setMarginStartWithASIWidget:(id<ASIWidget>)w
        withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setLayout_constraintWidthWithADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                                      withId:(id)objValue {
  ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintSet_Layout_withId_(self, layoutParams, objValue);
}

- (void)setLayout_constraintHeightWithADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                                       withId:(id)objValue {
  ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintSet_Layout_withId_(self, layoutParams, objValue);
}

- (void)setConstraint_referenced_idsWithASIWidget:(id<ASIWidget>)w
                      withADXConstraintSet_Layout:(ADXConstraintSet_Layout *)layoutParams
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, strValue);
}

- (void)setSizePercentWithASIWidget:(id<ASIWidget>)w
                 withADXKeyPosition:(ADXKeyPosition *)keyPosition
                       withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setSizePercentWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, strValue);
}

- (void)setCurveFitWithASIWidget:(id<ASIWidget>)w
              withADXKeyPosition:(ADXKeyPosition *)keyPosition
                    withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setCurveFitWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, strValue);
}

- (void)setMotionTargetWithASIWidget:(id<ASIWidget>)w
                  withADXKeyPosition:(ADXKeyPosition *)keyPosition
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, strValue);
}

- (void)setFramePositionWithASIWidget:(id<ASIWidget>)w
                   withADXKeyPosition:(ADXKeyPosition *)keyPosition
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, strValue);
}

- (void)setKeyPositionTypeWithASIWidget:(id<ASIWidget>)w
                     withADXKeyPosition:(ADXKeyPosition *)keyPosition
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setKeyPositionTypeWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, strValue);
}

- (jint)getIdWithNSString:(NSString *)id_ {
  return ASMotionLayoutImpl_getIdWithNSString_(self, id_);
}

- (void)setStaggeredWithASIWidget:(id<ASIWidget>)w
    withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setStaggeredWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)setMotionInterpolatorWithASIWidget:(id<ASIWidget>)w
             withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                              withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotionInterpolatorWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)setTransitionDisableWithASIWidget:(id<ASIWidget>)w
            withADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                             withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTransitionDisableWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, strValue);
}

- (void)setMotion_triggerOnCollisionWithASIWidget:(id<ASIWidget>)w
                                withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotion_triggerOnCollisionWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setMotion_postLayoutCollisionWithASIWidget:(id<ASIWidget>)w
                                 withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                      withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotion_postLayoutCollisionWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setTriggerIdWithASIWidget:(id<ASIWidget>)w
                withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                     withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTriggerIdWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setTriggerSlackWithASIWidget:(id<ASIWidget>)w
                   withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTriggerSlackWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setViewTransitionOnCrossWithASIWidget:(id<ASIWidget>)w
                            withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                 withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setViewTransitionOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setViewTransitionOnPositiveCrossWithASIWidget:(id<ASIWidget>)w
                                    withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setViewTransitionOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setViewTransitionOnNegativeCrossWithASIWidget:(id<ASIWidget>)w
                                    withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setViewTransitionOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setOnCrossWithASIWidget:(id<ASIWidget>)w
              withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                   withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setOnPositiveCrossWithASIWidget:(id<ASIWidget>)w
                      withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setOnNegativeCrossWithASIWidget:(id<ASIWidget>)w
                      withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setTriggerReceiverWithASIWidget:(id<ASIWidget>)w
                      withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                           withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setTriggerReceiverWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setMotionTargetWithASIWidget:(id<ASIWidget>)w
                   withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                        withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setFramePositionWithASIWidget:(id<ASIWidget>)w
                    withADXKeyTrigger:(ADXKeyTrigger *)keyTrigger
                         withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, strValue);
}

- (void)setElevationAdditionalWithASIWidget:(id<ASIWidget>)w
                             withADXBarrier:(ADXBarrier *)barrier
                withADXConstraintSet_Motion:(ADXConstraintSet_Motion *)motion
           withADXConstraintSet_PropertySet:(ADXConstraintSet_PropertySet *)propertySet
            withADXConstraints_LayoutParams:(ADXConstraints_LayoutParams *)layoutParams
                               withNSString:(NSString *)strValue {
  ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, strValue);
}

- (void)setElevationAdditionalWithASIWidget:(id<ASIWidget>)w
             withADXConstraintSet_Transform:(ADXConstraintSet_Transform *)transform
                               withNSString:(NSString *)value {
  ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
}

- (void)processTouchEventWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                               withInt:(jint)event
                                               withInt:(jint)clientX
                                               withInt:(jint)clientY {
  ASMotionLayoutImpl_processTouchEventWithADXMotionScene_Transition_withInt_withInt_withInt_(self, transition, event, clientX, clientY);
}

- (void)setReduceFlickerWithBoolean:(jboolean)flag {
  ASMotionLayoutImpl_setReduceFlickerWithBoolean_(self, flag);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASMotionLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ == nil) {
    id_ = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
  }
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXMotionLayout *) nil_chk(motionLayout_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)nativeAddOnSwipeWithADXMotionScene_Transition:(ADXMotionScene_Transition *)transition
                                        withASIWidget:(id<ASIWidget>)widget {
  ASMotionLayoutImpl_nativeAddOnSwipeWithADXMotionScene_Transition_withASIWidget_(self, transition, widget);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXConstraintLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 32, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 36, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 37, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 38, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 39, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 45, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 94, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 97, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 99, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 100, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 104, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 107, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 109, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 111, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 113, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 114, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 115, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 116, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 117, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 119, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 120, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 122, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 123, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 124, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 125, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 126, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 127, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 128, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 129, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 130, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 131, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 132, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 133, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 134, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 135, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 136, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 137, 138, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 139, 138, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 140, 138, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 141, 142, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 122, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 124, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 126, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 128, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 133, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 131, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 134, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 135, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 144, 145, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 94, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 97, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 99, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 100, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 104, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 107, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 109, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 111, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 113, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 114, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 115, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 116, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 117, 146, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 147, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 119, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 148, 149, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 151, 152, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 153, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 153, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 153, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 154, 155, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 156, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 157, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 159, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 160, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 161, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 126, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 128, 162, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 163, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 131, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 164, 165, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 166, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 168, 167, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 169, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 170, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 128, 167, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 171, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 172, 167, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 173, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 174, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 175, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 176, 177, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 178, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 179, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 178, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 180, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 181, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 181, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 182, 138, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 183, 184, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 185, 184, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 186, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 186, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 120, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 187, 162, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 188, 162, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 189, 162, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 190, 162, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 191, 162, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 192, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 193, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 194, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 195, 167, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 196, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 198, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 199, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 200, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 201, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 202, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 203, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 204, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 205, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 206, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 207, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 189, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 190, 197, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 208, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 208, 150, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 209, 210, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 211, 212, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 213, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 214, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 215, 212, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 216, 217, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addDellocHandler);
  methods[1].selector = @selector(loadAttributesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(removeWithASIWidget:);
  methods[10].selector = @selector(removeWithInt:);
  methods[11].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[12].selector = @selector(addWithASIWidget:withInt:);
  methods[13].selector = @selector(createLayoutParamsWithADView:);
  methods[14].selector = @selector(getLayoutParamsWithADView:);
  methods[15].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[16].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[17].selector = @selector(getViewClass);
  methods[18].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[19].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[20].selector = @selector(asNativeWidget);
  methods[21].selector = @selector(checkIosVersionWithNSString:);
  methods[22].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[23].selector = @selector(requestLayout);
  methods[24].selector = @selector(invalidate);
  methods[25].selector = @selector(setLayout_constraintHeightWithADXConstraintLayout_LayoutParams:withId:);
  methods[26].selector = @selector(setLayout_constraintWidthWithADXConstraintLayout_LayoutParams:withId:);
  methods[27].selector = @selector(getLayout_constraintHeightWithADXConstraintLayout_LayoutParams:);
  methods[28].selector = @selector(getLayout_constraintWidthWithADXConstraintLayout_LayoutParams:);
  methods[29].selector = @selector(setOptimizationLevelWithId:);
  methods[30].selector = @selector(getOptimizationLevel);
  methods[31].selector = @selector(setLayoutDescriptionWithId:);
  methods[32].selector = @selector(initialized);
  methods[33].selector = @selector(getFirstTransitionId);
  methods[34].selector = @selector(getTouchAnchorSideWithNSString:);
  methods[35].selector = @selector(getDragDirectionWithNSString:);
  methods[36].selector = @selector(getWaveVariesByWithNSString:);
  methods[37].selector = @selector(getWaveShapeWithNSString:);
  methods[38].selector = @selector(parseConstraintWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withOrgXmlSaxAttributes:);
  methods[39].selector = @selector(setOrientationWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[40].selector = @selector(setVisibilityWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[41].selector = @selector(getVisibilityModeWithNSString:);
  methods[42].selector = @selector(setVisibilityModeWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[43].selector = @selector(setAlphaWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[44].selector = @selector(setElevationWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[45].selector = @selector(setRotationWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[46].selector = @selector(setRotationXWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[47].selector = @selector(setRotationYWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[48].selector = @selector(setScaleXWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[49].selector = @selector(setScaleYWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[50].selector = @selector(setTransformPivotXWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[51].selector = @selector(setTransformPivotYWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[52].selector = @selector(setTranslationXWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[53].selector = @selector(setTranslationYWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[54].selector = @selector(setTranslationZWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[55].selector = @selector(setWidthWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[56].selector = @selector(setHeightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[57].selector = @selector(setConstraintWidthWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[58].selector = @selector(setConstraintHeightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[59].selector = @selector(setMarginStartWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[60].selector = @selector(setMarginBottomWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[61].selector = @selector(setMarginTopWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[62].selector = @selector(setMarginEndWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[63].selector = @selector(setMarginLeftWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[64].selector = @selector(setMarginRightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[65].selector = @selector(setConstraintCircleWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[66].selector = @selector(setConstraintCircleRadiusWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[67].selector = @selector(setConstraintCircleAngleWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[68].selector = @selector(setConstraintGuide_beginWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[69].selector = @selector(setConstraintGuide_endWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[70].selector = @selector(setConstraintGuide_percentWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[71].selector = @selector(setConstraintLeft_toLeftOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[72].selector = @selector(setConstraintLeft_toRightOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[73].selector = @selector(setConstraintRight_toLeftOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[74].selector = @selector(setConstraintRight_toRightOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[75].selector = @selector(setConstraintTop_toTopOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[76].selector = @selector(setConstraintTop_toBottomOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[77].selector = @selector(setConstraintBottom_toTopOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[78].selector = @selector(setConstraintBottom_toBottomOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[79].selector = @selector(setConstraintBaseline_toBaselineOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[80].selector = @selector(setConstraintBaseline_toTopOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[81].selector = @selector(setConstraintBaseline_toBottomOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[82].selector = @selector(setConstraintStart_toEndOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[83].selector = @selector(setConstraintStart_toStartOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[84].selector = @selector(setConstraintEnd_toStartOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[85].selector = @selector(setConstraintEnd_toEndOfWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[86].selector = @selector(setGoneMarginLeftWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[87].selector = @selector(setGoneMarginTopWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[88].selector = @selector(setGoneMarginRightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[89].selector = @selector(setGoneMarginBottomWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[90].selector = @selector(setGoneMarginStartWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[91].selector = @selector(setGoneMarginEndWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[92].selector = @selector(setGoneMarginBaselineWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[93].selector = @selector(setMarginBaselineWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[94].selector = @selector(setConstrainedWidthWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[95].selector = @selector(setConstrainedHeightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[96].selector = @selector(setConstraintHorizontal_biasWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[97].selector = @selector(setConstraintVertical_biasWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[98].selector = @selector(setConstraintWidth_defaultWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[99].selector = @selector(setConstraintHeight_defaultWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[100].selector = @selector(setConstraintWidth_minWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[101].selector = @selector(setConstraintWidth_maxWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[102].selector = @selector(setConstraintWidth_percentWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[103].selector = @selector(setConstraintHeight_minWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[104].selector = @selector(setConstraintHeight_maxWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[105].selector = @selector(setConstraintHeight_percentWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[106].selector = @selector(setConstraintDimensionRatioWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[107].selector = @selector(setConstraintHorizontal_weightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[108].selector = @selector(setConstraintVertical_weightWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[109].selector = @selector(setConstraintHorizontal_chainStyleWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[110].selector = @selector(setConstraintVertical_chainStyleWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[111].selector = @selector(setEditor_absoluteXWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[112].selector = @selector(setEditor_absoluteYWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[113].selector = @selector(setWrapBehaviorInParentWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[114].selector = @selector(setBarrierDirectionWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[115].selector = @selector(setBarrierMarginWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[116].selector = @selector(setConstraint_referenced_idsWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[117].selector = @selector(setBarrierAllowsGoneWidgetsWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[118].selector = @selector(setAnimateRelativeToWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[119].selector = @selector(getAnimateCircleAngleToWithNSString:);
  methods[120].selector = @selector(setAnimateCircleAngleToWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[121].selector = @selector(getTransitionEasingWithNSString:);
  methods[122].selector = @selector(setTransitionEasingWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[123].selector = @selector(getPathMotionArcWithNSString:);
  methods[124].selector = @selector(setPathMotionArcWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[125].selector = @selector(setPolarRelativeToWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[126].selector = @selector(getDrawPathWithNSString:);
  methods[127].selector = @selector(setDrawPathWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[128].selector = @selector(setConstraintTagWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[129].selector = @selector(setMotionStaggerWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[130].selector = @selector(setQuantizeMotionStepsWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[131].selector = @selector(setQuantizeMotionPhaseWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[132].selector = @selector(getQuantizeMotionInterpolatorWithNSString:);
  methods[133].selector = @selector(setEndMarginWithId:withADXConstraints_LayoutParams:withASIWidget:);
  methods[134].selector = @selector(setLeftMarginWithId:withADXConstraints_LayoutParams:withASIWidget:);
  methods[135].selector = @selector(setRightMarginWithId:withADXConstraints_LayoutParams:withASIWidget:);
  methods[136].selector = @selector(parseMotionWithASIWidget:withADXConstraintSet_Motion:withOrgXmlSaxAttributes:);
  methods[137].selector = @selector(setAnimateRelativeToWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[138].selector = @selector(setAnimateCircleAngleToWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[139].selector = @selector(setTransitionEasingWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[140].selector = @selector(setPathMotionArcWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[141].selector = @selector(setMotionStaggerWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[142].selector = @selector(setDrawPathWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[143].selector = @selector(setQuantizeMotionStepsWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[144].selector = @selector(setQuantizeMotionPhaseWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[145].selector = @selector(parseLayoutWithASIWidget:withADXConstraintSet_Layout:withOrgXmlSaxAttributes:);
  methods[146].selector = @selector(setWidthWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[147].selector = @selector(setHeightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[148].selector = @selector(setConstraintWidthWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[149].selector = @selector(setConstraintHeightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[150].selector = @selector(setConstraintCircleWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[151].selector = @selector(setConstraintCircleRadiusWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[152].selector = @selector(setConstraintCircleAngleWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[153].selector = @selector(setConstraintGuide_beginWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[154].selector = @selector(setConstraintGuide_endWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[155].selector = @selector(setConstraintGuide_percentWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[156].selector = @selector(setConstraintLeft_toLeftOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[157].selector = @selector(setConstraintLeft_toRightOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[158].selector = @selector(setConstraintRight_toLeftOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[159].selector = @selector(setConstraintRight_toRightOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[160].selector = @selector(setConstraintTop_toTopOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[161].selector = @selector(setConstraintTop_toBottomOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[162].selector = @selector(setConstraintBottom_toTopOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[163].selector = @selector(setConstraintBottom_toBottomOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[164].selector = @selector(setConstraintBaseline_toBaselineOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[165].selector = @selector(setConstraintBaseline_toTopOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[166].selector = @selector(setConstraintBaseline_toBottomOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[167].selector = @selector(setConstraintStart_toEndOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[168].selector = @selector(setConstraintStart_toStartOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[169].selector = @selector(setConstraintEnd_toStartOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[170].selector = @selector(setConstraintEnd_toEndOfWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[171].selector = @selector(setGoneMarginLeftWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[172].selector = @selector(setGoneMarginTopWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[173].selector = @selector(setGoneMarginRightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[174].selector = @selector(setGoneMarginBottomWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[175].selector = @selector(setGoneMarginStartWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[176].selector = @selector(setGoneMarginEndWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[177].selector = @selector(setGoneMarginBaselineWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[178].selector = @selector(setMarginBaselineWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[179].selector = @selector(setConstrainedWidthWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[180].selector = @selector(setConstrainedHeightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[181].selector = @selector(setConstraintHorizontal_biasWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[182].selector = @selector(setConstraintVertical_biasWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[183].selector = @selector(setConstraintWidth_defaultWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[184].selector = @selector(setConstraintHeight_defaultWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[185].selector = @selector(setConstraintWidth_minWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[186].selector = @selector(setConstraintWidth_maxWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[187].selector = @selector(setOrientationWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[188].selector = @selector(setConstraintWidth_percentWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[189].selector = @selector(setConstraintHeight_minWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[190].selector = @selector(setConstraintHeight_maxWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[191].selector = @selector(setConstraintHeight_percentWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[192].selector = @selector(setConstraintDimensionRatioWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[193].selector = @selector(setConstraintHorizontal_weightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[194].selector = @selector(setConstraintVertical_weightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[195].selector = @selector(setConstraintHorizontal_chainStyleWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[196].selector = @selector(setConstraintVertical_chainStyleWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[197].selector = @selector(setEditor_absoluteXWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[198].selector = @selector(setEditor_absoluteYWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[199].selector = @selector(setWrapBehaviorInParentWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[200].selector = @selector(getBarrierDirectionWithNSString:);
  methods[201].selector = @selector(setBarrierDirectionWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[202].selector = @selector(setBarrierMarginWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[203].selector = @selector(setBarrierAllowsGoneWidgetsWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[204].selector = @selector(parseTransformWithASIWidget:withADXConstraintSet_Transform:withOrgXmlSaxAttributes:);
  methods[205].selector = @selector(setElevationWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[206].selector = @selector(setRotationWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[207].selector = @selector(setRotationXWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[208].selector = @selector(setRotationYWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[209].selector = @selector(setScaleXWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[210].selector = @selector(setScaleYWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[211].selector = @selector(setTransformPivotXWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[212].selector = @selector(setTransformPivotYWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[213].selector = @selector(setTranslationXWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[214].selector = @selector(setTranslationYWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[215].selector = @selector(setTranslationZWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[216].selector = @selector(parsePropertySetWithASIWidget:withADXConstraintSet_PropertySet:withOrgXmlSaxAttributes:);
  methods[217].selector = @selector(setVisibilityWithASIWidget:withADXConstraintSet_PropertySet:withNSString:);
  methods[218].selector = @selector(setVisibilityModeWithASIWidget:withADXConstraintSet_PropertySet:withNSString:);
  methods[219].selector = @selector(setAlphaWithASIWidget:withADXConstraintSet_PropertySet:withNSString:);
  methods[220].selector = @selector(parseKeyPositionWithASIWidget:withADXKeyPosition:withOrgXmlSaxAttributes:);
  methods[221].selector = @selector(getKeyPositionTypeWithNSString:);
  methods[222].selector = @selector(setPercentXWithASIWidget:withADXKeyPosition:withNSString:withNSString:);
  methods[223].selector = @selector(setPercentYWithASIWidget:withADXKeyPosition:withNSString:withNSString:);
  methods[224].selector = @selector(setPercentWidthWithASIWidget:withADXKeyPosition:withNSString:withNSString:);
  methods[225].selector = @selector(setPercentHeightWithASIWidget:withADXKeyPosition:withNSString:withNSString:);
  methods[226].selector = @selector(setTransitionEasingWithASIWidget:withADXKeyPosition:withNSString:withNSString:);
  methods[227].selector = @selector(setPathMotionArcWithASIWidget:withADXKeyPosition:withNSString:);
  methods[228].selector = @selector(getCurveFitWithNSString:);
  methods[229].selector = @selector(setDrawPathWithASIWidget:withADXKeyPosition:withNSString:withNSString:);
  methods[230].selector = @selector(parseTransitionWithASIWidget:withADXMotionScene_Transition:withOrgXmlSaxAttributes:);
  methods[231].selector = @selector(setConstraintSetStartWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[232].selector = @selector(setConstraintSetEndWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[233].selector = @selector(getLayoutDuringTransitionWithNSString:);
  methods[234].selector = @selector(setLayoutDuringTransitionWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[235].selector = @selector(setPathMotionArcWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[236].selector = @selector(getAutoTransitionWithNSString:);
  methods[237].selector = @selector(setAutoTransitionWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[238].selector = @selector(getMotionInterpolatorWithNSString:);
  methods[239].selector = @selector(setDurationWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[240].selector = @selector(setTransitionFlagWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[241].selector = @selector(parseKeyTriggerWithASIWidget:withADXKeyTrigger:withOrgXmlSaxAttributes:);
  methods[242].selector = @selector(setQuantizeMotionInterpolatorWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[243].selector = @selector(setMotionPathRotateWithASIWidget:withADXConstraintSet_Motion:withNSString:);
  methods[244].selector = @selector(setQuantizeMotionInterpolatorWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[245].selector = @selector(setTransitionPathRotateWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[246].selector = @selector(setLayout_constraintHeightWithADXConstraints_LayoutParams:withId:);
  methods[247].selector = @selector(setLayout_constraintWidthWithADXConstraints_LayoutParams:withId:);
  methods[248].selector = @selector(setStartMarginWithId:withADXConstraints_LayoutParams:withASIWidget:);
  methods[249].selector = @selector(setBottomMarginWithId:withADXConstraints_LayoutParams:);
  methods[250].selector = @selector(setTopMarginWithId:withADXConstraints_LayoutParams:);
  methods[251].selector = @selector(setMarginRightWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[252].selector = @selector(setMarginLeftWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[253].selector = @selector(setMarginEndWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[254].selector = @selector(setMarginTopWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[255].selector = @selector(setMarginBottomWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[256].selector = @selector(setMarginStartWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[257].selector = @selector(setLayout_constraintWidthWithADXConstraintSet_Layout:withId:);
  methods[258].selector = @selector(setLayout_constraintHeightWithADXConstraintSet_Layout:withId:);
  methods[259].selector = @selector(setConstraint_referenced_idsWithASIWidget:withADXConstraintSet_Layout:withNSString:);
  methods[260].selector = @selector(setSizePercentWithASIWidget:withADXKeyPosition:withNSString:);
  methods[261].selector = @selector(setCurveFitWithASIWidget:withADXKeyPosition:withNSString:);
  methods[262].selector = @selector(setMotionTargetWithASIWidget:withADXKeyPosition:withNSString:);
  methods[263].selector = @selector(setFramePositionWithASIWidget:withADXKeyPosition:withNSString:);
  methods[264].selector = @selector(setKeyPositionTypeWithASIWidget:withADXKeyPosition:withNSString:);
  methods[265].selector = @selector(getIdWithNSString:);
  methods[266].selector = @selector(setStaggeredWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[267].selector = @selector(setMotionInterpolatorWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[268].selector = @selector(setTransitionDisableWithASIWidget:withADXMotionScene_Transition:withNSString:);
  methods[269].selector = @selector(setMotion_triggerOnCollisionWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[270].selector = @selector(setMotion_postLayoutCollisionWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[271].selector = @selector(setTriggerIdWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[272].selector = @selector(setTriggerSlackWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[273].selector = @selector(setViewTransitionOnCrossWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[274].selector = @selector(setViewTransitionOnPositiveCrossWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[275].selector = @selector(setViewTransitionOnNegativeCrossWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[276].selector = @selector(setOnCrossWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[277].selector = @selector(setOnPositiveCrossWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[278].selector = @selector(setOnNegativeCrossWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[279].selector = @selector(setTriggerReceiverWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[280].selector = @selector(setMotionTargetWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[281].selector = @selector(setFramePositionWithASIWidget:withADXKeyTrigger:withNSString:);
  methods[282].selector = @selector(setElevationAdditionalWithASIWidget:withADXBarrier:withADXConstraintSet_Motion:withADXConstraintSet_PropertySet:withADXConstraints_LayoutParams:withNSString:);
  methods[283].selector = @selector(setElevationAdditionalWithASIWidget:withADXConstraintSet_Transform:withNSString:);
  methods[284].selector = @selector(processTouchEventWithADXMotionScene_Transition:withInt:withInt:withInt:);
  methods[285].selector = @selector(setReduceFlickerWithBoolean:);
  methods[286].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[287].selector = @selector(setIdWithNSString:);
  methods[288].selector = @selector(setVisibleWithBoolean:);
  methods[289].selector = @selector(nativeAddOnSwipeWithADXMotionScene_Transition:withASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 218, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 219, -1, -1 },
    { "motionLayout_", "LADXMotionLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DELLOC_EVENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 220, -1, -1 },
    { "constraintId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyFrames_", "LADXKeyFrames;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "idCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "layoutDescription_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "motionEvent_", "LADMotionEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setLayout_constraintHeight", "LADXConstraintLayout_LayoutParams;LNSObject;", "setLayout_constraintWidth", "getLayout_constraintHeight", "LADXConstraintLayout_LayoutParams;", "getLayout_constraintWidth", "setOptimizationLevel", "LNSObject;", "setLayoutDescription", "getTouchAnchorSide", "getDragDirection", "getWaveVariesBy", "getWaveShape", "parseConstraint", "LASIWidget;LADXBarrier;LADXConstraintSet_Motion;LADXConstraintSet_PropertySet;LADXConstraints_LayoutParams;LOrgXmlSaxAttributes;", "setOrientation", "LASIWidget;LADXBarrier;LADXConstraintSet_Motion;LADXConstraintSet_PropertySet;LADXConstraints_LayoutParams;LNSString;", "setVisibility", "getVisibilityMode", "setVisibilityMode", "setAlpha", "setElevation", "setRotation", "setRotationX", "setRotationY", "setScaleX", "setScaleY", "setTransformPivotX", "setTransformPivotY", "setTranslationX", "setTranslationY", "setTranslationZ", "setWidth", "setHeight", "setConstraintWidth", "setConstraintHeight", "setMarginStart", "setMarginBottom", "setMarginTop", "setMarginEnd", "setMarginLeft", "setMarginRight", "setConstraintCircle", "setConstraintCircleRadius", "setConstraintCircleAngle", "setConstraintGuide_begin", "setConstraintGuide_end", "setConstraintGuide_percent", "setConstraintLeft_toLeftOf", "setConstraintLeft_toRightOf", "setConstraintRight_toLeftOf", "setConstraintRight_toRightOf", "setConstraintTop_toTopOf", "setConstraintTop_toBottomOf", "setConstraintBottom_toTopOf", "setConstraintBottom_toBottomOf", "setConstraintBaseline_toBaselineOf", "setConstraintBaseline_toTopOf", "setConstraintBaseline_toBottomOf", "setConstraintStart_toEndOf", "setConstraintStart_toStartOf", "setConstraintEnd_toStartOf", "setConstraintEnd_toEndOf", "setGoneMarginLeft", "setGoneMarginTop", "setGoneMarginRight", "setGoneMarginBottom", "setGoneMarginStart", "setGoneMarginEnd", "setGoneMarginBaseline", "setMarginBaseline", "setConstrainedWidth", "setConstrainedHeight", "setConstraintHorizontal_bias", "setConstraintVertical_bias", "setConstraintWidth_default", "setConstraintHeight_default", "setConstraintWidth_min", "setConstraintWidth_max", "setConstraintWidth_percent", "setConstraintHeight_min", "setConstraintHeight_max", "setConstraintHeight_percent", "setConstraintDimensionRatio", "setConstraintHorizontal_weight", "setConstraintVertical_weight", "setConstraintHorizontal_chainStyle", "setConstraintVertical_chainStyle", "setEditor_absoluteX", "setEditor_absoluteY", "setWrapBehaviorInParent", "setBarrierDirection", "setBarrierMargin", "setConstraint_referenced_ids", "setBarrierAllowsGoneWidgets", "setAnimateRelativeTo", "getAnimateCircleAngleTo", "setAnimateCircleAngleTo", "getTransitionEasing", "setTransitionEasing", "getPathMotionArc", "setPathMotionArc", "setPolarRelativeTo", "getDrawPath", "setDrawPath", "setConstraintTag", "setMotionStagger", "setQuantizeMotionSteps", "setQuantizeMotionPhase", "getQuantizeMotionInterpolator", "setEndMargin", "LNSObject;LADXConstraints_LayoutParams;LASIWidget;", "setLeftMargin", "setRightMargin", "parseMotion", "LASIWidget;LADXConstraintSet_Motion;LOrgXmlSaxAttributes;", "LASIWidget;LADXConstraintSet_Motion;LNSString;", "parseLayout", "LASIWidget;LADXConstraintSet_Layout;LOrgXmlSaxAttributes;", "LASIWidget;LADXConstraintSet_Layout;LNSString;", "getBarrierDirection", "parseTransform", "LASIWidget;LADXConstraintSet_Transform;LOrgXmlSaxAttributes;", "LASIWidget;LADXConstraintSet_Transform;LNSString;", "parsePropertySet", "LASIWidget;LADXConstraintSet_PropertySet;LOrgXmlSaxAttributes;", "LASIWidget;LADXConstraintSet_PropertySet;LNSString;", "parseKeyPosition", "LASIWidget;LADXKeyPosition;LOrgXmlSaxAttributes;", "getKeyPositionType", "setPercentX", "LASIWidget;LADXKeyPosition;LNSString;LNSString;", "setPercentY", "setPercentWidth", "setPercentHeight", "LASIWidget;LADXKeyPosition;LNSString;", "getCurveFit", "parseTransition", "LASIWidget;LADXMotionScene_Transition;LOrgXmlSaxAttributes;", "setConstraintSetStart", "LASIWidget;LADXMotionScene_Transition;LNSString;", "setConstraintSetEnd", "getLayoutDuringTransition", "setLayoutDuringTransition", "getAutoTransition", "setAutoTransition", "getMotionInterpolator", "setDuration", "setTransitionFlag", "parseKeyTrigger", "LASIWidget;LADXKeyTrigger;LOrgXmlSaxAttributes;", "setQuantizeMotionInterpolator", "setMotionPathRotate", "setTransitionPathRotate", "LADXConstraints_LayoutParams;LNSObject;", "setStartMargin", "setBottomMargin", "LNSObject;LADXConstraints_LayoutParams;", "setTopMargin", "LADXConstraintSet_Layout;LNSObject;", "setSizePercent", "setCurveFit", "setMotionTarget", "setFramePosition", "setKeyPositionType", "getId", "setStaggered", "setMotionInterpolator", "setTransitionDisable", "setMotion_triggerOnCollision", "LASIWidget;LADXKeyTrigger;LNSString;", "setMotion_postLayoutCollision", "setTriggerId", "setTriggerSlack", "setViewTransitionOnCross", "setViewTransitionOnPositiveCross", "setViewTransitionOnNegativeCross", "setOnCross", "setOnPositiveCross", "setOnNegativeCross", "setTriggerReceiver", "setElevationAdditional", "processTouchEvent", "LADXMotionScene_Transition;III", "setReduceFlicker", "Z", "postSetAttribute", "setId", "setVisible", "nativeAddOnSwipe", "LADXMotionScene_Transition;LASIWidget;", &ASMotionLayoutImpl_LOCAL_NAME, &ASMotionLayoutImpl_GROUP_NAME, &ASMotionLayoutImpl_DELLOC_EVENT, "LASMotionLayoutImpl_DallocHandler;LASMotionLayoutImpl_OptimizationLevel;LASMotionLayoutImpl_Orientation;LASMotionLayoutImpl_Layout_constraintWidth;LASMotionLayoutImpl_Layout_constraintHeight;LASMotionLayoutImpl_Layout_constraintWidth_default;LASMotionLayoutImpl_Layout_constraintHeight_default;LASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle;LASMotionLayoutImpl_Layout_constraintVertical_chainStyle;LASMotionLayoutImpl_Layout_wrapBehaviorInParent;LASMotionLayoutImpl_MotionLayoutExt;LASMotionLayoutImpl_TransitionFlagsConverter;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl = { "MotionLayoutImpl", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 290, 11, -1, 221, -1, -1, -1 };
  return &_ASMotionLayoutImpl;
}

+ (void)initialize {
  if (self == [ASMotionLayoutImpl class]) {
    ASMotionLayoutImpl_DELLOC_EVENT = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    {
      ASConverterFactory_register__WithNSString_withASIConverter_(@"transitionFlags.flag", new_ASMotionLayoutImpl_TransitionFlagsConverter_init());
    }
    J2OBJC_SET_INITIALIZED(ASMotionLayoutImpl)
  }
}

@end

void ASMotionLayoutImpl_addDellocHandler(ASMotionLayoutImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:ASMotionLayoutImpl_DELLOC_EVENT withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASMotionLayoutImpl_DallocHandler_initWithASMotionLayoutImpl_withNSString_(self, ASMotionLayoutImpl_DELLOC_EVENT) } count:1 type:ASEventBusHandler_class_()]];
}

void ASMotionLayoutImpl_init(ASMotionLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASMotionLayoutImpl_GROUP_NAME, ASMotionLayoutImpl_LOCAL_NAME);
  self->constraintId_ = -1;
  self->idCounter_ = 0;
  self->motionEvent_ = new_ADMotionEvent_init();
}

ASMotionLayoutImpl *new_ASMotionLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl, init)
}

ASMotionLayoutImpl *create_ASMotionLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl, init)
}

void ASMotionLayoutImpl_initWithNSString_(ASMotionLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASMotionLayoutImpl_GROUP_NAME, localname);
  self->constraintId_ = -1;
  self->idCounter_ = 0;
  self->motionEvent_ = new_ADMotionEvent_init();
}

ASMotionLayoutImpl *new_ASMotionLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl, initWithNSString_, localname)
}

ASMotionLayoutImpl *create_ASMotionLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl, initWithNSString_, localname)
}

void ASMotionLayoutImpl_initWithNSString_withNSString_(ASMotionLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->constraintId_ = -1;
  self->idCounter_ = 0;
  self->motionEvent_ = new_ADMotionEvent_init();
}

ASMotionLayoutImpl *new_ASMotionLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASMotionLayoutImpl *create_ASMotionLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASMotionLayoutImpl_setWidgetOnNativeClass(ASMotionLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASMotionLayoutImpl_nativeRemoveViewWithASIWidget_(ASMotionLayoutImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXMotionLayout *) nil_chk(self->motionLayout_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASMotionLayoutImpl_createLayoutParamsWithADView_(ASMotionLayoutImpl *self, ADView *view) {
  ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXConstraintLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXConstraintLayout_LayoutParams *ASMotionLayoutImpl_getLayoutParamsWithADView_(ASMotionLayoutImpl *self, ADView *view) {
  return (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
}

void ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue) {
  ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  layoutParams->constrainedHeight_ = true;
}

void ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue) {
  ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  layoutParams->constrainedWidth_ = true;
}

id ASMotionLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams) {
  return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_);
}

id ASMotionLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(ASMotionLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams) {
  return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_);
}

void ASMotionLayoutImpl_setOptimizationLevelWithId_(ASMotionLayoutImpl *self, id objValue) {
  [((ADXMotionLayout *) nil_chk(self->motionLayout_)) setOptimizationLevelWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASMotionLayoutImpl_getOptimizationLevel(ASMotionLayoutImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXMotionLayout *) nil_chk(self->motionLayout_)) getOptimizationLevel]);
}

void ASMotionLayoutImpl_setLayoutDescriptionWithId_(ASMotionLayoutImpl *self, id objValue) {
  self->layoutDescription_ = (NSString *) cast_chk(objValue, [NSString class]);
  @try {
    [((ADXMotionLayout *) nil_chk(self->motionLayout_)) setSceneWithADXMotionScene:new_ADXMotionScene_initWithADXMotionLayout_(self->motionLayout_)];
  }
  @catch (JavaLangException *e) {
  }
  NSString *html = [((id<ASIFragment>) nil_chk(self->fragment_)) getInlineResourceWithNSString:self->layoutDescription_];
  if (html == nil) {
    html = ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(JreStrcat("$$$", @"res_", [((NSString *) nil_chk(((NSString *) cast_chk(objValue, [NSString class])))) java_replace:@"@" withSequence:@""], @".xml"), self->fragment_);
  }
  ASHtmlParser_parseWithOrgXmlSaxContentHandler_withNSString_(new_ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(self), html);
  if (![self isInitialised]) {
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getEventBus])) notifyObserversWithNSString:@"layoutDescription" withId:new_NSObject_init()];
  }
}

jint ASMotionLayoutImpl_getFirstTransitionId(ASMotionLayoutImpl *self) {
  JavaUtilArrayList *definedTransitions = [((ADXMotionScene *) nil_chk([((ADXMotionLayout *) nil_chk(self->motionLayout_)) getScene])) getDefinedTransitions];
  if ([((JavaUtilArrayList *) nil_chk(definedTransitions)) size] > 0) {
    return [((ADXMotionScene_Transition *) nil_chk([definedTransitions getWithInt:0])) getId];
  }
  return -1;
}

jint ASMotionLayoutImpl_getWaveVariesByWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"position", @"path" }, 2)) {
    case 0:
    return 0;
    case 1:
    return 1;
    default:
    break;
  }
  return 0;
}

jint ASMotionLayoutImpl_getWaveShapeWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"sin", @"square", @"triangle", @"sawtooth", @"reverseSawtooth", @"cos", @"bounce" }, 7)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    case 5:
    return 5;
    case 6:
    return 6;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_parseConstraintWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"orientation", @"visibility", @"visibilityMode", @"alpha", @"elevation", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY", @"translationX", @"translationY", @"translationZ", @"layout_width", @"layout_height", @"layout_constraintWidth", @"layout_constraintHeight", @"layout_marginStart", @"layout_marginBottom", @"layout_marginTop", @"layout_marginEnd", @"layout_marginLeft", @"layout_marginRight", @"layout_constraintCircle", @"layout_constraintCircleRadius", @"layout_constraintCircleAngle", @"layout_constraintGuide_begin", @"layout_constraintGuide_end", @"layout_constraintGuide_percent", @"layout_constraintLeft_toLeftOf", @"layout_constraintLeft_toRightOf", @"layout_constraintRight_toLeftOf", @"layout_constraintRight_toRightOf", @"layout_constraintTop_toTopOf", @"layout_constraintTop_toBottomOf", @"layout_constraintBottom_toTopOf", @"layout_constraintBottom_toBottomOf", @"layout_constraintBaseline_toBaselineOf", @"layout_constraintBaseline_toTopOf", @"layout_constraintBaseline_toBottomOf", @"layout_constraintStart_toEndOf", @"layout_constraintStart_toStartOf", @"layout_constraintEnd_toStartOf", @"layout_constraintEnd_toEndOf", @"layout_goneMarginLeft", @"layout_goneMarginTop", @"layout_goneMarginRight", @"layout_goneMarginBottom", @"layout_goneMarginStart", @"layout_goneMarginEnd", @"layout_goneMarginBaseline", @"layout_marginBaseline", @"layout_constrainedWidth", @"layout_constrainedHeight", @"layout_constraintHorizontal_bias", @"layout_constraintVertical_bias", @"layout_constraintWidth_default", @"layout_constraintHeight_default", @"layout_constraintWidth_min", @"layout_constraintWidth_max", @"layout_constraintWidth_percent", @"layout_constraintHeight_min", @"layout_constraintHeight_max", @"layout_constraintHeight_percent", @"layout_constraintDimensionRatio", @"layout_constraintHorizontal_weight", @"layout_constraintVertical_weight", @"layout_constraintHorizontal_chainStyle", @"layout_constraintVertical_chainStyle", @"layout_editor_absoluteX", @"layout_editor_absoluteY", @"layout_wrapBehaviorInParent", @"barrierDirection", @"barrierMargin", @"constraint_referenced_ids", @"barrierAllowsGoneWidgets", @"animateRelativeTo", @"animateCircleAngleTo", @"transitionEasing", @"pathMotionArc", @"polarRelativeTo", @"transitionPathRotate", @"drawPath", @"layout_constraintTag", @"motionStagger", @"quantizeMotionSteps", @"quantizeMotionPhase", @"quantizeMotionInterpolator" }, 90)) {
      case 0:
      ASMotionLayoutImpl_setOrientationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 1:
      ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 2:
      ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 3:
      ASMotionLayoutImpl_setAlphaWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 4:
      ASMotionLayoutImpl_setElevationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 5:
      ASMotionLayoutImpl_setRotationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 6:
      ASMotionLayoutImpl_setRotationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 7:
      ASMotionLayoutImpl_setRotationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 8:
      ASMotionLayoutImpl_setScaleXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 9:
      ASMotionLayoutImpl_setScaleYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 10:
      ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 11:
      ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 12:
      ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 13:
      ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 14:
      ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 15:
      ASMotionLayoutImpl_setWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 16:
      ASMotionLayoutImpl_setHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 17:
      ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 18:
      ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 19:
      ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 20:
      ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 21:
      ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 22:
      ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 23:
      ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 24:
      ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 25:
      ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 26:
      ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 27:
      ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 28:
      ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 29:
      ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 30:
      ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 31:
      ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 32:
      ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 33:
      ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 34:
      ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 35:
      ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 36:
      ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 37:
      ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 38:
      ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 39:
      ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 40:
      ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 41:
      ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 42:
      ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 43:
      ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 44:
      ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 45:
      ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 46:
      ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 47:
      ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 48:
      ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 49:
      ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 50:
      ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 51:
      ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 52:
      ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 53:
      ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 54:
      ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 55:
      ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 56:
      ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 57:
      ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 58:
      ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 59:
      ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 60:
      ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 61:
      ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 62:
      ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 63:
      ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 64:
      ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 65:
      ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 66:
      ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 67:
      ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 68:
      ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 69:
      ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 70:
      ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 71:
      ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 72:
      ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 73:
      ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 74:
      ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 75:
      ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 76:
      ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 77:
      ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 78:
      ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 79:
      ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 80:
      ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 81:
      ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 82:
      ASMotionLayoutImpl_setPolarRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 83:
      ASMotionLayoutImpl_setTransitionPathRotateWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 84:
      ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 85:
      ASMotionLayoutImpl_setConstraintTagWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 86:
      ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 87:
      ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 88:
      ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
      case 89:
      ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(self, w, barrier, motion, propertySet, layoutParams, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setOrientationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->orientation_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"LinearLayout.orientation"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_PropertySet *) nil_chk(propertySet))->visibility_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"View.visibility"], [JavaLangInteger class]))) intValue];
}

jint ASMotionLayoutImpl_getVisibilityModeWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"normal", @"ignore" }, 2)) {
    case 0:
    return 0;
    case 1:
    return 1;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_PropertySet *) nil_chk(propertySet))->mVisibilityMode_ = ASMotionLayoutImpl_getVisibilityModeWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setAlphaWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->alpha_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setElevationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->elevation_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setRotationWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->rotation_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setRotationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->rotationX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setRotationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->rotationY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setScaleXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->scaleX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setScaleYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->scaleY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->transformPivotX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->transformPivotY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->translationX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->translationY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->translationZ_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth"];
  ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraints_LayoutParams_withId_(self, layoutParams, objValue);
}

void ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight"];
  ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraints_LayoutParams_withId_(self, layoutParams, objValue);
}

void ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ASMotionLayoutImpl_setStartMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

void ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ASMotionLayoutImpl_setBottomMarginWithId_withADXConstraints_LayoutParams_(self, objValue, layoutParams);
}

void ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ASMotionLayoutImpl_setTopMarginWithId_withADXConstraints_LayoutParams_(self, objValue, layoutParams);
}

void ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ASMotionLayoutImpl_setEndMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

void ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ASMotionLayoutImpl_setLeftMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

void ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ASMotionLayoutImpl_setRightMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(self, objValue, layoutParams, w);
}

void ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->circleConstraint_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->circleRadius_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->circleAngle_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->guideBegin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->guideEnd_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->guidePercent_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->leftToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->leftToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->leftToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->leftToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->rightToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->rightToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->rightToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->rightToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->topToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->topToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->topToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->topToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->bottomToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->bottomToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->bottomToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->bottomToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->baselineToBaseline_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->baselineToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->baselineToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->baselineToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->baselineToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->startToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->startToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->startToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->startToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->endToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->endToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->endToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->endToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneLeftMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneTopMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneRightMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneBottomMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneStartMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneEndMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->goneBaselineMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->baselineMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"boolean"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->constrainedWidth_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"boolean"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->constrainedHeight_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->horizontalBias_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->verticalBias_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth_default"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight_default"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentWidth_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentHeight_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"string"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->dimensionRatio_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->horizontalWeight_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->verticalWeight_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHorizontal_chainStyle"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->horizontalChainStyle_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintVertical_chainStyle"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->verticalChainStyle_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteX_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteY_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_wrapBehaviorInParent"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->wrapBehaviorInParent_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"BarrierImpl.barrierDirection"];
  [((ADXBarrier *) nil_chk(barrier)) setTypeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  [((ADXBarrier *) nil_chk(barrier)) setMarginWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"BarrierImpl.constraintReferencedIds"];
  [((ADXBarrier *) nil_chk(barrier)) setReferencedIdsWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class])];
}

void ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"boolean"];
  [((ADXBarrier *) nil_chk(barrier)) setAllowsGoneWidgetWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mAnimateRelativeTo_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

jint ASMotionLayoutImpl_getAnimateCircleAngleToWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"bestChoice", @"closest", @"clockwise", @"antiClockwise", @"constraint" }, 5)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mAnimateCircleAngleTo_ = ASMotionLayoutImpl_getAnimateCircleAngleToWithNSString_(self, strValue);
}

jint ASMotionLayoutImpl_getTransitionEasingWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"standard", @"accelerate", @"decelerate", @"linear" }, 4)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mTransitionEasing_ = strValue;
}

jint ASMotionLayoutImpl_getPathMotionArcWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"none", @"startVertical", @"startHorizontal", @"flip" }, 4)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mPathMotionArc_ = ASMotionLayoutImpl_getPathMotionArcWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setPolarRelativeToWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mPolarRelativeTo_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

jint ASMotionLayoutImpl_getDrawPathWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"none", @"path", @"pathRelative", @"deltaRelative", @"asConfigured", @"rectangles" }, 6)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    case 5:
    return 5;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mDrawPath_ = ASMotionLayoutImpl_getDrawPathWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setConstraintTagWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"string"];
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->constraintTag_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mMotionStagger_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mQuantizeMotionSteps_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"int"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mQuantizeMotionPhase_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

jint ASMotionLayoutImpl_getQuantizeMotionInterpolatorWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"easeInOut", @"easeIn", @"easeOut", @"linear", @"bounce", @"overshoot" }, 6)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    case 5:
    return 5;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setEndMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w) {
  [((ADXConstraints_LayoutParams *) nil_chk(layoutParams)) setMarginEndWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setLeftMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w) {
  [((ADXConstraints_LayoutParams *) nil_chk(layoutParams)) setMarginStartWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setRightMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w) {
  [((ADXConstraints_LayoutParams *) nil_chk(layoutParams)) setMarginEndWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_parseMotionWithASIWidget_withADXConstraintSet_Motion_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"animateRelativeTo", @"animateCircleAngleTo", @"transitionEasing", @"pathMotionArc", @"motionPathRotate", @"motionStagger", @"drawPath", @"quantizeMotionSteps", @"quantizeMotionPhase", @"quantizeMotionInterpolator" }, 10)) {
      case 0:
      ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 1:
      ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 2:
      ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 3:
      ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 4:
      ASMotionLayoutImpl_setMotionPathRotateWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 5:
      ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 6:
      ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 7:
      ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 8:
      ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
      case 9:
      ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXConstraintSet_Motion_withNSString_(self, w, motion, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setAnimateRelativeToWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mAnimateRelativeTo_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setAnimateCircleAngleToWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mAnimateCircleAngleTo_ = ASMotionLayoutImpl_getAnimateCircleAngleToWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mTransitionEasing_ = strValue;
}

void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mPathMotionArc_ = ASMotionLayoutImpl_getPathMotionArcWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setMotionStaggerWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mMotionStagger_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mDrawPath_ = ASMotionLayoutImpl_getDrawPathWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setQuantizeMotionStepsWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mQuantizeMotionSteps_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"int"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setQuantizeMotionPhaseWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mQuantizeMotionPhase_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_parseLayoutWithASIWidget_withADXConstraintSet_Layout_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"layout_width", @"layout_height", @"layout_constraintWidth", @"layout_constraintHeight", @"layout_marginStart", @"layout_marginBottom", @"layout_marginTop", @"layout_marginEnd", @"layout_marginLeft", @"layout_marginRight", @"layout_constraintCircle", @"layout_constraintCircleRadius", @"layout_constraintCircleAngle", @"layout_constraintGuide_begin", @"layout_constraintGuide_end", @"layout_constraintGuide_percent", @"layout_constraintLeft_toLeftOf", @"layout_constraintLeft_toRightOf", @"layout_constraintRight_toLeftOf", @"layout_constraintRight_toRightOf", @"layout_constraintTop_toTopOf", @"layout_constraintTop_toBottomOf", @"layout_constraintBottom_toTopOf", @"layout_constraintBottom_toBottomOf", @"layout_constraintBaseline_toBaselineOf", @"layout_constraintBaseline_toTopOf", @"layout_constraintBaseline_toBottomOf", @"layout_constraintStart_toEndOf", @"layout_constraintStart_toStartOf", @"layout_constraintEnd_toStartOf", @"layout_constraintEnd_toEndOf", @"layout_goneMarginLeft", @"layout_goneMarginTop", @"layout_goneMarginRight", @"layout_goneMarginBottom", @"layout_goneMarginStart", @"layout_goneMarginEnd", @"layout_goneMarginBaseline", @"layout_marginBaseline", @"layout_constrainedWidth", @"layout_constrainedHeight", @"layout_constraintHorizontal_bias", @"layout_constraintVertical_bias", @"layout_constraintWidth_default", @"layout_constraintHeight_default", @"layout_constraintWidth_min", @"layout_constraintWidth_max", @"orientation", @"layout_constraintWidth_percent", @"layout_constraintHeight_min", @"layout_constraintHeight_max", @"layout_constraintHeight_percent", @"layout_constraintDimensionRatio", @"layout_constraintHorizontal_weight", @"layout_constraintVertical_weight", @"layout_constraintHorizontal_chainStyle", @"layout_constraintVertical_chainStyle", @"layout_editor_absoluteX", @"layout_editor_absoluteY", @"layout_mWrapBehavior", @"barrierDirection", @"barrierMargin", @"constraint_referenced_ids", @"barrierAllowsGoneWidgets" }, 64)) {
      case 0:
      ASMotionLayoutImpl_setWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 1:
      ASMotionLayoutImpl_setHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 2:
      ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 3:
      ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 4:
      ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 5:
      ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 6:
      ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 7:
      ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 8:
      ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 9:
      ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 10:
      ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 11:
      ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 12:
      ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 13:
      ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 14:
      ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 15:
      ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 16:
      ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 17:
      ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 18:
      ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 19:
      ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 20:
      ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 21:
      ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 22:
      ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 23:
      ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 24:
      ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 25:
      ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 26:
      ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 27:
      ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 28:
      ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 29:
      ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 30:
      ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 31:
      ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 32:
      ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 33:
      ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 34:
      ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 35:
      ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 36:
      ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 37:
      ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 38:
      ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 39:
      ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 40:
      ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 41:
      ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 42:
      ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 43:
      ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 44:
      ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 45:
      ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 46:
      ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 47:
      ASMotionLayoutImpl_setOrientationWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 48:
      ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 49:
      ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 50:
      ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 51:
      ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 52:
      ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 53:
      ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 54:
      ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 55:
      ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 56:
      ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 57:
      ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 58:
      ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 59:
      ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 60:
      ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 61:
      ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 62:
      ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
      case 63:
      ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXConstraintSet_Layout_withNSString_(self, w, layoutParams, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth"];
  ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintSet_Layout_withId_(self, layoutParams, objValue);
}

void ASMotionLayoutImpl_setConstraintHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight"];
  ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintSet_Layout_withId_(self, layoutParams, objValue);
}

void ASMotionLayoutImpl_setConstraintCircleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->circleConstraint_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintCircleRadiusWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->circleRadius_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintCircleAngleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->circleAngle_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintGuide_beginWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->guideBegin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintGuide_endWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->guideEnd_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintGuide_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->guidePercent_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintLeft_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->leftToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->leftToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintLeft_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->leftToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->leftToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintRight_toLeftOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->rightToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->rightToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintRight_toRightOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->rightToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->rightToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintTop_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->topToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->topToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintTop_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->topToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->topToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBottom_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->bottomToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->bottomToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBottom_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->bottomToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->bottomToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBaseline_toBaselineOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->baselineToBaseline_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBaseline_toTopOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->baselineToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->baselineToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintBaseline_toBottomOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->baselineToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->baselineToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintStart_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->startToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->startToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintStart_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->startToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->startToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintEnd_toStartOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->endToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->endToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setConstraintEnd_toEndOfWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->endToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
  if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
    layoutParams->endToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
  }
}

void ASMotionLayoutImpl_setGoneMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneLeftMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneTopMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneRightMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneBottomMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneStartMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneEndMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setGoneMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->goneBaselineMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginBaselineWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->baselineMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstrainedWidthWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"boolean"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->constrainedWidth_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASMotionLayoutImpl_setConstrainedHeightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"boolean"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->constrainedHeight_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASMotionLayoutImpl_setConstraintHorizontal_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->horizontalBias_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintVertical_biasWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->verticalBias_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintWidth_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintWidth_default"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->widthDefault_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintHeight_defaultWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHeight_default"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->heightDefault_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidth_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->widthMin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidth_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->widthMax_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setOrientationWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->orientation_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"LinearLayout.orientation"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintWidth_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->widthPercent_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintHeight_minWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->heightMin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintHeight_maxWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->heightMax_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintHeight_percentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->heightPercent_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintDimensionRatioWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"string"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->dimensionRatio_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASMotionLayoutImpl_setConstraintHorizontal_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->horizontalWeight_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintVertical_weightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->verticalWeight_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setConstraintHorizontal_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintHorizontal_chainStyle"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->horizontalChainStyle_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintVertical_chainStyleWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_constraintVertical_chainStyle"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->verticalChainStyle_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setEditor_absoluteXWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->editorAbsoluteX_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setEditor_absoluteYWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->editorAbsoluteY_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setWrapBehaviorInParentWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"androidx.constraintlayout.motion.widget.MotionLayout.layout_mWrapBehavior"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mWrapBehavior_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

jint ASMotionLayoutImpl_getBarrierDirectionWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"left", @"right", @"top", @"bottom", @"start", @"end" }, 6)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 5;
    case 5:
    return 6;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setBarrierDirectionWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mBarrierDirection_ = ASMotionLayoutImpl_getBarrierDirectionWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setBarrierMarginWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mBarrierMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setBarrierAllowsGoneWidgetsWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mBarrierAllowsGoneWidgets_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"boolean"], [JavaLangBoolean class]))) booleanValue];
}

void ASMotionLayoutImpl_parseTransformWithASIWidget_withADXConstraintSet_Transform_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"elevation", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY", @"translationX", @"translationY", @"translationZ" }, 11)) {
      case 0:
      ASMotionLayoutImpl_setElevationWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 1:
      ASMotionLayoutImpl_setRotationWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 2:
      ASMotionLayoutImpl_setRotationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 3:
      ASMotionLayoutImpl_setRotationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 4:
      ASMotionLayoutImpl_setScaleXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 5:
      ASMotionLayoutImpl_setScaleYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 6:
      ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 7:
      ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 8:
      ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 9:
      ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
      case 10:
      ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXConstraintSet_Transform_withNSString_(self, w, transform, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setElevationWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->elevation_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setRotationWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->rotation_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setRotationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->rotationX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setRotationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->rotationY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setScaleXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->scaleX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setScaleYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->scaleY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTransformPivotXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->transformPivotX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTransformPivotYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->transformPivotY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTranslationXWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->translationX_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTranslationYWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->translationY_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setTranslationZWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *strValue) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->translationZ_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_parsePropertySetWithASIWidget_withADXConstraintSet_PropertySet_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"visibility", @"visibilityMode", @"alpha" }, 3)) {
      case 0:
      ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(self, w, propertySet, value);
      break;
      case 1:
      ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(self, w, propertySet, value);
      break;
      case 2:
      ASMotionLayoutImpl_setAlphaWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(self, w, propertySet, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setVisibilityWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, NSString *strValue) {
  ((ADXConstraintSet_PropertySet *) nil_chk(propertySet))->visibility_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"View.visibility"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setVisibilityModeWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, NSString *strValue) {
  ((ADXConstraintSet_PropertySet *) nil_chk(propertySet))->mVisibilityMode_ = ASMotionLayoutImpl_getVisibilityModeWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setAlphaWithASIWidget_withADXConstraintSet_PropertySet_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_PropertySet *propertySet, NSString *strValue) {
  ((ADXConstraintSet_PropertySet *) nil_chk(propertySet))->alpha_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_parseKeyPositionWithASIWidget_withADXKeyPosition_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"keyPositionType", @"percentX", @"percentY", @"percentWidth", @"percentHeight", @"framePosition", @"motionTarget", @"transitionEasing", @"pathMotionArc", @"curveFit", @"drawPath", @"sizePercent" }, 12)) {
      case 0:
      ASMotionLayoutImpl_setKeyPositionTypeWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, value);
      break;
      case 1:
      ASMotionLayoutImpl_setPercentXWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, value);
      break;
      case 2:
      ASMotionLayoutImpl_setPercentYWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, value);
      break;
      case 3:
      ASMotionLayoutImpl_setPercentWidthWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, value);
      break;
      case 4:
      ASMotionLayoutImpl_setPercentHeightWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, value);
      break;
      case 5:
      ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, value);
      break;
      case 6:
      ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, value);
      break;
      case 7:
      ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, value);
      break;
      case 8:
      ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, value);
      break;
      case 9:
      ASMotionLayoutImpl_setCurveFitWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, value);
      break;
      case 10:
      ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXKeyPosition_withNSString_withNSString_(self, w, keyPosition, name, value);
      break;
      case 11:
      ASMotionLayoutImpl_setSizePercentWithASIWidget_withADXKeyPosition_withNSString_(self, w, keyPosition, value);
      break;
    }
  }
}

jint ASMotionLayoutImpl_getKeyPositionTypeWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"deltaRelative", @"pathRelative", @"parentRelative" }, 3)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setPercentXWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class])];
}

void ASMotionLayoutImpl_setPercentYWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class])];
}

void ASMotionLayoutImpl_setPercentWidthWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class])];
}

void ASMotionLayoutImpl_setPercentHeightWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class])];
}

void ASMotionLayoutImpl_setTransitionEasingWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:name withId:strValue];
}

void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue) {
  ((ADXKeyPosition *) nil_chk(keyPosition))->mPathMotionArc_ = ASMotionLayoutImpl_getPathMotionArcWithNSString_(self, strValue);
}

jint ASMotionLayoutImpl_getCurveFitWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"spline", @"linear" }, 2)) {
    case 0:
    return 0;
    case 1:
    return 1;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setDrawPathWithASIWidget_withADXKeyPosition_withNSString_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *name, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:name withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getDrawPathWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_parseTransitionWithASIWidget_withADXMotionScene_Transition_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"constraintSetStart", @"constraintSetEnd", @"transitionDisable", @"layoutDuringTransition", @"pathMotionArc", @"autoTransition", @"motionInterpolator", @"duration", @"staggered", @"transitionFlags" }, 10)) {
      case 0:
      ASMotionLayoutImpl_setConstraintSetStartWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 1:
      ASMotionLayoutImpl_setConstraintSetEndWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 2:
      ASMotionLayoutImpl_setTransitionDisableWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 3:
      ASMotionLayoutImpl_setLayoutDuringTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 4:
      ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 5:
      ASMotionLayoutImpl_setAutoTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 6:
      ASMotionLayoutImpl_setMotionInterpolatorWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 7:
      ASMotionLayoutImpl_setDurationWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 8:
      ASMotionLayoutImpl_setStaggeredWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
      case 9:
      ASMotionLayoutImpl_setTransitionFlagWithASIWidget_withADXMotionScene_Transition_withNSString_(self, w, transition, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setConstraintSetStartWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  ((ADXMotionScene_Transition *) nil_chk(transition))->mConstraintSetStart_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setConstraintSetEndWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  ((ADXMotionScene_Transition *) nil_chk(transition))->mConstraintSetEnd_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

jint ASMotionLayoutImpl_getLayoutDuringTransitionWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"ignoreRequest", @"honorRequest" }, 2)) {
    case 0:
    return 0;
    case 1:
    return 1;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setLayoutDuringTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setLayoutDuringTransitionWithInt:ASMotionLayoutImpl_getLayoutDuringTransitionWithNSString_(self, strValue)];
}

void ASMotionLayoutImpl_setPathMotionArcWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setPathMotionArcWithInt:ASMotionLayoutImpl_getPathMotionArcWithNSString_(self, strValue)];
}

jint ASMotionLayoutImpl_getAutoTransitionWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"none", @"jumpToStart", @"jumpToEnd", @"animateToStart", @"animateToEnd" }, 5)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setAutoTransitionWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setAutoTransitionWithInt:ASMotionLayoutImpl_getAutoTransitionWithNSString_(self, strValue)];
}

jint ASMotionLayoutImpl_getMotionInterpolatorWithNSString_(ASMotionLayoutImpl *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"easeInOut", @"easeIn", @"easeOut", @"linear", @"bounce", @"overshoot", @"anticipate" }, 7)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    case 4:
    return 4;
    case 5:
    return 5;
    case 6:
    return 6;
    default:
    break;
  }
  return 0;
}

void ASMotionLayoutImpl_setDurationWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setDurationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"int"], [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setTransitionFlagWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setTransitionFlagWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"transitionFlags.flag"], [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_parseKeyTriggerWithASIWidget_withADXKeyTrigger_withOrgXmlSaxAttributes_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, id<OrgXmlSaxAttributes> atts) {
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"framePosition", @"motionTarget", @"triggerReceiver", @"onNegativeCross", @"onPositiveCross", @"onCross", @"viewTransitionOnNegativeCross", @"viewTransitionOnPositiveCross", @"viewTransitionOnCross", @"triggerSlack", @"triggerId", @"motion_postLayoutCollision", @"motion_triggerOnCollision" }, 13)) {
      case 0:
      ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 1:
      ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 2:
      ASMotionLayoutImpl_setTriggerReceiverWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 3:
      ASMotionLayoutImpl_setOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 4:
      ASMotionLayoutImpl_setOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 5:
      ASMotionLayoutImpl_setOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 6:
      ASMotionLayoutImpl_setViewTransitionOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 7:
      ASMotionLayoutImpl_setViewTransitionOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 8:
      ASMotionLayoutImpl_setViewTransitionOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 9:
      ASMotionLayoutImpl_setTriggerSlackWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 10:
      ASMotionLayoutImpl_setTriggerIdWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 11:
      ASMotionLayoutImpl_setMotion_postLayoutCollisionWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
      case 12:
      ASMotionLayoutImpl_setMotion_triggerOnCollisionWithASIWidget_withADXKeyTrigger_withNSString_(self, w, keyTrigger, value);
      break;
    }
  }
}

void ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mQuantizeInterpolatorString_ = strValue;
  motion->mQuantizeInterpolatorType_ = ASMotionLayoutImpl_getQuantizeMotionInterpolatorWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setMotionPathRotateWithASIWidget_withADXConstraintSet_Motion_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Motion *motion, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mPathRotate_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setQuantizeMotionInterpolatorWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mQuantizeInterpolatorString_ = strValue;
  motion->mQuantizeInterpolatorType_ = ASMotionLayoutImpl_getQuantizeMotionInterpolatorWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setTransitionPathRotateWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraintSet_Motion *) nil_chk(motion))->mPathRotate_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraints_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraints_LayoutParams *layoutParams, id objValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraints_LayoutParams_withId_(ASMotionLayoutImpl *self, ADXConstraints_LayoutParams *layoutParams, id objValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setStartMarginWithId_withADXConstraints_LayoutParams_withASIWidget_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams, id<ASIWidget> w) {
  [((ADXConstraints_LayoutParams *) nil_chk(layoutParams)) setMarginStartWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setBottomMarginWithId_withADXConstraints_LayoutParams_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->bottomMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setTopMarginWithId_withADXConstraints_LayoutParams_(ASMotionLayoutImpl *self, id objValue, ADXConstraints_LayoutParams *layoutParams) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->topMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginRightWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->endMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginLeftWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->startMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginEndWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->endMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginTopWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->topMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginBottomWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->bottomMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setMarginStartWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"dimension"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->startMargin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setLayout_constraintWidthWithADXConstraintSet_Layout_withId_(ASMotionLayoutImpl *self, ADXConstraintSet_Layout *layoutParams, id objValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  layoutParams->constrainedWidth_ = true;
}

void ASMotionLayoutImpl_setLayout_constraintHeightWithADXConstraintSet_Layout_withId_(ASMotionLayoutImpl *self, ADXConstraintSet_Layout *layoutParams, id objValue) {
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  layoutParams->constrainedHeight_ = true;
}

void ASMotionLayoutImpl_setConstraint_referenced_idsWithASIWidget_withADXConstraintSet_Layout_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Layout *layoutParams, NSString *strValue) {
  id objValue = [((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"BarrierImpl.constraintReferencedIds"];
  ((ADXConstraintSet_Layout *) nil_chk(layoutParams))->mReferenceIds_ = (IOSIntArray *) cast_chk(objValue, [IOSIntArray class]);
}

void ASMotionLayoutImpl_setSizePercentWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue) {
  jfloat val = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue];
  [((ADXKeyPosition *) nil_chk(keyPosition)) setValueWithNSString:ADXKeyPosition_PERCENT_HEIGHT withId:JavaLangFloat_valueOfWithFloat_(val)];
  [keyPosition setValueWithNSString:ADXKeyPosition_PERCENT_WIDTH withId:JavaLangFloat_valueOfWithFloat_(val)];
}

void ASMotionLayoutImpl_setCurveFitWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue) {
  ((ADXKeyPosition *) nil_chk(keyPosition))->mCurveFit_ = ASMotionLayoutImpl_getCurveFitWithNSString_(self, strValue);
}

void ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue) {
  (void) [((ADXKeyPosition *) nil_chk(keyPosition)) setViewIdWithInt:(jint) ASMotionLayoutImpl_getIdWithNSString_(self, strValue)];
}

void ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setFramePositionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:strValue withNSString:@"int"], [JavaLangInteger class]))) intValue]];
}

void ASMotionLayoutImpl_setKeyPositionTypeWithASIWidget_withADXKeyPosition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyPosition *keyPosition, NSString *strValue) {
  [((ADXKeyPosition *) nil_chk(keyPosition)) setTypeWithInt:(jint) ASMotionLayoutImpl_getKeyPositionTypeWithNSString_(self, strValue)];
}

jint ASMotionLayoutImpl_getIdWithNSString_(ASMotionLayoutImpl *self, NSString *id_) {
  if ([((NSString *) nil_chk(id_)) isEqual:@"parent"]) {
    return ADXConstraintSet_PARENT_ID;
  }
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

void ASMotionLayoutImpl_setStaggeredWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setStaggerWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([self quickConvertWithId:strValue withNSString:@"float"], [JavaLangFloat class]))) floatValue]];
}

void ASMotionLayoutImpl_setMotionInterpolatorWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setInterpolatorInfoWithInt:ASMotionLayoutImpl_getMotionInterpolatorWithNSString_(self, strValue) withNSString:strValue withInt:-1];
}

void ASMotionLayoutImpl_setTransitionDisableWithASIWidget_withADXMotionScene_Transition_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXMotionScene_Transition *transition, NSString *strValue) {
  [((ADXMotionScene_Transition *) nil_chk(transition)) setEnableWithBoolean:![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([self quickConvertWithId:strValue withNSString:@"boolean"], [JavaLangBoolean class]))) booleanValue]];
}

void ASMotionLayoutImpl_setMotion_triggerOnCollisionWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_TRIGGER_COLLISION_ID withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getIdWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_setMotion_postLayoutCollisionWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
}

void ASMotionLayoutImpl_setTriggerIdWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_TRIGGER_ID withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getIdWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_setTriggerSlackWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_TRIGGER_SLACK withId:[self quickConvertWithId:strValue withNSString:@"float"]];
}

void ASMotionLayoutImpl_setViewTransitionOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_VIEW_TRANSITION_ON_CROSS withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getIdWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_setViewTransitionOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_VIEW_TRANSITION_ON_POSITIVE_CROSS withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getIdWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_setViewTransitionOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_VIEW_TRANSITION_ON_NEGATIVE_CROSS withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getIdWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_setOnCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_CROSS withId:strValue];
}

void ASMotionLayoutImpl_setOnPositiveCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_POSITIVE_CROSS withId:strValue];
}

void ASMotionLayoutImpl_setOnNegativeCrossWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_NEGATIVE_CROSS withId:strValue];
}

void ASMotionLayoutImpl_setTriggerReceiverWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setValueWithNSString:ADXKeyTrigger_TRIGGER_RECEIVER withId:JavaLangInteger_valueOfWithInt_((jint) ASMotionLayoutImpl_getIdWithNSString_(self, strValue))];
}

void ASMotionLayoutImpl_setMotionTargetWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  (void) [((ADXKeyTrigger *) nil_chk(keyTrigger)) setViewIdWithInt:(jint) ASMotionLayoutImpl_getIdWithNSString_(self, strValue)];
}

void ASMotionLayoutImpl_setFramePositionWithASIWidget_withADXKeyTrigger_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXKeyTrigger *keyTrigger, NSString *strValue) {
  jint val = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:strValue withNSString:@"int"], [JavaLangInteger class]))) intValue];
  [((ADXKeyTrigger *) nil_chk(keyTrigger)) setFramePositionWithInt:val];
  keyTrigger->mFireThreshold_ = (val + .5f) / 100.0f;
}

void ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXBarrier *barrier, ADXConstraintSet_Motion *motion, ADXConstraintSet_PropertySet *propertySet, ADXConstraints_LayoutParams *layoutParams, NSString *strValue) {
  ((ADXConstraints_LayoutParams *) nil_chk(layoutParams))->applyElevation_ = true;
}

void ASMotionLayoutImpl_setElevationAdditionalWithASIWidget_withADXConstraintSet_Transform_withNSString_(ASMotionLayoutImpl *self, id<ASIWidget> w, ADXConstraintSet_Transform *transform, NSString *value) {
  ((ADXConstraintSet_Transform *) nil_chk(transform))->applyElevation_ = true;
}

void ASMotionLayoutImpl_processTouchEventWithADXMotionScene_Transition_withInt_withInt_withInt_(ASMotionLayoutImpl *self, ADXMotionScene_Transition *transition, jint event, jint clientX, jint clientY) {
  [((ADMotionEvent *) nil_chk(self->motionEvent_)) setRawXWithInt:clientX];
  [((ADMotionEvent *) nil_chk(self->motionEvent_)) setRawYWithInt:clientY];
  [((ADMotionEvent *) nil_chk(self->motionEvent_)) setActionWithInt:event];
  [((ADXMotionLayout *) nil_chk(self->motionLayout_)) postWithJavaLangRunnable:new_ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(self)];
}

void ASMotionLayoutImpl_setReduceFlickerWithBoolean_(ASMotionLayoutImpl *self, jboolean flag) {
  [((ADXMotionLayout *) nil_chk(self->motionLayout_)) setReduceFlickerWithBoolean:flag];
}

void ASMotionLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASMotionLayoutImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if ([self isInitialised]) {
    switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layoutDescription" }, 1)) {
      case 0:
      [((ADXMotionLayout *) nil_chk(self->motionLayout_)) updateState];
      [((ADXMotionLayout *) nil_chk(self->motionLayout_)) requestLayout];
      break;
      default:
      break;
    }
  }
}

void ASMotionLayoutImpl_nativeAddOnSwipeWithADXMotionScene_Transition_withASIWidget_(ASMotionLayoutImpl *self, ADXMotionScene_Transition *transition, id<ASIWidget> widget) {
  ASViewImpl_addPanListenerWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(widget, [((id<ASIWidget>) nil_chk(widget)) asNativeWidget], self->uiView_, new_ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(self, transition));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl)

@implementation ASMotionLayoutImpl_DallocHandler

- (instancetype)initWithASMotionLayoutImpl:(ASMotionLayoutImpl *)outer$
                              withNSString:(NSString *)type {
  ASMotionLayoutImpl_DallocHandler_initWithASMotionLayoutImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  [((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) release__];
}

- (void)__javaClone:(ASMotionLayoutImpl_DallocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASMotionLayoutImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASMotionLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASMotionLayoutImpl;LNSString;", "doPerform", "LNSObject;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_DallocHandler = { "DallocHandler", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_DallocHandler;
}

@end

void ASMotionLayoutImpl_DallocHandler_initWithASMotionLayoutImpl_withNSString_(ASMotionLayoutImpl_DallocHandler *self, ASMotionLayoutImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASMotionLayoutImpl_DallocHandler *new_ASMotionLayoutImpl_DallocHandler_initWithASMotionLayoutImpl_withNSString_(ASMotionLayoutImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_DallocHandler, initWithASMotionLayoutImpl_withNSString_, outer$, type)
}

ASMotionLayoutImpl_DallocHandler *create_ASMotionLayoutImpl_DallocHandler_initWithASMotionLayoutImpl_withNSString_(ASMotionLayoutImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_DallocHandler, initWithASMotionLayoutImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_DallocHandler)

@implementation ASMotionLayoutImpl_OptimizationLevel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_OptimizationLevel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_OptimizationLevel = { "OptimizationLevel", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_OptimizationLevel;
}

@end

void ASMotionLayoutImpl_OptimizationLevel_init(ASMotionLayoutImpl_OptimizationLevel *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"legacy" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"standard" withId:JavaLangInteger_valueOfWithInt_((jint) 0x257)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"direct" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"barrier" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"chains" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"dimensions" withId:JavaLangInteger_valueOfWithInt_((jint) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ratio" withId:JavaLangInteger_valueOfWithInt_((jint) 0x16)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"groups" withId:JavaLangInteger_valueOfWithInt_((jint) 0x32)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"graph" withId:JavaLangInteger_valueOfWithInt_((jint) 0x64)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"graph_wrap" withId:JavaLangInteger_valueOfWithInt_((jint) 0x128)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"cache_measures" withId:JavaLangInteger_valueOfWithInt_((jint) 0x256)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"dependency_ordering" withId:JavaLangInteger_valueOfWithInt_((jint) 0x512)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"grouping" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1024)];
  }
}

ASMotionLayoutImpl_OptimizationLevel *new_ASMotionLayoutImpl_OptimizationLevel_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_OptimizationLevel, init)
}

ASMotionLayoutImpl_OptimizationLevel *create_ASMotionLayoutImpl_OptimizationLevel_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_OptimizationLevel, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_OptimizationLevel)

@implementation ASMotionLayoutImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Orientation = { "Orientation", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Orientation;
}

@end

void ASMotionLayoutImpl_Orientation_init(ASMotionLayoutImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASMotionLayoutImpl_Orientation *new_ASMotionLayoutImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Orientation, init)
}

ASMotionLayoutImpl_Orientation *create_ASMotionLayoutImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Orientation)

@implementation ASMotionLayoutImpl_Layout_constraintWidth

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_constraintWidth_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_constraintWidth = { "Layout_constraintWidth", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_constraintWidth;
}

@end

void ASMotionLayoutImpl_Layout_constraintWidth_init(ASMotionLayoutImpl_Layout_constraintWidth *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"match_parent" withId:JavaLangInteger_valueOfWithInt_(-1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content" withId:JavaLangInteger_valueOfWithInt_(-2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"match_constraint" withId:JavaLangInteger_valueOfWithInt_(-3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content_constrained" withId:JavaLangInteger_valueOfWithInt_(-4)];
  }
}

ASMotionLayoutImpl_Layout_constraintWidth *new_ASMotionLayoutImpl_Layout_constraintWidth_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_constraintWidth, init)
}

ASMotionLayoutImpl_Layout_constraintWidth *create_ASMotionLayoutImpl_Layout_constraintWidth_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_constraintWidth, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_constraintWidth)

@implementation ASMotionLayoutImpl_Layout_constraintHeight

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_constraintHeight_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_constraintHeight = { "Layout_constraintHeight", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_constraintHeight;
}

@end

void ASMotionLayoutImpl_Layout_constraintHeight_init(ASMotionLayoutImpl_Layout_constraintHeight *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"match_parent" withId:JavaLangInteger_valueOfWithInt_(-1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content" withId:JavaLangInteger_valueOfWithInt_(-2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"match_constraint" withId:JavaLangInteger_valueOfWithInt_(-3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content_constrained" withId:JavaLangInteger_valueOfWithInt_(-4)];
  }
}

ASMotionLayoutImpl_Layout_constraintHeight *new_ASMotionLayoutImpl_Layout_constraintHeight_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_constraintHeight, init)
}

ASMotionLayoutImpl_Layout_constraintHeight *create_ASMotionLayoutImpl_Layout_constraintHeight_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_constraintHeight, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_constraintHeight)

@implementation ASMotionLayoutImpl_Layout_constraintWidth_default

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_constraintWidth_default_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_constraintWidth_default = { "Layout_constraintWidth_default", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_constraintWidth_default;
}

@end

void ASMotionLayoutImpl_Layout_constraintWidth_default_init(ASMotionLayoutImpl_Layout_constraintWidth_default *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"percent" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASMotionLayoutImpl_Layout_constraintWidth_default *new_ASMotionLayoutImpl_Layout_constraintWidth_default_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_constraintWidth_default, init)
}

ASMotionLayoutImpl_Layout_constraintWidth_default *create_ASMotionLayoutImpl_Layout_constraintWidth_default_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_constraintWidth_default, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_constraintWidth_default)

@implementation ASMotionLayoutImpl_Layout_constraintHeight_default

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_constraintHeight_default_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_constraintHeight_default = { "Layout_constraintHeight_default", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_constraintHeight_default;
}

@end

void ASMotionLayoutImpl_Layout_constraintHeight_default_init(ASMotionLayoutImpl_Layout_constraintHeight_default *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"percent" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASMotionLayoutImpl_Layout_constraintHeight_default *new_ASMotionLayoutImpl_Layout_constraintHeight_default_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_constraintHeight_default, init)
}

ASMotionLayoutImpl_Layout_constraintHeight_default *create_ASMotionLayoutImpl_Layout_constraintHeight_default_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_constraintHeight_default, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_constraintHeight_default)

@implementation ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle = { "Layout_constraintHorizontal_chainStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle;
}

@end

void ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle_init(ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle *new_ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle, init)
}

ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle *create_ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_constraintHorizontal_chainStyle)

@implementation ASMotionLayoutImpl_Layout_constraintVertical_chainStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_constraintVertical_chainStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_constraintVertical_chainStyle = { "Layout_constraintVertical_chainStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_constraintVertical_chainStyle;
}

@end

void ASMotionLayoutImpl_Layout_constraintVertical_chainStyle_init(ASMotionLayoutImpl_Layout_constraintVertical_chainStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASMotionLayoutImpl_Layout_constraintVertical_chainStyle *new_ASMotionLayoutImpl_Layout_constraintVertical_chainStyle_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_constraintVertical_chainStyle, init)
}

ASMotionLayoutImpl_Layout_constraintVertical_chainStyle *create_ASMotionLayoutImpl_Layout_constraintVertical_chainStyle_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_constraintVertical_chainStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_constraintVertical_chainStyle)

@implementation ASMotionLayoutImpl_Layout_wrapBehaviorInParent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_Layout_wrapBehaviorInParent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_Layout_wrapBehaviorInParent = { "Layout_wrapBehaviorInParent", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_Layout_wrapBehaviorInParent;
}

@end

void ASMotionLayoutImpl_Layout_wrapBehaviorInParent_init(ASMotionLayoutImpl_Layout_wrapBehaviorInParent *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"included" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"horizontal_only" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical_only" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"skipped" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASMotionLayoutImpl_Layout_wrapBehaviorInParent *new_ASMotionLayoutImpl_Layout_wrapBehaviorInParent_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_Layout_wrapBehaviorInParent, init)
}

ASMotionLayoutImpl_Layout_wrapBehaviorInParent *create_ASMotionLayoutImpl_Layout_wrapBehaviorInParent_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_Layout_wrapBehaviorInParent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_Layout_wrapBehaviorInParent)

@implementation ASMotionLayoutImpl_MotionLayoutExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (instancetype)initWithASMotionLayoutImpl:(ASMotionLayoutImpl *)outer$ {
  ASMotionLayoutImpl_MotionLayoutExt_initWithASMotionLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASMotionLayoutImpl_MotionLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(initWithASMotionLayoutImpl:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[6].selector = @selector(newInstanceWithASIWidget:);
  methods[7].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[8].selector = @selector(getMethods);
  methods[9].selector = @selector(initialized);
  methods[10].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[11].selector = @selector(drawableStateChanged);
  methods[12].selector = @selector(inflateViewWithNSString:);
  methods[13].selector = @selector(remeasure);
  methods[14].selector = @selector(removeFromParent);
  methods[15].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[16].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[17].selector = @selector(offsetTopAndBottomWithInt:);
  methods[18].selector = @selector(offsetLeftAndRightWithInt:);
  methods[19].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[20].selector = @selector(setVisibilityWithInt:);
  methods[21].selector = @selector(setState0WithId:);
  methods[22].selector = @selector(setState1WithId:);
  methods[23].selector = @selector(setState2WithId:);
  methods[24].selector = @selector(setState3WithId:);
  methods[25].selector = @selector(setState4WithId:);
  methods[26].selector = @selector(state0);
  methods[27].selector = @selector(state1);
  methods[28].selector = @selector(state2);
  methods[29].selector = @selector(state3);
  methods[30].selector = @selector(state4);
  methods[31].selector = @selector(stateYes);
  methods[32].selector = @selector(stateNo);
  methods[33].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASMotionLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 35, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 36, -1 },
  };
  static const void *ptrTable[] = { "LASMotionLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_MotionLayoutExt = { "MotionLayoutExt", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 34, 5, 0, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_MotionLayoutExt;
}

@end

void ASMotionLayoutImpl_MotionLayoutExt_initWithASMotionLayoutImpl_(ASMotionLayoutImpl_MotionLayoutExt *self, ASMotionLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADXMotionLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASMotionLayoutImpl_MotionLayoutExt *new_ASMotionLayoutImpl_MotionLayoutExt_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_MotionLayoutExt, initWithASMotionLayoutImpl_, outer$)
}

ASMotionLayoutImpl_MotionLayoutExt *create_ASMotionLayoutImpl_MotionLayoutExt_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_MotionLayoutExt, initWithASMotionLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_MotionLayoutExt)

@implementation ASMotionLayoutImpl_1

- (instancetype)initWithASMotionLayoutImpl:(ASMotionLayoutImpl *)outer$ {
  ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(self, outer$);
  return self;
}

- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator {
}

- (void)startDocument {
}

- (void)endDocument {
}

- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri {
}

- (void)endPrefixMappingWithNSString:(NSString *)prefix {
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  switch (JreIndexOfStr(localName, (id[]){ @"ConstraintSet", @"CustomAttribute", @"Constraint", @"Layout", @"Motion", @"Transform", @"PropertySet", @"Transition", @"OnClick", @"OnSwipe", @"KeyFrameSet", @"KeyPosition", @"KeyTrigger", @"KeyCycle", @"KeyTimeCycle", @"KeyAttribute" }, 16)) {
    case 0:
    {
      constraintSet_ = new_ADXConstraintSet_init();
      [constraintSet_ setForceIdWithBoolean:false];
      [((ADXConstraintSet *) nil_chk(constraintSet_)) cloneWithADXConstraintLayout:this$0_->motionLayout_];
      NSString *id_ = nil;
      NSString *derivedId = nil;
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *attrName = [atts getLocalNameWithInt:i];
        switch (JreIndexOfStr(attrName, (id[]){ @"id", @"deriveConstraintsFrom" }, 2)) {
          case 0:
          id_ = [atts getValueWithInt:i];
          break;
          case 1:
          derivedId = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(attrName, atts);
          break;
        }
      }
      if (id_ != nil) {
        constraintSetId_ = ASMotionLayoutImpl_getIdWithNSString_(this$0_, id_);
        if (derivedId != nil) {
          [((ADXMotionScene *) nil_chk([((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) getScene])) putDerivedIdWithInt:constraintSetId_ withInt:ASMotionLayoutImpl_getIdWithNSString_(this$0_, derivedId)];
          [((ADXMotionScene *) nil_chk([((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) getScene])) copyDerivedContraintsWithADXConstraintSet:constraintSet_ withInt:constraintSetId_ withADXMotionLayout:this$0_->motionLayout_];
        }
      }
      break;
    }
    case 1:
    {
      NSString *name = nil;
      ADXConstraintAttribute_AttributeType *type = nil;
      id value = nil;
      jboolean method = false;
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *attrName = [atts getLocalNameWithInt:i];
        NSString *attrValue = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(attrName, atts);
        switch (JreIndexOfStr(attrName, (id[]){ @"name", @"customColorValue", @"customIntegerValue", @"customFloatValue", @"customStringValue", @"customDimension", @"customBoolean", @"customReference" }, 8)) {
          case 0:
          name = attrValue;
          break;
          case 1:
          value = JavaLangInteger_valueOfWithInt_(ADColor_parseColorWithNSString_(attrValue));
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, COLOR_TYPE);
          break;
          case 2:
          value = [this$0_ quickConvertWithId:attrValue withNSString:@"int"];
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, INT_TYPE);
          break;
          case 3:
          value = [this$0_ quickConvertWithId:attrValue withNSString:@"float"];
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, FLOAT_TYPE);
          break;
          case 4:
          value = attrValue;
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, STRING_TYPE);
          break;
          case 5:
          value = [this$0_ quickConvertWithId:attrValue withNSString:@"dimensionfloat"];
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, DIMENSION_TYPE);
          break;
          case 6:
          value = [this$0_ quickConvertWithId:attrValue withNSString:@"boolean"];
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, BOOLEAN_TYPE);
          break;
          case 7:
          value = [this$0_ quickConvertWithId:attrValue withNSString:@"id"];
          type = JreLoadEnum(ADXConstraintAttribute_AttributeType, REFERENCE_TYPE);
          break;
        }
      }
      ADXConstraintAttribute *customAttr = new_ADXConstraintAttribute_initWithNSString_withADXConstraintAttribute_AttributeType_withId_withBoolean_(name, type, value, method);
      switch (JreIndexOfStr([((JavaUtilStack *) nil_chk(parents_)) peek], (id[]){ @"Constraint", @"KeyFrameSet" }, 2)) {
        case 0:
        (void) [((JavaUtilHashMap *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk([((ADXConstraintSet *) nil_chk(constraintSet_)) getConstraintWithInt:this$0_->constraintId_]))->mCustomConstraints_)) putWithId:name withId:customAttr];
        break;
        case 1:
        (void) [((JavaUtilHashMap *) nil_chk(mCustomConstraints_)) putWithId:name withId:customAttr];
        break;
        default:
        break;
      }
      break;
    }
    case 2:
    {
      NSString *id_ = [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getValueWithNSString:@"android:id"];
      if (id_ != nil) {
        this$0_->constraintId_ = ASMotionLayoutImpl_getIdWithNSString_(this$0_, id_);
        if ([atts getLength] > 1) {
          ADXConstraintSet_Constraint *constraint = [((ADXConstraintSet *) nil_chk(constraintSet_)) getConstraintWithInt:this$0_->constraintId_];
          if (constraint != nil) {
            ADXConstraints_LayoutParams *layoutParams = new_ADXConstraints_LayoutParams_initWithInt_withInt_(-2, -2);
            ADXBarrier *barrier = new_ADXBarrier_init();
            ASMotionLayoutImpl_parseConstraintWithASIWidget_withADXBarrier_withADXConstraintSet_Motion_withADXConstraintSet_PropertySet_withADXConstraints_LayoutParams_withOrgXmlSaxAttributes_(this$0_, this$0_, barrier, constraint->motion_, constraint->propertySet_, layoutParams, atts);
            [constraint fillFromConstraintsWithADXConstraintHelper:barrier withInt:this$0_->constraintId_ withADXConstraints_LayoutParams:layoutParams];
          }
        }
      }
      break;
    }
    case 3:
    {
      if (this$0_->constraintId_ != -1) {
        ADXConstraintSet_Constraint *constraint = [((ADXConstraintSet *) nil_chk(constraintSet_)) getConstraintWithInt:this$0_->constraintId_];
        ASMotionLayoutImpl_parseLayoutWithASIWidget_withADXConstraintSet_Layout_withOrgXmlSaxAttributes_(this$0_, this$0_, ((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_, atts);
      }
      break;
    }
    case 4:
    {
      if (this$0_->constraintId_ != -1) {
        ADXConstraintSet_Constraint *constraint = [((ADXConstraintSet *) nil_chk(constraintSet_)) getConstraintWithInt:this$0_->constraintId_];
        ASMotionLayoutImpl_parseMotionWithASIWidget_withADXConstraintSet_Motion_withOrgXmlSaxAttributes_(this$0_, this$0_, ((ADXConstraintSet_Constraint *) nil_chk(constraint))->motion_, atts);
      }
      break;
    }
    case 5:
    {
      if (this$0_->constraintId_ != -1) {
        ADXConstraintSet_Constraint *constraint = [((ADXConstraintSet *) nil_chk(constraintSet_)) getConstraintWithInt:this$0_->constraintId_];
        ASMotionLayoutImpl_parseTransformWithASIWidget_withADXConstraintSet_Transform_withOrgXmlSaxAttributes_(this$0_, this$0_, ((ADXConstraintSet_Constraint *) nil_chk(constraint))->transform_, atts);
      }
      break;
    }
    case 6:
    {
      if (this$0_->constraintId_ != -1) {
        ADXConstraintSet_Constraint *constraint = [((ADXConstraintSet *) nil_chk(constraintSet_)) getConstraintWithInt:this$0_->constraintId_];
        ASMotionLayoutImpl_parsePropertySetWithASIWidget_withADXConstraintSet_PropertySet_withOrgXmlSaxAttributes_(this$0_, this$0_, ((ADXConstraintSet_Constraint *) nil_chk(constraint))->propertySet_, atts);
      }
      break;
    }
    case 7:
    {
      NSString *id_ = [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getValueWithNSString:@"android:id"];
      jint idInt = -1;
      if (id_ != nil) {
        idInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([this$0_ quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue];
      }
      else {
        idInt = this$0_->idCounter_;
        this$0_->idCounter_++;
      }
      transition_ = new_ADXMotionScene_Transition_initWithInt_withADXMotionScene_withInt_withInt_(idInt, [((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) getScene], -1, -1);
      ASMotionLayoutImpl_parseTransitionWithASIWidget_withADXMotionScene_Transition_withOrgXmlSaxAttributes_(this$0_, this$0_, transition_, atts);
      [((ADXMotionScene *) nil_chk([((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) getScene])) addTransitionWithADXMotionScene_Transition:transition_];
      break;
    }
    case 8:
    {
      jint clickAction = -1;
      jint targetId = -1;
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *name = [atts getLocalNameWithInt:i];
        switch (JreIndexOfStr(name, (id[]){ @"clickAction", @"targetId" }, 2)) {
          case 0:
          clickAction = (jint) ASMotionLayoutImpl_1_getClickActionWithNSString_(self, ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts));
          break;
          case 1:
          targetId = (jint) ASMotionLayoutImpl_getIdWithNSString_(this$0_, ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts));
          break;
          default:
          break;
        }
      }
      if (clickAction != -1) {
        ADXMotionScene_Transition_TransitionOnClick *clickListener = new_ADXMotionScene_Transition_TransitionOnClick_initWithADXMotionScene_Transition_withInt_withInt_(transition_, targetId, clickAction);
        jint mConstraintSetStart = (jint) ((ADXMotionScene_Transition *) nil_chk(transition_))->mConstraintSetStart_;
        transition_->mConstraintSetStart_ = -1;
        [clickListener addOnClickListenersWithADXMotionLayout:this$0_->motionLayout_ withInt:[((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) getCurrentState] withADXMotionScene_Transition:transition_];
        ((ADXMotionScene_Transition *) nil_chk(transition_))->mConstraintSetStart_ = mConstraintSetStart;
      }
      break;
    }
    case 9:
    {
      jint dragDirection = -1;
      jint touchAnchorId = -1;
      jint touchAnchorSide = -1;
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *name = [atts getLocalNameWithInt:i];
        switch (JreIndexOfStr(name, (id[]){ @"dragDirection", @"touchAnchorId", @"touchAnchorSide" }, 3)) {
          case 0:
          dragDirection = (jint) [this$0_ getDragDirectionWithNSString:ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts)];
          break;
          case 1:
          touchAnchorId = (jint) ASMotionLayoutImpl_getIdWithNSString_(this$0_, ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts));
          break;
          case 2:
          touchAnchorSide = (jint) [this$0_ getTouchAnchorSideWithNSString:ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts)];
          break;
          default:
          break;
        }
      }
      ADXOnSwipe *onSwipe = new_ADXOnSwipe_init();
      (void) [onSwipe setDragDirectionWithInt:dragDirection];
      (void) [onSwipe setTouchAnchorIdWithInt:touchAnchorId];
      if (touchAnchorSide != -1) {
        (void) [onSwipe setTouchAnchorSideWithInt:touchAnchorSide];
      }
      [((ADXMotionScene_Transition *) nil_chk(transition_)) setOnSwipeWithADXOnSwipe:onSwipe];
      id<ASIWidget> widget;
      if (touchAnchorId == -1) {
        widget = this$0_;
      }
      else {
        widget = [this$0_ findWidgetByIdWithNSString:ASIdGenerator_getNameWithInt_(touchAnchorId)];
      }
      ASMotionLayoutImpl_nativeAddOnSwipeWithADXMotionScene_Transition_withASIWidget_(this$0_, transition_, widget);
      break;
    }
    case 10:
    {
      this$0_->keyFrames_ = new_ADXKeyFrames_init();
      [((ADXMotionScene_Transition *) nil_chk(transition_)) addKeyFrameWithADXKeyFrames:this$0_->keyFrames_];
      break;
    }
    case 11:
    {
      ADXKeyPosition *keyPosition = new_ADXKeyPosition_init();
      ASMotionLayoutImpl_parseKeyPositionWithASIWidget_withADXKeyPosition_withOrgXmlSaxAttributes_(this$0_, this$0_, keyPosition, atts);
      [((ADXKeyFrames *) nil_chk(this$0_->keyFrames_)) addKeyWithADXKey:keyPosition];
      break;
    }
    case 12:
    {
      ADXKeyTrigger *keyTrigger = new_ADXKeyTrigger_init();
      ASMotionLayoutImpl_parseKeyTriggerWithASIWidget_withADXKeyTrigger_withOrgXmlSaxAttributes_(this$0_, this$0_, keyTrigger, atts);
      [((JavaUtilHashMap *) nil_chk(keyTrigger->mCustomConstraints_)) putAllWithJavaUtilMap:mCustomConstraints_];
      [((ADXKeyFrames *) nil_chk(this$0_->keyFrames_)) addKeyWithADXKey:keyTrigger];
      break;
    }
    case 13:
    {
      ADXKeyCycle *keyCycle = new_ADXKeyCycle_init();
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *name = [atts getLocalNameWithInt:i];
        NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
        switch (JreIndexOfStr(name, (id[]){ @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"alpha", @"elevation", @"motionProgress", @"transitionPathRotate", @"translationX", @"translationY", @"translationZ", @"waveOffset", @"wavePeriod", @"waveShape", @"waveVariesBy", @"wavePhase", @"framePosition", @"curveFit", @"motionTarget", @"transitionEasing" }, 21)) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 9:
          case 10:
          case 11:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"dimensionfloat"], [JavaLangFloat class])];
          break;
          case 12:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 13:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 14:
          [keyCycle setValueWithNSString:name withId:JavaLangInteger_valueOfWithInt_((jint) ASMotionLayoutImpl_getWaveShapeWithNSString_(this$0_, value))];
          break;
          case 15:
          keyCycle->mWaveVariesBy_ = (jint) ASMotionLayoutImpl_getWaveVariesByWithNSString_(this$0_, value);
          break;
          case 16:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 17:
          [keyCycle setFramePositionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"int"], [JavaLangInteger class]))) intValue]];
          break;
          case 18:
          [keyCycle setValueWithNSString:name withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getCurveFitWithNSString_(this$0_, value))];
          break;
          case 19:
          (void) [keyCycle setViewIdWithInt:(jint) ASMotionLayoutImpl_getIdWithNSString_(this$0_, value)];
          break;
          case 20:
          [keyCycle setValueWithNSString:name withId:value];
          break;
          default:
          break;
        }
      }
      [((ADXKeyFrames *) nil_chk(this$0_->keyFrames_)) addKeyWithADXKey:keyCycle];
      break;
    }
    case 14:
    {
      ADXKeyTimeCycle *keyCycle = new_ADXKeyTimeCycle_init();
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *name = [atts getLocalNameWithInt:i];
        NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
        switch (JreIndexOfStr(name, (id[]){ @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"alpha", @"elevation", @"motionProgress", @"transitionPathRotate", @"translationX", @"translationY", @"translationZ", @"waveOffset", @"wavePeriod", @"waveShape", @"wavePhase", @"framePosition", @"curveFit", @"motionTarget", @"transitionEasing" }, 20)) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 9:
          case 10:
          case 11:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"dimensionfloat"], [JavaLangFloat class])];
          break;
          case 12:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 13:
          [keyCycle setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 14:
          [keyCycle setValueWithNSString:name withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getWaveShapeWithNSString_(this$0_, value))];
          break;
          case 15:
          [keyCycle setValueWithNSString:name withId:[this$0_ quickConvertWithId:value withNSString:@"float"]];
          break;
          case 16:
          [keyCycle setFramePositionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"int"], [JavaLangInteger class]))) intValue]];
          break;
          case 17:
          [keyCycle setValueWithNSString:name withId:JavaLangInteger_valueOfWithInt_(ASMotionLayoutImpl_getCurveFitWithNSString_(this$0_, value))];
          break;
          case 18:
          (void) [keyCycle setViewIdWithInt:(jint) ASMotionLayoutImpl_getIdWithNSString_(this$0_, value)];
          break;
          case 19:
          [keyCycle setValueWithNSString:name withId:value];
          break;
          default:
          break;
        }
      }
      [((ADXKeyFrames *) nil_chk(this$0_->keyFrames_)) addKeyWithADXKey:keyCycle];
      break;
    }
    case 15:
    {
      ADXKeyAttributes *keyAttribute = new_ADXKeyAttributes_init();
      for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
        NSString *name = [atts getLocalNameWithInt:i];
        NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
        switch (JreIndexOfStr(name, (id[]){ @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"alpha", @"elevation", @"motionProgress", @"transitionPathRotate", @"transformPivotX", @"transformPivotY", @"translationX", @"translationY", @"translationZ", @"framePosition", @"motionTarget", @"transitionEasing", @"curveFit" }, 18)) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          [keyAttribute setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class])];
          break;
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          [keyAttribute setValueWithNSString:name withId:(JavaLangFloat *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"dimensionfloat"], [JavaLangFloat class])];
          break;
          case 14:
          [keyAttribute setFramePositionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([this$0_ quickConvertWithId:value withNSString:@"int"], [JavaLangInteger class]))) intValue]];
          break;
          case 15:
          (void) [keyAttribute setViewIdWithInt:(jint) ASMotionLayoutImpl_getIdWithNSString_(this$0_, value)];
          break;
          case 16:
          [keyAttribute setValueWithNSString:name withId:value];
          break;
          case 17:
          [keyAttribute setValueWithNSString:name withId:JavaLangInteger_valueOfWithInt_((jint) ASMotionLayoutImpl_getCurveFitWithNSString_(this$0_, value))];
          break;
          default:
          break;
        }
      }
      [((ADXKeyFrames *) nil_chk(this$0_->keyFrames_)) addKeyWithADXKey:keyAttribute];
      break;
    }
    default:
    break;
  }
  (void) [((JavaUtilStack *) nil_chk(parents_)) pushWithId:localName];
}

- (jint)getClickActionWithNSString:(NSString *)value {
  return ASMotionLayoutImpl_1_getClickActionWithNSString_(self, value);
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  switch (JreIndexOfStr(localName, (id[]){ @"ConstraintSet", @"Constraint", @"KeyFrameSet" }, 3)) {
    case 0:
    [((ADXMotionScene *) nil_chk([((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) getScene])) setConstraintSetWithInt:constraintSetId_ withADXConstraintSet:constraintSet_];
    break;
    case 1:
    break;
    case 2:
    [((JavaUtilHashMap *) nil_chk(mCustomConstraints_)) clear];
    ;
    break;
    default:
    break;
  }
  (void) [((JavaUtilStack *) nil_chk(parents_)) pop];
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length {
}

- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length {
}

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data {
}

- (void)skippedEntityWithNSString:(NSString *)name {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASMotionLayoutImpl:);
  methods[1].selector = @selector(setDocumentLocatorWithOrgXmlSaxLocator:);
  methods[2].selector = @selector(startDocument);
  methods[3].selector = @selector(endDocument);
  methods[4].selector = @selector(startPrefixMappingWithNSString:withNSString:);
  methods[5].selector = @selector(endPrefixMappingWithNSString:);
  methods[6].selector = @selector(startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:);
  methods[7].selector = @selector(getClickActionWithNSString:);
  methods[8].selector = @selector(endElementWithNSString:withNSString:withNSString:);
  methods[9].selector = @selector(charactersWithCharArray:withInt:withInt:);
  methods[10].selector = @selector(ignorableWhitespaceWithCharArray:withInt:withInt:);
  methods[11].selector = @selector(processingInstructionWithNSString:withNSString:);
  methods[12].selector = @selector(skippedEntityWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASMotionLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "constraintSet_", "LADXConstraintSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "constraintSetId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transition_", "LADXMotionScene_Transition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parents_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "mCustomConstraints_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LASMotionLayoutImpl;", "setDocumentLocator", "LOrgXmlSaxLocator;", "LOrgXmlSaxSAXException;", "startPrefixMapping", "LNSString;LNSString;", "endPrefixMapping", "LNSString;", "startElement", "LNSString;LNSString;LNSString;LOrgXmlSaxAttributes;", "getClickAction", "endElement", "LNSString;LNSString;LNSString;", "characters", "[CII", "ignorableWhitespace", "processingInstruction", "skippedEntity", "Ljava/util/Stack<Ljava/lang/String;>;", "Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/widget/ConstraintAttribute;>;", "setLayoutDescriptionWithId:" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_1 = { "", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x8010, 13, 6, 0, -1, 20, -1, -1 };
  return &_ASMotionLayoutImpl_1;
}

@end

void ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(ASMotionLayoutImpl_1 *self, ASMotionLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->parents_ = new_JavaUtilStack_init();
  self->mCustomConstraints_ = new_JavaUtilHashMap_init();
}

ASMotionLayoutImpl_1 *new_ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_1, initWithASMotionLayoutImpl_, outer$)
}

ASMotionLayoutImpl_1 *create_ASMotionLayoutImpl_1_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_1, initWithASMotionLayoutImpl_, outer$)
}

jint ASMotionLayoutImpl_1_getClickActionWithNSString_(ASMotionLayoutImpl_1 *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"toggle", @"transitionToEnd", @"transitionToStart", @"jumpToEnd", @"jumpToStart" }, 5)) {
    case 0:
    return ADXMotionScene_Transition_TransitionOnClick_ANIM_TOGGLE;
    case 1:
    return ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_END;
    case 2:
    return ADXMotionScene_Transition_TransitionOnClick_ANIM_TO_START;
    case 3:
    return ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_END;
    case 4:
    return ADXMotionScene_Transition_TransitionOnClick_JUMP_TO_START;
    default:
    break;
  }
  return 0;
}

@implementation ASMotionLayoutImpl_TransitionFlagsConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMotionLayoutImpl_TransitionFlagsConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASMotionLayoutImpl;" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_TransitionFlagsConverter = { "TransitionFlagsConverter", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASMotionLayoutImpl_TransitionFlagsConverter;
}

@end

void ASMotionLayoutImpl_TransitionFlagsConverter_init(ASMotionLayoutImpl_TransitionFlagsConverter *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"beginOnFirstDraw" withId:JavaLangInteger_valueOfWithInt_(1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"disableIntraAutoTransition" withId:JavaLangInteger_valueOfWithInt_(2)];
  }
}

ASMotionLayoutImpl_TransitionFlagsConverter *new_ASMotionLayoutImpl_TransitionFlagsConverter_init() {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_TransitionFlagsConverter, init)
}

ASMotionLayoutImpl_TransitionFlagsConverter *create_ASMotionLayoutImpl_TransitionFlagsConverter_init() {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_TransitionFlagsConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMotionLayoutImpl_TransitionFlagsConverter)

@implementation ASMotionLayoutImpl_2

- (instancetype)initWithASMotionLayoutImpl:(ASMotionLayoutImpl *)outer$
             withADXMotionScene_Transition:(ADXMotionScene_Transition *)capture$0 {
  ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(self, outer$, capture$0);
  return self;
}

- (void)handlePanStartWithASIWidget:(id<ASIWidget>)widget
                             withId:(id)eventWidget
                            withInt:(jint)x
                            withInt:(jint)y {
  this$0_->action_ = 1;
  ASMotionLayoutImpl_processTouchEventWithADXMotionScene_Transition_withInt_withInt_withInt_(this$0_, val$transition_, ADMotionEvent_ACTION_DOWN, x, y);
}

- (void)handlePanDragWithASIWidget:(id<ASIWidget>)widget
                            withId:(id)eventWidget
                           withInt:(jint)x
                           withInt:(jint)y {
  if (this$0_->action_ == 1) {
    ASMotionLayoutImpl_processTouchEventWithADXMotionScene_Transition_withInt_withInt_withInt_(this$0_, val$transition_, ADMotionEvent_ACTION_MOVE, x, y);
  }
}

- (void)handlePanEndWithASIWidget:(id<ASIWidget>)widget
                           withId:(id)eventWidget
                          withInt:(jint)x
                          withInt:(jint)y {
  if (this$0_->action_ == 1) {
    ASMotionLayoutImpl_processTouchEventWithADXMotionScene_Transition_withInt_withInt_withInt_(this$0_, val$transition_, ADMotionEvent_ACTION_UP, x, y);
    this$0_->action_ = 0;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASMotionLayoutImpl:withADXMotionScene_Transition:);
  methods[1].selector = @selector(handlePanStartWithASIWidget:withId:withInt:withInt:);
  methods[2].selector = @selector(handlePanDragWithASIWidget:withId:withInt:withInt:);
  methods[3].selector = @selector(handlePanEndWithASIWidget:withId:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASMotionLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$transition_", "LADXMotionScene_Transition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASMotionLayoutImpl;LADXMotionScene_Transition;", "handlePanStart", "LASIWidget;LNSObject;II", "handlePanDrag", "handlePanEnd", "LASMotionLayoutImpl;", "nativeAddOnSwipeWithADXMotionScene_Transition:withASIWidget:" };
  static const J2ObjcClassInfo _ASMotionLayoutImpl_2 = { "", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x8010, 4, 2, 5, -1, 6, -1, -1 };
  return &_ASMotionLayoutImpl_2;
}

@end

void ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(ASMotionLayoutImpl_2 *self, ASMotionLayoutImpl *outer$, ADXMotionScene_Transition *capture$0) {
  self->this$0_ = outer$;
  self->val$transition_ = capture$0;
  NSObject_init(self);
}

ASMotionLayoutImpl_2 *new_ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(ASMotionLayoutImpl *outer$, ADXMotionScene_Transition *capture$0) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_2, initWithASMotionLayoutImpl_withADXMotionScene_Transition_, outer$, capture$0)
}

ASMotionLayoutImpl_2 *create_ASMotionLayoutImpl_2_initWithASMotionLayoutImpl_withADXMotionScene_Transition_(ASMotionLayoutImpl *outer$, ADXMotionScene_Transition *capture$0) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_2, initWithASMotionLayoutImpl_withADXMotionScene_Transition_, outer$, capture$0)
}

@implementation ASMotionLayoutImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(ASMotionLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASMotionLayoutImpl_$Lambda$1 *new_ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASMotionLayoutImpl_$Lambda$1 *create_ASMotionLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

@implementation ASMotionLayoutImpl_$Lambda$2

- (void)run {
  [((ADXMotionLayout *) nil_chk(this$0_->motionLayout_)) onTouchEventWithADMotionEvent:this$0_->motionEvent_];
}

@end

void ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(ASMotionLayoutImpl_$Lambda$2 *self, ASMotionLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASMotionLayoutImpl_$Lambda$2 *new_ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASMotionLayoutImpl_$Lambda$2, initWithASMotionLayoutImpl_, outer$)
}

ASMotionLayoutImpl_$Lambda$2 *create_ASMotionLayoutImpl_$Lambda$2_initWithASMotionLayoutImpl_(ASMotionLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASMotionLayoutImpl_$Lambda$2, initWithASMotionLayoutImpl_, outer$)
}
