//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\ConstraintLayoutImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "ConstraintLayout.h"
#include "ConstraintLayoutImpl.h"
#include "ConverterFactory.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "HasWidgets.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASConstraintLayoutImpl () {
 @public
  id uiView_;
  ADXConstraintLayout *constraintLayout_;
}

- (void)addDellocHandler;

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXConstraintLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                                withId:(id)objValue;

- (void)setLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                               withId:(id)objValue;

- (id)getLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams;

- (id)getLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams;

- (void)setOptimizationLevelWithId:(id)objValue;

- (id)getOptimizationLevel;

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl, constraintLayout_, ADXConstraintLayout *)

inline NSString *ASConstraintLayoutImpl_get_DELLOC_EVENT(void);
static NSString *ASConstraintLayoutImpl_DELLOC_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASConstraintLayoutImpl, DELLOC_EVENT, NSString *)

__attribute__((unused)) static void ASConstraintLayoutImpl_addDellocHandler(ASConstraintLayoutImpl *self);

__attribute__((unused)) static void ASConstraintLayoutImpl_setWidgetOnNativeClass(ASConstraintLayoutImpl *self);

__attribute__((unused)) static void ASConstraintLayoutImpl_nativeRemoveViewWithASIWidget_(ASConstraintLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASConstraintLayoutImpl_createLayoutParamsWithADView_(ASConstraintLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADXConstraintLayout_LayoutParams *ASConstraintLayoutImpl_getLayoutParamsWithADView_(ASConstraintLayoutImpl *self, ADView *view);

__attribute__((unused)) static void ASConstraintLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static void ASConstraintLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static id ASConstraintLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams);

__attribute__((unused)) static id ASConstraintLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams);

__attribute__((unused)) static void ASConstraintLayoutImpl_setOptimizationLevelWithId_(ASConstraintLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASConstraintLayoutImpl_getOptimizationLevel(ASConstraintLayoutImpl *self);

@interface ASConstraintLayoutImpl_DallocHandler () {
 @public
  WEAK_ ASConstraintLayoutImpl *this$0_;
}

@end

@interface ASConstraintLayoutImpl_OptimizationLevel () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_OptimizationLevel, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_constraintWidth () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_constraintWidth, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_constraintHeight () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_constraintHeight, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_constraintWidth_default () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_constraintWidth_default, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_constraintHeight_default () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_constraintHeight_default, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_Layout_wrapBehaviorInParent () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_Layout_wrapBehaviorInParent, mapping_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_ConstraintLayoutExt () {
 @public
  WEAK_ ASConstraintLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_ConstraintLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_ConstraintLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_ConstraintLayoutExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASConstraintLayoutImpl_ConstraintLayoutExt, templates_, id<JavaUtilMap>)

@interface ASConstraintLayoutImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASConstraintLayoutImpl_$Lambda$1)

__attribute__((unused)) static void ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(ASConstraintLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASConstraintLayoutImpl_$Lambda$1 *new_ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASConstraintLayoutImpl_$Lambda$1 *create_ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


J2OBJC_INITIALIZED_DEFN(ASConstraintLayoutImpl)

NSString *ASConstraintLayoutImpl_LOCAL_NAME = @"androidx.constraintlayout.widget.ConstraintLayout";
NSString *ASConstraintLayoutImpl_GROUP_NAME = @"androidx.constraintlayout.widget.ConstraintLayout";

@implementation ASConstraintLayoutImpl

@synthesize uiView = uiView_;

- (void)addDellocHandler {
  ASConstraintLayoutImpl_addDellocHandler(self);
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.optimizationLevel", new_ASConstraintLayoutImpl_OptimizationLevel_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"optimizationLevel"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.optimizationLevel"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_optimizationLevel"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.optimizationLevel"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.orientation", new_ASConstraintLayoutImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_orientation"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.orientation"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintCircle"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintCircleRadius"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintCircleAngle"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintGuide_begin"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintGuide_end"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintGuide_percent"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintLeft_toLeftOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintLeft_toRightOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintRight_toLeftOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintRight_toRightOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintTop_toTopOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintTop_toBottomOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBottom_toTopOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBottom_toBottomOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBaseline_toBaselineOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBaseline_toTopOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintBaseline_toBottomOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintStart_toEndOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintStart_toStartOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintEnd_toStartOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintEnd_toEndOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginLeft"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginTop"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginRight"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginBottom"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginStart"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginEnd"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_goneMarginBaseline"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginBaseline"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintWidth", new_ASConstraintLayoutImpl_Layout_constraintWidth_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintWidth"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintHeight", new_ASConstraintLayoutImpl_Layout_constraintHeight_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintHeight"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constrainedWidth"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constrainedHeight"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHorizontal_bias"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintVertical_bias"])) withTypeWithNSString:@"float"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintWidth_default", new_ASConstraintLayoutImpl_Layout_constraintWidth_default_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_default"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintWidth_default"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintHeight_default", new_ASConstraintLayoutImpl_Layout_constraintHeight_default_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_default"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintHeight_default"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_min"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_max"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintWidth_percent"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_min"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_max"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHeight_percent"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintDimensionRatio"])) withTypeWithNSString:@"string"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHorizontal_weight"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintVertical_weight"])) withTypeWithNSString:@"float"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintHorizontal_chainStyle", new_ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintHorizontal_chainStyle"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintHorizontal_chainStyle"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintVertical_chainStyle", new_ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintVertical_chainStyle"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_constraintVertical_chainStyle"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_editor_absoluteX"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_editor_absoluteY"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_constraintTag"])) withTypeWithNSString:@"string"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.widget.ConstraintLayout.layout_wrapBehaviorInParent", new_ASConstraintLayoutImpl_Layout_wrapBehaviorInParent_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_wrapBehaviorInParent"])) withTypeWithNSString:@"androidx.constraintlayout.widget.ConstraintLayout.layout_wrapBehaviorInParent"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASConstraintLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASConstraintLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASConstraintLayoutImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  constraintLayout_ = new_ASConstraintLayoutImpl_ConstraintLayoutExt_initWithASConstraintLayoutImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASConstraintLayoutImpl_addDellocHandler(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASConstraintLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASConstraintLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return constraintLayout_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADXConstraintLayout *) nil_chk(constraintLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASConstraintLayoutImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  bool remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXConstraintLayout *) nil_chk(constraintLayout_)) getChildCount]) {
    [((ADXConstraintLayout *) nil_chk(constraintLayout_)) removeViewAtWithInt:index];
    ASConstraintLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASConstraintLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASConstraintLayoutImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXConstraintLayout *) nil_chk(constraintLayout_)) addViewWithADView:view];
    }
    else {
      [((ADXConstraintLayout *) nil_chk(constraintLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASConstraintLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXConstraintLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASConstraintLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXConstraintLayout_LayoutParams *layoutParams = ASConstraintLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_orientation", @"layout_constraintCircle", @"layout_constraintCircleRadius", @"layout_constraintCircleAngle", @"layout_constraintGuide_begin", @"layout_constraintGuide_end", @"layout_constraintGuide_percent", @"layout_constraintLeft_toLeftOf", @"layout_constraintLeft_toRightOf", @"layout_constraintRight_toLeftOf", @"layout_constraintRight_toRightOf", @"layout_constraintTop_toTopOf", @"layout_constraintTop_toBottomOf", @"layout_constraintBottom_toTopOf", @"layout_constraintBottom_toBottomOf", @"layout_constraintBaseline_toBaselineOf", @"layout_constraintBaseline_toTopOf", @"layout_constraintBaseline_toBottomOf", @"layout_constraintStart_toEndOf", @"layout_constraintStart_toStartOf", @"layout_constraintEnd_toStartOf", @"layout_constraintEnd_toEndOf", @"layout_goneMarginLeft", @"layout_goneMarginTop", @"layout_goneMarginRight", @"layout_goneMarginBottom", @"layout_goneMarginStart", @"layout_goneMarginEnd", @"layout_goneMarginBaseline", @"layout_marginBaseline", @"layout_constraintWidth", @"layout_constraintHeight", @"layout_constrainedWidth", @"layout_constrainedHeight", @"layout_constraintHorizontal_bias", @"layout_constraintVertical_bias", @"layout_constraintWidth_default", @"layout_constraintHeight_default", @"layout_constraintWidth_min", @"layout_constraintWidth_max", @"layout_constraintWidth_percent", @"layout_constraintHeight_min", @"layout_constraintHeight_max", @"layout_constraintHeight_percent", @"layout_constraintDimensionRatio", @"layout_constraintHorizontal_weight", @"layout_constraintVertical_weight", @"layout_constraintHorizontal_chainStyle", @"layout_constraintVertical_chainStyle", @"layout_editor_absoluteX", @"layout_editor_absoluteY", @"layout_constraintTag", @"layout_wrapBehaviorInParent" }, 55)) {
    case 0:
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->orientation_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleConstraint_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 4:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleRadius_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 5:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleAngle_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 6:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideBegin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 7:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 8:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guidePercent_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 9:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->leftToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 10:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->leftToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 11:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->rightToLeft_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 12:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->rightToRight_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 13:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->topToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 14:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->topToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 15:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->bottomToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 16:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->bottomToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 17:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBaseline_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 18:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->baselineToTop_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 19:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->baselineToBottom_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 20:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->startToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 21:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->startToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 22:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToStart_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->endToStart_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 23:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToEnd_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
      if ([((NSString *) nil_chk(strValue)) isEqual:@"parent"]) {
        layoutParams->endToEnd_ = ADXConstraintLayout_LayoutParams_PARENT_ID;
      }
    }
    break;
    case 24:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneLeftMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 25:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneTopMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 26:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneRightMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 27:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBottomMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 28:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneStartMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 29:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneEndMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 30:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBaselineMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 31:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineMargin_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 32:
    {
      ASConstraintLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
    }
    break;
    case 33:
    {
      ASConstraintLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
    }
    break;
    case 34:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedWidth_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    case 35:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedHeight_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    case 36:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalBias_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 37:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalBias_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 38:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultWidth_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 39:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultHeight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 40:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinWidth_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 41:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxWidth_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 42:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentWidth_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 43:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinHeight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 44:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxHeight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 45:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentHeight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 46:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->dimensionRatio_ = ((NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 47:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalWeight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 48:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalWeight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 49:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalChainStyle_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 50:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalChainStyle_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 51:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteX_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 52:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteY_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 53:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constraintTag_ = ((NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 54:
    {
      ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->wrapBehaviorInParent_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXConstraintLayout_LayoutParams *layoutParams = ASConstraintLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_orientation", @"layout_constraintCircle", @"layout_constraintCircleRadius", @"layout_constraintCircleAngle", @"layout_constraintGuide_begin", @"layout_constraintGuide_end", @"layout_constraintGuide_percent", @"layout_constraintLeft_toLeftOf", @"layout_constraintLeft_toRightOf", @"layout_constraintRight_toLeftOf", @"layout_constraintRight_toRightOf", @"layout_constraintTop_toTopOf", @"layout_constraintTop_toBottomOf", @"layout_constraintBottom_toTopOf", @"layout_constraintBottom_toBottomOf", @"layout_constraintBaseline_toBaselineOf", @"layout_constraintBaseline_toTopOf", @"layout_constraintBaseline_toBottomOf", @"layout_constraintStart_toEndOf", @"layout_constraintStart_toStartOf", @"layout_constraintEnd_toStartOf", @"layout_constraintEnd_toEndOf", @"layout_goneMarginLeft", @"layout_goneMarginTop", @"layout_goneMarginRight", @"layout_goneMarginBottom", @"layout_goneMarginStart", @"layout_goneMarginEnd", @"layout_goneMarginBaseline", @"layout_marginBaseline", @"layout_constraintWidth", @"layout_constraintHeight", @"layout_constrainedWidth", @"layout_constrainedHeight", @"layout_constraintHorizontal_bias", @"layout_constraintVertical_bias", @"layout_constraintWidth_default", @"layout_constraintHeight_default", @"layout_constraintWidth_min", @"layout_constraintWidth_max", @"layout_constraintWidth_percent", @"layout_constraintHeight_min", @"layout_constraintHeight_max", @"layout_constraintHeight_percent", @"layout_constraintDimensionRatio", @"layout_constraintHorizontal_weight", @"layout_constraintVertical_weight", @"layout_constraintHorizontal_chainStyle", @"layout_constraintVertical_chainStyle", @"layout_editor_absoluteX", @"layout_editor_absoluteY", @"layout_constraintTag", @"layout_wrapBehaviorInParent" }, 55)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->orientation_);
    }
    case 3:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleConstraint_);
    }
    case 4:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleRadius_);
    }
    case 5:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->circleAngle_);
    }
    case 6:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideBegin_);
    }
    case 7:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guideEnd_);
    }
    case 8:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->guidePercent_);
    }
    case 9:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToLeft_);
    }
    case 10:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->leftToRight_);
    }
    case 11:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToLeft_);
    }
    case 12:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->rightToRight_);
    }
    case 13:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToTop_);
    }
    case 14:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->topToBottom_);
    }
    case 15:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToTop_);
    }
    case 16:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->bottomToBottom_);
    }
    case 17:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBaseline_);
    }
    case 18:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToTop_);
    }
    case 19:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineToBottom_);
    }
    case 20:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToEnd_);
    }
    case 21:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->startToStart_);
    }
    case 22:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToStart_);
    }
    case 23:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->endToEnd_);
    }
    case 24:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneLeftMargin_);
    }
    case 25:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneTopMargin_);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneRightMargin_);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBottomMargin_);
    }
    case 28:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneStartMargin_);
    }
    case 29:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneEndMargin_);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->goneBaselineMargin_);
    }
    case 31:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->baselineMargin_);
    }
    case 32:
    {
      return ASConstraintLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(self, layoutParams);
    }
    case 33:
    {
      return ASConstraintLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(self, layoutParams);
    }
    case 34:
    {
      return JavaLangBoolean_valueOfWithBoolean_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedWidth_);
    }
    case 35:
    {
      return JavaLangBoolean_valueOfWithBoolean_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constrainedHeight_);
    }
    case 36:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalBias_);
    }
    case 37:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalBias_);
    }
    case 38:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultWidth_);
    }
    case 39:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintDefaultHeight_);
    }
    case 40:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinWidth_);
    }
    case 41:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxWidth_);
    }
    case 42:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentWidth_);
    }
    case 43:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMinHeight_);
    }
    case 44:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintMaxHeight_);
    }
    case 45:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->matchConstraintPercentHeight_);
    }
    case 46:
    {
      return ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->dimensionRatio_;
    }
    case 47:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalWeight_);
    }
    case 48:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalWeight_);
    }
    case 49:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->horizontalChainStyle_);
    }
    case 50:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->verticalChainStyle_);
    }
    case 51:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteX_);
    }
    case 52:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->editorAbsoluteY_);
    }
    case 53:
    {
      return ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->constraintTag_;
    }
    case 54:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->wrapBehaviorInParent_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASConstraintLayoutImpl_ConstraintLayoutExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"optimizationLevel" }, 5)) {
    case 0:
    {
      [((ADXConstraintLayout *) nil_chk(constraintLayout_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADXConstraintLayout *) nil_chk(constraintLayout_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      [((ADXConstraintLayout *) nil_chk(constraintLayout_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      [((ADXConstraintLayout *) nil_chk(constraintLayout_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      ASConstraintLayoutImpl_setOptimizationLevelWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"layout_optimizationLevel", @"optimizationLevel" }, 6)) {
    case 0:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXConstraintLayout *) nil_chk(constraintLayout_)) getMinWidth]);
    }
    case 1:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXConstraintLayout *) nil_chk(constraintLayout_)) getMinHeight]);
    }
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXConstraintLayout *) nil_chk(constraintLayout_)) getMaxWidth]);
    }
    case 3:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXConstraintLayout *) nil_chk(constraintLayout_)) getMaxHeight]);
    }
    case 4:
    case 5:
    {
      return ASConstraintLayoutImpl_getOptimizationLevel(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                                withId:(id)objValue {
  ASConstraintLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
}

- (void)setLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                                               withId:(id)objValue {
  ASConstraintLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(self, layoutParams, objValue);
}

- (id)getLayout_constraintHeightWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams {
  return ASConstraintLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(self, layoutParams);
}

- (id)getLayout_constraintWidthWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams {
  return ASConstraintLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(self, layoutParams);
}

- (void)setOptimizationLevelWithId:(id)objValue {
  ASConstraintLayoutImpl_setOptimizationLevelWithId_(self, objValue);
}

- (id)getOptimizationLevel {
  return ASConstraintLayoutImpl_getOptimizationLevel(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXConstraintLayout *) nil_chk(constraintLayout_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXConstraintLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 32, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addDellocHandler);
  methods[1].selector = @selector(loadAttributesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(removeWithASIWidget:);
  methods[10].selector = @selector(removeWithInt:);
  methods[11].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[12].selector = @selector(addWithASIWidget:withInt:);
  methods[13].selector = @selector(createLayoutParamsWithADView:);
  methods[14].selector = @selector(getLayoutParamsWithADView:);
  methods[15].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[16].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[17].selector = @selector(getViewClass);
  methods[18].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[19].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[20].selector = @selector(asNativeWidget);
  methods[21].selector = @selector(checkIosVersionWithNSString:);
  methods[22].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[23].selector = @selector(requestLayout);
  methods[24].selector = @selector(invalidate);
  methods[25].selector = @selector(setLayout_constraintHeightWithADXConstraintLayout_LayoutParams:withId:);
  methods[26].selector = @selector(setLayout_constraintWidthWithADXConstraintLayout_LayoutParams:withId:);
  methods[27].selector = @selector(getLayout_constraintHeightWithADXConstraintLayout_LayoutParams:);
  methods[28].selector = @selector(getLayout_constraintWidthWithADXConstraintLayout_LayoutParams:);
  methods[29].selector = @selector(setOptimizationLevelWithId:);
  methods[30].selector = @selector(getOptimizationLevel);
  methods[31].selector = @selector(setIdWithNSString:);
  methods[32].selector = @selector(setVisibleWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "constraintLayout_", "LADXConstraintLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DELLOC_EVENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setLayout_constraintHeight", "LADXConstraintLayout_LayoutParams;LNSObject;", "setLayout_constraintWidth", "getLayout_constraintHeight", "LADXConstraintLayout_LayoutParams;", "getLayout_constraintWidth", "setOptimizationLevel", "LNSObject;", "setId", "setVisible", "Z", &ASConstraintLayoutImpl_LOCAL_NAME, &ASConstraintLayoutImpl_GROUP_NAME, &ASConstraintLayoutImpl_DELLOC_EVENT, "LASConstraintLayoutImpl_DallocHandler;LASConstraintLayoutImpl_OptimizationLevel;LASConstraintLayoutImpl_Orientation;LASConstraintLayoutImpl_Layout_constraintWidth;LASConstraintLayoutImpl_Layout_constraintHeight;LASConstraintLayoutImpl_Layout_constraintWidth_default;LASConstraintLayoutImpl_Layout_constraintHeight_default;LASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle;LASConstraintLayoutImpl_Layout_constraintVertical_chainStyle;LASConstraintLayoutImpl_Layout_wrapBehaviorInParent;LASConstraintLayoutImpl_ConstraintLayoutExt;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl = { "ConstraintLayoutImpl", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 33, 5, -1, 41, -1, -1, -1 };
  return &_ASConstraintLayoutImpl;
}

+ (void)initialize {
  if (self == [ASConstraintLayoutImpl class]) {
    ASConstraintLayoutImpl_DELLOC_EVENT = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    J2OBJC_SET_INITIALIZED(ASConstraintLayoutImpl)
  }
}

@end

void ASConstraintLayoutImpl_addDellocHandler(ASConstraintLayoutImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:ASConstraintLayoutImpl_DELLOC_EVENT withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASConstraintLayoutImpl_DallocHandler_initWithASConstraintLayoutImpl_withNSString_(self, ASConstraintLayoutImpl_DELLOC_EVENT) } count:1 type:ASEventBusHandler_class_()]];
}

void ASConstraintLayoutImpl_init(ASConstraintLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASConstraintLayoutImpl_GROUP_NAME, ASConstraintLayoutImpl_LOCAL_NAME);
}

ASConstraintLayoutImpl *new_ASConstraintLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl, init)
}

ASConstraintLayoutImpl *create_ASConstraintLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl, init)
}

void ASConstraintLayoutImpl_initWithNSString_(ASConstraintLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASConstraintLayoutImpl_GROUP_NAME, localname);
}

ASConstraintLayoutImpl *new_ASConstraintLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl, initWithNSString_, localname)
}

ASConstraintLayoutImpl *create_ASConstraintLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl, initWithNSString_, localname)
}

void ASConstraintLayoutImpl_initWithNSString_withNSString_(ASConstraintLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASConstraintLayoutImpl *new_ASConstraintLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASConstraintLayoutImpl *create_ASConstraintLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASConstraintLayoutImpl_setWidgetOnNativeClass(ASConstraintLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASConstraintLayoutImpl_nativeRemoveViewWithASIWidget_(ASConstraintLayoutImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXConstraintLayout *) nil_chk(self->constraintLayout_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASConstraintLayoutImpl_createLayoutParamsWithADView_(ASConstraintLayoutImpl *self, ADView *view) {
  ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXConstraintLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXConstraintLayout_LayoutParams *ASConstraintLayoutImpl_getLayoutParamsWithADView_(ASConstraintLayoutImpl *self, ADView *view) {
  return (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
}

void ASConstraintLayoutImpl_setLayout_constraintHeightWithADXConstraintLayout_LayoutParams_withId_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue) {
  ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  layoutParams->constrainedHeight_ = true;
}

void ASConstraintLayoutImpl_setLayout_constraintWidthWithADXConstraintLayout_LayoutParams_withId_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams, id objValue) {
  ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  layoutParams->constrainedWidth_ = true;
}

id ASConstraintLayoutImpl_getLayout_constraintHeightWithADXConstraintLayout_LayoutParams_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams) {
  return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->height_);
}

id ASConstraintLayoutImpl_getLayout_constraintWidthWithADXConstraintLayout_LayoutParams_(ASConstraintLayoutImpl *self, ADXConstraintLayout_LayoutParams *layoutParams) {
  return JavaLangInteger_valueOfWithInt_(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->width_);
}

void ASConstraintLayoutImpl_setOptimizationLevelWithId_(ASConstraintLayoutImpl *self, id objValue) {
  [((ADXConstraintLayout *) nil_chk(self->constraintLayout_)) setOptimizationLevelWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASConstraintLayoutImpl_getOptimizationLevel(ASConstraintLayoutImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXConstraintLayout *) nil_chk(self->constraintLayout_)) getOptimizationLevel]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl)

J2OBJC_NAME_MAPPING(ASConstraintLayoutImpl, "com.ashera.constraintlayout", "AS")

@implementation ASConstraintLayoutImpl_DallocHandler

- (instancetype)initWithASConstraintLayoutImpl:(ASConstraintLayoutImpl *)outer$
                                  withNSString:(NSString *)type {
  ASConstraintLayoutImpl_DallocHandler_initWithASConstraintLayoutImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  [((ADXConstraintLayout *) nil_chk(this$0_->constraintLayout_)) release__];
}

- (void)__javaClone:(ASConstraintLayoutImpl_DallocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASConstraintLayoutImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASConstraintLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASConstraintLayoutImpl;LNSString;", "doPerform", "LNSObject;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_DallocHandler = { "DallocHandler", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_DallocHandler;
}

@end

void ASConstraintLayoutImpl_DallocHandler_initWithASConstraintLayoutImpl_withNSString_(ASConstraintLayoutImpl_DallocHandler *self, ASConstraintLayoutImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASConstraintLayoutImpl_DallocHandler *new_ASConstraintLayoutImpl_DallocHandler_initWithASConstraintLayoutImpl_withNSString_(ASConstraintLayoutImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_DallocHandler, initWithASConstraintLayoutImpl_withNSString_, outer$, type)
}

ASConstraintLayoutImpl_DallocHandler *create_ASConstraintLayoutImpl_DallocHandler_initWithASConstraintLayoutImpl_withNSString_(ASConstraintLayoutImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_DallocHandler, initWithASConstraintLayoutImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_DallocHandler)

@implementation ASConstraintLayoutImpl_OptimizationLevel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_OptimizationLevel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_OptimizationLevel = { "OptimizationLevel", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_OptimizationLevel;
}

@end

void ASConstraintLayoutImpl_OptimizationLevel_init(ASConstraintLayoutImpl_OptimizationLevel *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"legacy" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"standard" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x257)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"direct" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"barrier" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"chains" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"dimensions" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ratio" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x16)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"groups" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x32)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"graph" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x64)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"graph_wrap" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x128)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"cache_measures" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x256)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"dependency_ordering" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x512)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"grouping" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1024)];
  }
}

ASConstraintLayoutImpl_OptimizationLevel *new_ASConstraintLayoutImpl_OptimizationLevel_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_OptimizationLevel, init)
}

ASConstraintLayoutImpl_OptimizationLevel *create_ASConstraintLayoutImpl_OptimizationLevel_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_OptimizationLevel, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_OptimizationLevel)

@implementation ASConstraintLayoutImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Orientation = { "Orientation", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Orientation;
}

@end

void ASConstraintLayoutImpl_Orientation_init(ASConstraintLayoutImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASConstraintLayoutImpl_Orientation *new_ASConstraintLayoutImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Orientation, init)
}

ASConstraintLayoutImpl_Orientation *create_ASConstraintLayoutImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Orientation)

@implementation ASConstraintLayoutImpl_Layout_constraintWidth

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_constraintWidth_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_constraintWidth = { "Layout_constraintWidth", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_constraintWidth;
}

@end

void ASConstraintLayoutImpl_Layout_constraintWidth_init(ASConstraintLayoutImpl_Layout_constraintWidth *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"match_parent" withId:JavaLangInteger_valueOfWithInt_(-1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content" withId:JavaLangInteger_valueOfWithInt_(-2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"match_constraint" withId:JavaLangInteger_valueOfWithInt_(-3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content_constrained" withId:JavaLangInteger_valueOfWithInt_(-4)];
  }
}

ASConstraintLayoutImpl_Layout_constraintWidth *new_ASConstraintLayoutImpl_Layout_constraintWidth_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_constraintWidth, init)
}

ASConstraintLayoutImpl_Layout_constraintWidth *create_ASConstraintLayoutImpl_Layout_constraintWidth_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_constraintWidth, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_constraintWidth)

@implementation ASConstraintLayoutImpl_Layout_constraintHeight

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_constraintHeight_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_constraintHeight = { "Layout_constraintHeight", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_constraintHeight;
}

@end

void ASConstraintLayoutImpl_Layout_constraintHeight_init(ASConstraintLayoutImpl_Layout_constraintHeight *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"match_parent" withId:JavaLangInteger_valueOfWithInt_(-1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content" withId:JavaLangInteger_valueOfWithInt_(-2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"match_constraint" withId:JavaLangInteger_valueOfWithInt_(-3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap_content_constrained" withId:JavaLangInteger_valueOfWithInt_(-4)];
  }
}

ASConstraintLayoutImpl_Layout_constraintHeight *new_ASConstraintLayoutImpl_Layout_constraintHeight_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_constraintHeight, init)
}

ASConstraintLayoutImpl_Layout_constraintHeight *create_ASConstraintLayoutImpl_Layout_constraintHeight_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_constraintHeight, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_constraintHeight)

@implementation ASConstraintLayoutImpl_Layout_constraintWidth_default

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_constraintWidth_default_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_constraintWidth_default = { "Layout_constraintWidth_default", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_constraintWidth_default;
}

@end

void ASConstraintLayoutImpl_Layout_constraintWidth_default_init(ASConstraintLayoutImpl_Layout_constraintWidth_default *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"percent" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASConstraintLayoutImpl_Layout_constraintWidth_default *new_ASConstraintLayoutImpl_Layout_constraintWidth_default_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_constraintWidth_default, init)
}

ASConstraintLayoutImpl_Layout_constraintWidth_default *create_ASConstraintLayoutImpl_Layout_constraintWidth_default_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_constraintWidth_default, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_constraintWidth_default)

@implementation ASConstraintLayoutImpl_Layout_constraintHeight_default

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_constraintHeight_default_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_constraintHeight_default = { "Layout_constraintHeight_default", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_constraintHeight_default;
}

@end

void ASConstraintLayoutImpl_Layout_constraintHeight_default_init(ASConstraintLayoutImpl_Layout_constraintHeight_default *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"wrap" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"percent" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASConstraintLayoutImpl_Layout_constraintHeight_default *new_ASConstraintLayoutImpl_Layout_constraintHeight_default_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_constraintHeight_default, init)
}

ASConstraintLayoutImpl_Layout_constraintHeight_default *create_ASConstraintLayoutImpl_Layout_constraintHeight_default_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_constraintHeight_default, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_constraintHeight_default)

@implementation ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle = { "Layout_constraintHorizontal_chainStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle;
}

@end

void ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle_init(ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle *new_ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle, init)
}

ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle *create_ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_constraintHorizontal_chainStyle)

@implementation ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle = { "Layout_constraintVertical_chainStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle;
}

@end

void ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle_init(ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle *new_ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle, init)
}

ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle *create_ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_constraintVertical_chainStyle)

@implementation ASConstraintLayoutImpl_Layout_wrapBehaviorInParent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintLayoutImpl_Layout_wrapBehaviorInParent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASConstraintLayoutImpl;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_Layout_wrapBehaviorInParent = { "Layout_wrapBehaviorInParent", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_Layout_wrapBehaviorInParent;
}

@end

void ASConstraintLayoutImpl_Layout_wrapBehaviorInParent_init(ASConstraintLayoutImpl_Layout_wrapBehaviorInParent *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"included" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"horizontal_only" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical_only" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"skipped" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
  }
}

ASConstraintLayoutImpl_Layout_wrapBehaviorInParent *new_ASConstraintLayoutImpl_Layout_wrapBehaviorInParent_init() {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_Layout_wrapBehaviorInParent, init)
}

ASConstraintLayoutImpl_Layout_wrapBehaviorInParent *create_ASConstraintLayoutImpl_Layout_wrapBehaviorInParent_init() {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_Layout_wrapBehaviorInParent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_Layout_wrapBehaviorInParent)

@implementation ASConstraintLayoutImpl_ConstraintLayoutExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (instancetype)initWithASConstraintLayoutImpl:(ASConstraintLayoutImpl *)outer$ {
  ASConstraintLayoutImpl_ConstraintLayoutExt_initWithASConstraintLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASConstraintLayoutImpl_ConstraintLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(initWithASConstraintLayoutImpl:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[6].selector = @selector(newInstanceWithASIWidget:);
  methods[7].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[8].selector = @selector(getMethods);
  methods[9].selector = @selector(initialized);
  methods[10].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[11].selector = @selector(drawableStateChanged);
  methods[12].selector = @selector(inflateViewWithNSString:);
  methods[13].selector = @selector(remeasure);
  methods[14].selector = @selector(removeFromParent);
  methods[15].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[16].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[17].selector = @selector(offsetTopAndBottomWithInt:);
  methods[18].selector = @selector(offsetLeftAndRightWithInt:);
  methods[19].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[20].selector = @selector(setVisibilityWithInt:);
  methods[21].selector = @selector(setState0WithId:);
  methods[22].selector = @selector(setState1WithId:);
  methods[23].selector = @selector(setState2WithId:);
  methods[24].selector = @selector(setState3WithId:);
  methods[25].selector = @selector(setState4WithId:);
  methods[26].selector = @selector(state0);
  methods[27].selector = @selector(state1);
  methods[28].selector = @selector(state2);
  methods[29].selector = @selector(state3);
  methods[30].selector = @selector(state4);
  methods[31].selector = @selector(stateYes);
  methods[32].selector = @selector(stateNo);
  methods[33].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASConstraintLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 35, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 36, -1 },
  };
  static const void *ptrTable[] = { "LASConstraintLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASConstraintLayoutImpl_ConstraintLayoutExt = { "ConstraintLayoutExt", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 34, 5, 0, -1, -1, -1, -1 };
  return &_ASConstraintLayoutImpl_ConstraintLayoutExt;
}

@end

void ASConstraintLayoutImpl_ConstraintLayoutExt_initWithASConstraintLayoutImpl_(ASConstraintLayoutImpl_ConstraintLayoutExt *self, ASConstraintLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADXConstraintLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASConstraintLayoutImpl_ConstraintLayoutExt *new_ASConstraintLayoutImpl_ConstraintLayoutExt_initWithASConstraintLayoutImpl_(ASConstraintLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_ConstraintLayoutExt, initWithASConstraintLayoutImpl_, outer$)
}

ASConstraintLayoutImpl_ConstraintLayoutExt *create_ASConstraintLayoutImpl_ConstraintLayoutExt_initWithASConstraintLayoutImpl_(ASConstraintLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_ConstraintLayoutExt, initWithASConstraintLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintLayoutImpl_ConstraintLayoutExt)

@implementation ASConstraintLayoutImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(ASConstraintLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASConstraintLayoutImpl_$Lambda$1 *new_ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASConstraintLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASConstraintLayoutImpl_$Lambda$1 *create_ASConstraintLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASConstraintLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
