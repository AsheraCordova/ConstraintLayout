//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\CarouselImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractEnumToIntConverter.h"
#include "BaseWidget.h"
#include "Carousel.h"
#include "CarouselImpl.h"
#include "ConverterFactory.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "ModelScope.h"
#include "MotionLayout.h"
#include "MotionScene.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIView.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASCarouselImpl () {
 @public
  NSString *dataKey_;
  ASModelScope *dataScopeKey_;
  NSString *childDataKey_;
  ASModelScope *childDataScopeKey_;
  id<ADXCarousel_Adapter> adapter_;
  id<ASCarouselImpl_CarouselListener_NewItemListener> listener_CarouselImpl_;
  ADXCarousel *carousel_;
}

- (void)setWidgetOnNativeClass;

- (void)updateModelRecurseWithASIWidget:(id<ASIWidget>)widget
                                 withId:(id)data;

- (void)setNewItemListenerWithId:(id)objValue;

- (void)setChildDataScopeKeyWithId:(id)objValue;

- (void)setDataScopeKeyWithId:(id)objValue;

- (void)setChildDataKeyWithId:(id)objValue;

- (void)setDataKeyWithId:(id)objValue;

- (void)transitionToLastWithInt:(int32_t)delay;

- (void)transitionToNextWithInt:(int32_t)delay;

- (void)transitionToPreviousWithInt:(int32_t)delay;

- (void)jumpToPrevious;

- (void)jumpToNext;

- (void)jumpTolast;

- (void)transitionToIndexWithInt:(int32_t)index
                         withInt:(int32_t)delay;

- (void)jumpToIndexWithInt:(int32_t)index;

- (void)setEmptyViewsBehaviorWithId:(id)objValue;

- (void)setTouchUpModeWithId:(id)objValue;

- (void)setTouchUp_velocityThresholdWithId:(id)objValue;

- (void)setTouchUp_dampeningFactorWithId:(id)objValue;

- (void)setBackwardTransitionWithId:(id)objValue;

- (void)setForwardTransitionWithId:(id)objValue;

- (void)setInfiniteWithId:(id)objValue;

- (void)setNextStateWithId:(id)objValue;

- (void)setPreviousStateWithId:(id)objValue;

- (void)setFirstViewWithId:(id)objValue;

- (id)getEmptyViewsBehavior;

- (id)getTouchUp_velocityThreshold;

- (id)getTouchUpMode;

- (id)getTouchUp_dampeningFactor;

- (id)getForwardTransition;

- (id)getBackwardTransition;

- (id)getInfinite;

- (id)getNextState;

- (id)getPreviousState;

- (id)getFirstView;

- (void)initItems OBJC_METHOD_FAMILY_NONE;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

@end

J2OBJC_FIELD_SETTER(ASCarouselImpl, dataKey_, NSString *)
J2OBJC_FIELD_SETTER(ASCarouselImpl, dataScopeKey_, ASModelScope *)
J2OBJC_FIELD_SETTER(ASCarouselImpl, childDataKey_, NSString *)
J2OBJC_FIELD_SETTER(ASCarouselImpl, childDataScopeKey_, ASModelScope *)
J2OBJC_FIELD_SETTER(ASCarouselImpl, adapter_, id<ADXCarousel_Adapter>)
J2OBJC_FIELD_SETTER(ASCarouselImpl, listener_CarouselImpl_, id<ASCarouselImpl_CarouselListener_NewItemListener>)
J2OBJC_FIELD_SETTER(ASCarouselImpl, carousel_, ADXCarousel *)

__attribute__((unused)) static void ASCarouselImpl_setWidgetOnNativeClass(ASCarouselImpl *self);

__attribute__((unused)) static void ASCarouselImpl_updateModelRecurseWithASIWidget_withId_(ASCarouselImpl *self, id<ASIWidget> widget, id data);

__attribute__((unused)) static void ASCarouselImpl_setNewItemListenerWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setChildDataScopeKeyWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setDataScopeKeyWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setChildDataKeyWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setDataKeyWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_transitionToLastWithInt_(ASCarouselImpl *self, int32_t delay);

__attribute__((unused)) static void ASCarouselImpl_transitionToNextWithInt_(ASCarouselImpl *self, int32_t delay);

__attribute__((unused)) static void ASCarouselImpl_transitionToPreviousWithInt_(ASCarouselImpl *self, int32_t delay);

__attribute__((unused)) static void ASCarouselImpl_jumpToPrevious(ASCarouselImpl *self);

__attribute__((unused)) static void ASCarouselImpl_jumpToNext(ASCarouselImpl *self);

__attribute__((unused)) static void ASCarouselImpl_jumpTolast(ASCarouselImpl *self);

__attribute__((unused)) static void ASCarouselImpl_transitionToIndexWithInt_withInt_(ASCarouselImpl *self, int32_t index, int32_t delay);

__attribute__((unused)) static void ASCarouselImpl_jumpToIndexWithInt_(ASCarouselImpl *self, int32_t index);

__attribute__((unused)) static void ASCarouselImpl_setEmptyViewsBehaviorWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setTouchUpModeWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setTouchUp_velocityThresholdWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setTouchUp_dampeningFactorWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setBackwardTransitionWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setForwardTransitionWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setInfiniteWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setNextStateWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setPreviousStateWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static void ASCarouselImpl_setFirstViewWithId_(ASCarouselImpl *self, id objValue);

__attribute__((unused)) static id ASCarouselImpl_getEmptyViewsBehavior(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getTouchUp_velocityThreshold(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getTouchUpMode(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getTouchUp_dampeningFactor(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getForwardTransition(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getBackwardTransition(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getInfinite(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getNextState(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getPreviousState(ASCarouselImpl *self);

__attribute__((unused)) static id ASCarouselImpl_getFirstView(ASCarouselImpl *self);

__attribute__((unused)) static void ASCarouselImpl_initItems(ASCarouselImpl *self);

__attribute__((unused)) static void ASCarouselImpl_nativeCreateWithJavaUtilMap_(ASCarouselImpl *self, id<JavaUtilMap> params);

@interface ASCarouselImpl_Carousel_touchUpMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASCarouselImpl_Carousel_touchUpMode, mapping_, id<JavaUtilMap>)

@interface ASCarouselImpl_Carousel_emptyViewsBehavior () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASCarouselImpl_Carousel_emptyViewsBehavior, mapping_, id<JavaUtilMap>)

@interface ASCarouselImpl_CarouselExt () {
 @public
  WEAK_ ASCarouselImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASCarouselImpl_CarouselExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASCarouselImpl_CarouselExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASCarouselImpl_CarouselExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASCarouselImpl_CarouselExt, templates_, id<JavaUtilMap>)

@interface ASCarouselImpl_1 : ASEventBusHandler {
 @public
  ASCarouselImpl *this$0_;
}

- (instancetype)initWithASCarouselImpl:(ASCarouselImpl *)outer$
                          withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASCarouselImpl_1)

__attribute__((unused)) static void ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(ASCarouselImpl_1 *self, ASCarouselImpl *outer$, NSString *type);

__attribute__((unused)) static ASCarouselImpl_1 *new_ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(ASCarouselImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCarouselImpl_1 *create_ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(ASCarouselImpl *outer$, NSString *type);


@interface ASCarouselImpl_1_1 : NSObject < ADXCarousel_Adapter > {
 @public
  ASCarouselImpl_1 *this$0_;
}

- (instancetype)initWithASCarouselImpl_1:(ASCarouselImpl_1 *)outer$;

- (int32_t)count;

- (void)populateWithADView:(ADView *)view
                   withInt:(int32_t)index;

- (void)onNewItemWithInt:(int32_t)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ASCarouselImpl_1_1)

__attribute__((unused)) static void ASCarouselImpl_1_1_initWithASCarouselImpl_1_(ASCarouselImpl_1_1 *self, ASCarouselImpl_1 *outer$);

__attribute__((unused)) static ASCarouselImpl_1_1 *new_ASCarouselImpl_1_1_initWithASCarouselImpl_1_(ASCarouselImpl_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCarouselImpl_1_1 *create_ASCarouselImpl_1_1_initWithASCarouselImpl_1_(ASCarouselImpl_1 *outer$);


@interface ASCarouselImpl_CarouselListener_NewItemListener : NSObject

@end

@interface ASCarouselImpl_NewItemListener : NSObject < ASCarouselImpl_CarouselListener_NewItemListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onNewItemWithInt:(int32_t)index;

- (id<JavaUtilMap>)getOnNewItemEventObjWithInt:(int32_t)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ASCarouselImpl_NewItemListener)

J2OBJC_FIELD_SETTER(ASCarouselImpl_NewItemListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASCarouselImpl_NewItemListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASCarouselImpl_NewItemListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASCarouselImpl_NewItemListener, action_, NSString *)

__attribute__((unused)) static void ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(ASCarouselImpl_NewItemListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASCarouselImpl_NewItemListener *new_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCarouselImpl_NewItemListener *create_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(ASCarouselImpl_NewItemListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASCarouselImpl_NewItemListener *new_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCarouselImpl_NewItemListener *create_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASCarouselImpl_NewItemListener)


NSString *ASCarouselImpl_LOCAL_NAME = @"androidx.constraintlayout.helper.widget.Carousel";
NSString *ASCarouselImpl_GROUP_NAME = @"androidx.constraintlayout.helper.widget.Carousel";

@implementation ASCarouselImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_firstView"])) withTypeWithNSString:@"id"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_previousState"])) withTypeWithNSString:@"id"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_nextState"])) withTypeWithNSString:@"id"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_infinite"])) withTypeWithNSString:@"boolean"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_forwardTransition"])) withTypeWithNSString:@"id"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_backwardTransition"])) withTypeWithNSString:@"id"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_touchUp_dampeningFactor"])) withTypeWithNSString:@"float"])) beforeChildAdd]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Carousel.carousel_touchUpMode", new_ASCarouselImpl_Carousel_touchUpMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_touchUpMode"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Carousel.carousel_touchUpMode"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_touchUp_velocityThreshold"])) withTypeWithNSString:@"float"])) beforeChildAdd]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Carousel.carousel_emptyViewsBehavior", new_ASCarouselImpl_Carousel_emptyViewsBehavior_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"carousel_emptyViewsBehavior"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Carousel.carousel_emptyViewsBehavior"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"constraint_referenced_ids"])) withTypeWithNSString:@"BarrierImpl.constraintReferencedIds"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"jumpToIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"jumpTolast"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"jumpToNext"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"jumpToPrevious"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transitionToIndex"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transitionToLast"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transitionToNext"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transitionToPrevious"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dataKey"])) withTypeWithNSString:@"String"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"childDataKey"])) withTypeWithNSString:@"String"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dataScopeKey"])) withTypeWithNSString:@"String"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"childDataScopeKey"])) withTypeWithNSString:@"String"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onNewItem"])) withTypeWithNSString:@"string"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCarouselImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASCarouselImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASCarouselImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASCarouselImpl_CarouselExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASCarouselImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASCarouselImpl_CarouselExt_initWithASCarouselImpl_(self);
  ASCarouselImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASCarouselImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASCarouselImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"carousel_firstView", @"carousel_previousState", @"carousel_nextState", @"carousel_infinite", @"carousel_forwardTransition", @"carousel_backwardTransition", @"carousel_touchUp_dampeningFactor", @"carousel_touchUpMode", @"carousel_touchUp_velocityThreshold", @"carousel_emptyViewsBehavior", @"constraint_referenced_ids", @"jumpToIndex", @"jumpTolast", @"jumpToNext", @"jumpToPrevious", @"transitionToIndex", @"transitionToLast", @"transitionToNext", @"transitionToPrevious", @"dataKey", @"childDataKey", @"dataScopeKey", @"childDataScopeKey", @"onNewItem" }, 24)) {
    case 0:
    {
      ASCarouselImpl_setFirstViewWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASCarouselImpl_setPreviousStateWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASCarouselImpl_setNextStateWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASCarouselImpl_setInfiniteWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASCarouselImpl_setForwardTransitionWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASCarouselImpl_setBackwardTransitionWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASCarouselImpl_setTouchUp_dampeningFactorWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASCarouselImpl_setTouchUpModeWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASCarouselImpl_setTouchUp_velocityThresholdWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASCarouselImpl_setEmptyViewsBehaviorWithId_(self, objValue);
    }
    break;
    case 10:
    {
      [((ADXCarousel *) nil_chk(carousel_)) setReferencedIdsWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class])];
    }
    break;
    case 11:
    {
      ASCarouselImpl_jumpToIndexWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 12:
    {
      ASCarouselImpl_jumpTolast(self);
    }
    break;
    case 13:
    {
      ASCarouselImpl_jumpToNext(self);
    }
    break;
    case 14:
    {
      ASCarouselImpl_jumpToPrevious(self);
    }
    break;
    case 15:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id index = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"index"] withNSString:@"int"];
        id delay = [self quickConvertWithId:[data getWithId:@"delay"] withNSString:@"int"];
        ASCarouselImpl_transitionToIndexWithInt_withInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(index, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(delay, [JavaLangInteger class]))) intValue]);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id index = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"index"] withNSString:@"int"];
          id delay = [self quickConvertWithId:[data getWithId:@"delay"] withNSString:@"int"];
          ASCarouselImpl_transitionToIndexWithInt_withInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(index, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(delay, [JavaLangInteger class]))) intValue]);
        }
      }
    }
    break;
    case 16:
    {
      ASCarouselImpl_transitionToLastWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 17:
    {
      ASCarouselImpl_transitionToNextWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 18:
    {
      ASCarouselImpl_transitionToPreviousWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 19:
    {
      ASCarouselImpl_setDataKeyWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASCarouselImpl_setChildDataKeyWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASCarouselImpl_setDataScopeKeyWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASCarouselImpl_setChildDataScopeKeyWithId_(self, objValue);
    }
    break;
    case 23:
    {
      ASCarouselImpl_setNewItemListenerWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"carousel_firstView", @"carousel_previousState", @"carousel_nextState", @"carousel_infinite", @"carousel_forwardTransition", @"carousel_backwardTransition", @"carousel_touchUp_dampeningFactor", @"carousel_touchUpMode", @"carousel_touchUp_velocityThreshold", @"carousel_emptyViewsBehavior", @"constraint_referenced_ids" }, 11)) {
    case 0:
    {
      return ASCarouselImpl_getFirstView(self);
    }
    case 1:
    {
      return ASCarouselImpl_getPreviousState(self);
    }
    case 2:
    {
      return ASCarouselImpl_getNextState(self);
    }
    case 3:
    {
      return ASCarouselImpl_getInfinite(self);
    }
    case 4:
    {
      return ASCarouselImpl_getForwardTransition(self);
    }
    case 5:
    {
      return ASCarouselImpl_getBackwardTransition(self);
    }
    case 6:
    {
      return ASCarouselImpl_getTouchUp_dampeningFactor(self);
    }
    case 7:
    {
      return ASCarouselImpl_getTouchUpMode(self);
    }
    case 8:
    {
      return ASCarouselImpl_getTouchUp_velocityThreshold(self);
    }
    case 9:
    {
      return ASCarouselImpl_getEmptyViewsBehavior(self);
    }
    case 10:
    {
      return [((ADXCarousel *) nil_chk(carousel_)) getReferencedIds];
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (void)initialized {
  [super initialized];
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(fragment_)) getEventBus])) onWithNSString:@"layoutDescription" withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(self, @"layoutDescription") } count:1 type:ASEventBusHandler_class_()]];
}

- (void)updateModelRecurseWithASIWidget:(id<ASIWidget>)widget
                                 withId:(id)data {
  ASCarouselImpl_updateModelRecurseWithASIWidget_withId_(self, widget, data);
}

- (void)setNewItemListenerWithId:(id)objValue {
  ASCarouselImpl_setNewItemListenerWithId_(self, objValue);
}

- (void)setChildDataScopeKeyWithId:(id)objValue {
  ASCarouselImpl_setChildDataScopeKeyWithId_(self, objValue);
}

- (void)setDataScopeKeyWithId:(id)objValue {
  ASCarouselImpl_setDataScopeKeyWithId_(self, objValue);
}

- (void)setChildDataKeyWithId:(id)objValue {
  ASCarouselImpl_setChildDataKeyWithId_(self, objValue);
}

- (void)setDataKeyWithId:(id)objValue {
  ASCarouselImpl_setDataKeyWithId_(self, objValue);
}

- (void)transitionToLastWithInt:(int32_t)delay {
  ASCarouselImpl_transitionToLastWithInt_(self, delay);
}

- (void)transitionToNextWithInt:(int32_t)delay {
  ASCarouselImpl_transitionToNextWithInt_(self, delay);
}

- (void)transitionToPreviousWithInt:(int32_t)delay {
  ASCarouselImpl_transitionToPreviousWithInt_(self, delay);
}

- (void)jumpToPrevious {
  ASCarouselImpl_jumpToPrevious(self);
}

- (void)jumpToNext {
  ASCarouselImpl_jumpToNext(self);
}

- (void)jumpTolast {
  ASCarouselImpl_jumpTolast(self);
}

- (void)transitionToIndexWithInt:(int32_t)index
                         withInt:(int32_t)delay {
  ASCarouselImpl_transitionToIndexWithInt_withInt_(self, index, delay);
}

- (void)jumpToIndexWithInt:(int32_t)index {
  ASCarouselImpl_jumpToIndexWithInt_(self, index);
}

- (void)setEmptyViewsBehaviorWithId:(id)objValue {
  ASCarouselImpl_setEmptyViewsBehaviorWithId_(self, objValue);
}

- (void)setTouchUpModeWithId:(id)objValue {
  ASCarouselImpl_setTouchUpModeWithId_(self, objValue);
}

- (void)setTouchUp_velocityThresholdWithId:(id)objValue {
  ASCarouselImpl_setTouchUp_velocityThresholdWithId_(self, objValue);
}

- (void)setTouchUp_dampeningFactorWithId:(id)objValue {
  ASCarouselImpl_setTouchUp_dampeningFactorWithId_(self, objValue);
}

- (void)setBackwardTransitionWithId:(id)objValue {
  ASCarouselImpl_setBackwardTransitionWithId_(self, objValue);
}

- (void)setForwardTransitionWithId:(id)objValue {
  ASCarouselImpl_setForwardTransitionWithId_(self, objValue);
}

- (void)setInfiniteWithId:(id)objValue {
  ASCarouselImpl_setInfiniteWithId_(self, objValue);
}

- (void)setNextStateWithId:(id)objValue {
  ASCarouselImpl_setNextStateWithId_(self, objValue);
}

- (void)setPreviousStateWithId:(id)objValue {
  ASCarouselImpl_setPreviousStateWithId_(self, objValue);
}

- (void)setFirstViewWithId:(id)objValue {
  ASCarouselImpl_setFirstViewWithId_(self, objValue);
}

- (id)getEmptyViewsBehavior {
  return ASCarouselImpl_getEmptyViewsBehavior(self);
}

- (id)getTouchUp_velocityThreshold {
  return ASCarouselImpl_getTouchUp_velocityThreshold(self);
}

- (id)getTouchUpMode {
  return ASCarouselImpl_getTouchUpMode(self);
}

- (id)getTouchUp_dampeningFactor {
  return ASCarouselImpl_getTouchUp_dampeningFactor(self);
}

- (id)getForwardTransition {
  return ASCarouselImpl_getForwardTransition(self);
}

- (id)getBackwardTransition {
  return ASCarouselImpl_getBackwardTransition(self);
}

- (id)getInfinite {
  return ASCarouselImpl_getInfinite(self);
}

- (id)getNextState {
  return ASCarouselImpl_getNextState(self);
}

- (id)getPreviousState {
  return ASCarouselImpl_getPreviousState(self);
}

- (id)getFirstView {
  return ASCarouselImpl_getFirstView(self);
}

- (void)initItems {
  ASCarouselImpl_initItems(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXCarousel *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASCarouselImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)createView {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 35, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(initialized);
  methods[12].selector = @selector(updateModelRecurseWithASIWidget:withId:);
  methods[13].selector = @selector(setNewItemListenerWithId:);
  methods[14].selector = @selector(setChildDataScopeKeyWithId:);
  methods[15].selector = @selector(setDataScopeKeyWithId:);
  methods[16].selector = @selector(setChildDataKeyWithId:);
  methods[17].selector = @selector(setDataKeyWithId:);
  methods[18].selector = @selector(transitionToLastWithInt:);
  methods[19].selector = @selector(transitionToNextWithInt:);
  methods[20].selector = @selector(transitionToPreviousWithInt:);
  methods[21].selector = @selector(jumpToPrevious);
  methods[22].selector = @selector(jumpToNext);
  methods[23].selector = @selector(jumpTolast);
  methods[24].selector = @selector(transitionToIndexWithInt:withInt:);
  methods[25].selector = @selector(jumpToIndexWithInt:);
  methods[26].selector = @selector(setEmptyViewsBehaviorWithId:);
  methods[27].selector = @selector(setTouchUpModeWithId:);
  methods[28].selector = @selector(setTouchUp_velocityThresholdWithId:);
  methods[29].selector = @selector(setTouchUp_dampeningFactorWithId:);
  methods[30].selector = @selector(setBackwardTransitionWithId:);
  methods[31].selector = @selector(setForwardTransitionWithId:);
  methods[32].selector = @selector(setInfiniteWithId:);
  methods[33].selector = @selector(setNextStateWithId:);
  methods[34].selector = @selector(setPreviousStateWithId:);
  methods[35].selector = @selector(setFirstViewWithId:);
  methods[36].selector = @selector(getEmptyViewsBehavior);
  methods[37].selector = @selector(getTouchUp_velocityThreshold);
  methods[38].selector = @selector(getTouchUpMode);
  methods[39].selector = @selector(getTouchUp_dampeningFactor);
  methods[40].selector = @selector(getForwardTransition);
  methods[41].selector = @selector(getBackwardTransition);
  methods[42].selector = @selector(getInfinite);
  methods[43].selector = @selector(getNextState);
  methods[44].selector = @selector(getPreviousState);
  methods[45].selector = @selector(getFirstView);
  methods[46].selector = @selector(initItems);
  methods[47].selector = @selector(asNativeWidget);
  methods[48].selector = @selector(checkIosVersionWithNSString:);
  methods[49].selector = @selector(setIdWithNSString:);
  methods[50].selector = @selector(setVisibleWithBoolean:);
  methods[51].selector = @selector(requestLayout);
  methods[52].selector = @selector(invalidate);
  methods[53].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[54].selector = @selector(createView);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADXCarousel;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dataKey_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataScopeKey_", "LASModelScope;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "childDataKey_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "childDataScopeKey_", "LASModelScope;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "adapter_", "LADXCarousel_Adapter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_CarouselImpl_", "LASCarouselImpl_CarouselListener_NewItemListener;", .constantValue.asLong = 0, 0x2, 44, -1, -1, -1 },
    { "carousel_", "LADXCarousel;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "updateModelRecurse", "LASIWidget;LNSObject;", "setNewItemListener", "LNSObject;", "setChildDataScopeKey", "setDataScopeKey", "setChildDataKey", "setDataKey", "transitionToLast", "I", "transitionToNext", "transitionToPrevious", "transitionToIndex", "II", "jumpToIndex", "setEmptyViewsBehavior", "setTouchUpMode", "setTouchUp_velocityThreshold", "setTouchUp_dampeningFactor", "setBackwardTransition", "setForwardTransition", "setInfinite", "setNextState", "setPreviousState", "setFirstView", "checkIosVersion", "setId", "setVisible", "Z", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", &ASCarouselImpl_LOCAL_NAME, &ASCarouselImpl_GROUP_NAME, "listener", "LASCarouselImpl_Carousel_touchUpMode;LASCarouselImpl_Carousel_emptyViewsBehavior;LASCarouselImpl_CarouselExt;LASCarouselImpl_CarouselListener;LASCarouselImpl_NewItemListener;" };
  static const J2ObjcClassInfo _ASCarouselImpl = { "CarouselImpl", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 55, 11, -1, 45, -1, -1, -1 };
  return &_ASCarouselImpl;
}

@end

void ASCarouselImpl_init(ASCarouselImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASCarouselImpl_GROUP_NAME, ASCarouselImpl_LOCAL_NAME);
  self->dataKey_ = @"data";
  self->dataScopeKey_ = JreLoadEnum(ASModelScope, view);
  self->childDataKey_ = @"data";
  self->childDataScopeKey_ = JreLoadEnum(ASModelScope, local);
}

ASCarouselImpl *new_ASCarouselImpl_init() {
  J2OBJC_NEW_IMPL(ASCarouselImpl, init)
}

ASCarouselImpl *create_ASCarouselImpl_init() {
  J2OBJC_CREATE_IMPL(ASCarouselImpl, init)
}

void ASCarouselImpl_initWithNSString_(ASCarouselImpl *self, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASCarouselImpl_GROUP_NAME, localname);
  self->dataKey_ = @"data";
  self->dataScopeKey_ = JreLoadEnum(ASModelScope, view);
  self->childDataKey_ = @"data";
  self->childDataScopeKey_ = JreLoadEnum(ASModelScope, local);
}

ASCarouselImpl *new_ASCarouselImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASCarouselImpl, initWithNSString_, localname)
}

ASCarouselImpl *create_ASCarouselImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl, initWithNSString_, localname)
}

void ASCarouselImpl_initWithNSString_withNSString_(ASCarouselImpl *self, NSString *groupName, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localname);
  self->dataKey_ = @"data";
  self->dataScopeKey_ = JreLoadEnum(ASModelScope, view);
  self->childDataKey_ = @"data";
  self->childDataScopeKey_ = JreLoadEnum(ASModelScope, local);
}

ASCarouselImpl *new_ASCarouselImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASCarouselImpl, initWithNSString_withNSString_, groupName, localname)
}

ASCarouselImpl *create_ASCarouselImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASCarouselImpl_setWidgetOnNativeClass(ASCarouselImpl *self) {
  ((ASUIView*) self.uiView).widget = self;
}

void ASCarouselImpl_updateModelRecurseWithASIWidget_withId_(ASCarouselImpl *self, id<ASIWidget> widget, id data) {
  [((id<ASIWidget>) nil_chk(widget)) storeModelToScopeWithNSString:self->childDataKey_ withASModelScope:self->childDataScopeKey_ withId:data];
  [widget applyModelToWidget];
  if ([ASHasWidgets_class_() isInstance:widget]) {
    for (id<ASIWidget> __strong childWidget in nil_chk([((id<ASHasWidgets>) cast_check(widget, ASHasWidgets_class_())) getWidgets])) {
      ASCarouselImpl_updateModelRecurseWithASIWidget_withId_(self, childWidget, data);
    }
  }
}

void ASCarouselImpl_setNewItemListenerWithId_(ASCarouselImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->listener_CarouselImpl_ = new_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    self->listener_CarouselImpl_ = (id<ASCarouselImpl_CarouselListener_NewItemListener>) cast_check(objValue, ASCarouselImpl_CarouselListener_NewItemListener_class_());
  }
}

void ASCarouselImpl_setChildDataScopeKeyWithId_(ASCarouselImpl *self, id objValue) {
  self->childDataScopeKey_ = ASModelScope_valueOfWithNSString_((NSString *) cast_chk(objValue, [NSString class]));
}

void ASCarouselImpl_setDataScopeKeyWithId_(ASCarouselImpl *self, id objValue) {
  self->dataScopeKey_ = ASModelScope_valueOfWithNSString_((NSString *) cast_chk(objValue, [NSString class]));
}

void ASCarouselImpl_setChildDataKeyWithId_(ASCarouselImpl *self, id objValue) {
  self->childDataKey_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASCarouselImpl_setDataKeyWithId_(ASCarouselImpl *self, id objValue) {
  self->dataKey_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASCarouselImpl_transitionToLastWithInt_(ASCarouselImpl *self, int32_t delay) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] - 1 != [((ADXCarousel *) nil_chk(self->carousel_)) getCurrentIndex]) {
      [((ADXCarousel *) nil_chk(self->carousel_)) transitionToIndexWithInt:[self->carousel_ getCount] - 1 withInt:delay];
    }
  }
}

void ASCarouselImpl_transitionToNextWithInt_(ASCarouselImpl *self, int32_t delay) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    if (![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(ASCarouselImpl_getInfinite(self), [JavaLangBoolean class]))) booleanValue]) {
      if ([((ADXCarousel *) nil_chk(self->carousel_)) getCurrentIndex] == [((ADXCarousel *) nil_chk(self->carousel_)) getCount] - 1) {
        return;
      }
    }
    id<ADViewParent> cParent = [((ADXCarousel *) nil_chk(self->carousel_)) getParent];
    if ([cParent isKindOfClass:[ADXMotionLayout class]]) {
      [((ADXMotionLayout *) nil_chk(((ADXMotionLayout *) cParent))) transitionToStateWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASCarouselImpl_getNextState(self), [JavaLangInteger class]))) intValue] withInt:delay];
    }
  }
}

void ASCarouselImpl_transitionToPreviousWithInt_(ASCarouselImpl *self, int32_t delay) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    if (![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(ASCarouselImpl_getInfinite(self), [JavaLangBoolean class]))) booleanValue]) {
      if ([((ADXCarousel *) nil_chk(self->carousel_)) getCurrentIndex] == 0) {
        return;
      }
    }
    id<ADViewParent> cParent = [((ADXCarousel *) nil_chk(self->carousel_)) getParent];
    if ([cParent isKindOfClass:[ADXMotionLayout class]]) {
      [((ADXMotionLayout *) nil_chk(((ADXMotionLayout *) cParent))) transitionToStateWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASCarouselImpl_getPreviousState(self), [JavaLangInteger class]))) intValue] withInt:delay];
    }
  }
}

void ASCarouselImpl_jumpToPrevious(ASCarouselImpl *self) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    if (![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(ASCarouselImpl_getInfinite(self), [JavaLangBoolean class]))) booleanValue]) {
      if ([((ADXCarousel *) nil_chk(self->carousel_)) getCurrentIndex] == 0) {
        return;
      }
    }
    [((ADXCarousel *) nil_chk(self->carousel_)) jumpToIndexWithInt:[self->carousel_ getCurrentIndex] - 1];
  }
}

void ASCarouselImpl_jumpToNext(ASCarouselImpl *self) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    if (![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(ASCarouselImpl_getInfinite(self), [JavaLangBoolean class]))) booleanValue]) {
      if ([((ADXCarousel *) nil_chk(self->carousel_)) getCurrentIndex] == [((ADXCarousel *) nil_chk(self->carousel_)) getCount] - 1) {
        return;
      }
    }
    [((ADXCarousel *) nil_chk(self->carousel_)) jumpToIndexWithInt:[self->carousel_ getCurrentIndex] + 1];
  }
}

void ASCarouselImpl_jumpTolast(ASCarouselImpl *self) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    [((ADXCarousel *) nil_chk(self->carousel_)) jumpToIndexWithInt:[self->carousel_ getCount] - 1];
  }
}

void ASCarouselImpl_transitionToIndexWithInt_withInt_(ASCarouselImpl *self, int32_t index, int32_t delay) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    [((ADXCarousel *) nil_chk(self->carousel_)) transitionToIndexWithInt:index withInt:delay];
  }
}

void ASCarouselImpl_jumpToIndexWithInt_(ASCarouselImpl *self, int32_t index) {
  if ([((ADXCarousel *) nil_chk(self->carousel_)) getCount] > 0) {
    [((ADXCarousel *) nil_chk(self->carousel_)) jumpToIndexWithInt:index];
  }
}

void ASCarouselImpl_setEmptyViewsBehaviorWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setEmptyViewBehaviorWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCarouselImpl_setTouchUpModeWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setTouchUpModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCarouselImpl_setTouchUp_velocityThresholdWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setVelocityThresholdWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
}

void ASCarouselImpl_setTouchUp_dampeningFactorWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setDampeningWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
}

void ASCarouselImpl_setBackwardTransitionWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setBackwardTransitionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCarouselImpl_setForwardTransitionWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setForwardTransitionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCarouselImpl_setInfiniteWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setInfiniteCarouselWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASCarouselImpl_setNextStateWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setNextStateWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCarouselImpl_setPreviousStateWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setPreviousStateWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCarouselImpl_setFirstViewWithId_(ASCarouselImpl *self, id objValue) {
  [((ADXCarousel *) nil_chk(self->carousel_)) setFirstViewReferenceWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASCarouselImpl_getEmptyViewsBehavior(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getEmptyViewBehavior]);
}

id ASCarouselImpl_getTouchUp_velocityThreshold(ASCarouselImpl *self) {
  return JavaLangFloat_valueOfWithFloat_([((ADXCarousel *) nil_chk(self->carousel_)) getVelocityThreshold]);
}

id ASCarouselImpl_getTouchUpMode(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getTouchUpMode]);
}

id ASCarouselImpl_getTouchUp_dampeningFactor(ASCarouselImpl *self) {
  return JavaLangFloat_valueOfWithFloat_([((ADXCarousel *) nil_chk(self->carousel_)) getDampening]);
}

id ASCarouselImpl_getForwardTransition(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getForwardTransition]);
}

id ASCarouselImpl_getBackwardTransition(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getBackwardTransition]);
}

id ASCarouselImpl_getInfinite(ASCarouselImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADXCarousel *) nil_chk(self->carousel_)) isInfiniteCarousel]);
}

id ASCarouselImpl_getNextState(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getNextState]);
}

id ASCarouselImpl_getPreviousState(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getPreviousState]);
}

id ASCarouselImpl_getFirstView(ASCarouselImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADXCarousel *) nil_chk(self->carousel_)) getFirstViewReference]);
}

void ASCarouselImpl_initItems(ASCarouselImpl *self) {
  [((ADXCarousel *) nil_chk(self->carousel_)) updateItems];
}

void ASCarouselImpl_nativeCreateWithJavaUtilMap_(ASCarouselImpl *self, id<JavaUtilMap> params) {
  self->carousel_ = self->measurableView_;
  [self createView];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCarouselImpl)

J2OBJC_NAME_MAPPING(ASCarouselImpl, "com.ashera.constraintlayout", "AS")

@implementation ASCarouselImpl_Carousel_touchUpMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCarouselImpl_Carousel_touchUpMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASCarouselImpl;" };
  static const J2ObjcClassInfo _ASCarouselImpl_Carousel_touchUpMode = { "Carousel_touchUpMode", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASCarouselImpl_Carousel_touchUpMode;
}

@end

void ASCarouselImpl_Carousel_touchUpMode_init(ASCarouselImpl_Carousel_touchUpMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"immediateStop" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"carryVelocity" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASCarouselImpl_Carousel_touchUpMode *new_ASCarouselImpl_Carousel_touchUpMode_init() {
  J2OBJC_NEW_IMPL(ASCarouselImpl_Carousel_touchUpMode, init)
}

ASCarouselImpl_Carousel_touchUpMode *create_ASCarouselImpl_Carousel_touchUpMode_init() {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_Carousel_touchUpMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCarouselImpl_Carousel_touchUpMode)

@implementation ASCarouselImpl_Carousel_emptyViewsBehavior

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCarouselImpl_Carousel_emptyViewsBehavior_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASCarouselImpl;" };
  static const J2ObjcClassInfo _ASCarouselImpl_Carousel_emptyViewsBehavior = { "Carousel_emptyViewsBehavior", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASCarouselImpl_Carousel_emptyViewsBehavior;
}

@end

void ASCarouselImpl_Carousel_emptyViewsBehavior_init(ASCarouselImpl_Carousel_emptyViewsBehavior *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"invisible" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"gone" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x8)];
  }
}

ASCarouselImpl_Carousel_emptyViewsBehavior *new_ASCarouselImpl_Carousel_emptyViewsBehavior_init() {
  J2OBJC_NEW_IMPL(ASCarouselImpl_Carousel_emptyViewsBehavior, init)
}

ASCarouselImpl_Carousel_emptyViewsBehavior *create_ASCarouselImpl_Carousel_emptyViewsBehavior_init() {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_Carousel_emptyViewsBehavior, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCarouselImpl_Carousel_emptyViewsBehavior)

@implementation ASCarouselImpl_CarouselExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)onAttachedToWindow {
  @try {
    {
      [super onAttachedToWindow];
    }
  }
  @catch (JavaLangException *e) {
  }
}

- (instancetype)initWithASCarouselImpl:(ASCarouselImpl *)outer$ {
  ASCarouselImpl_CarouselExt_initWithASCarouselImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASCarouselImpl_CarouselExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(onAttachedToWindow);
  methods[2].selector = @selector(initWithASCarouselImpl:);
  methods[3].selector = @selector(onMeasureWithInt:withInt:);
  methods[4].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[6].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[7].selector = @selector(newInstanceWithASIWidget:);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[9].selector = @selector(getMethods);
  methods[10].selector = @selector(initialized);
  methods[11].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[12].selector = @selector(drawableStateChanged);
  methods[13].selector = @selector(inflateViewWithNSString:);
  methods[14].selector = @selector(remeasure);
  methods[15].selector = @selector(removeFromParent);
  methods[16].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[17].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[18].selector = @selector(offsetTopAndBottomWithInt:);
  methods[19].selector = @selector(offsetLeftAndRightWithInt:);
  methods[20].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[21].selector = @selector(setVisibilityWithInt:);
  methods[22].selector = @selector(setState0WithId:);
  methods[23].selector = @selector(setState1WithId:);
  methods[24].selector = @selector(setState2WithId:);
  methods[25].selector = @selector(setState3WithId:);
  methods[26].selector = @selector(setState4WithId:);
  methods[27].selector = @selector(state0);
  methods[28].selector = @selector(state1);
  methods[29].selector = @selector(state2);
  methods[30].selector = @selector(state3);
  methods[31].selector = @selector(state4);
  methods[32].selector = @selector(stateYes);
  methods[33].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCarouselImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 33, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 34, -1 },
  };
  static const void *ptrTable[] = { "LASCarouselImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASCarouselImpl_CarouselExt = { "CarouselExt", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 34, 5, 0, -1, -1, -1, -1 };
  return &_ASCarouselImpl_CarouselExt;
}

@end

void ASCarouselImpl_CarouselExt_initWithASCarouselImpl_(ASCarouselImpl_CarouselExt *self, ASCarouselImpl *outer$) {
  self->this$0_ = outer$;
  ADXCarousel_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASCarouselImpl_CarouselExt *new_ASCarouselImpl_CarouselExt_initWithASCarouselImpl_(ASCarouselImpl *outer$) {
  J2OBJC_NEW_IMPL(ASCarouselImpl_CarouselExt, initWithASCarouselImpl_, outer$)
}

ASCarouselImpl_CarouselExt *create_ASCarouselImpl_CarouselExt_initWithASCarouselImpl_(ASCarouselImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_CarouselExt, initWithASCarouselImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCarouselImpl_CarouselExt)

@implementation ASCarouselImpl_1

- (instancetype)initWithASCarouselImpl:(ASCarouselImpl *)outer$
                          withNSString:(NSString *)type {
  ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  this$0_->adapter_ = new_ASCarouselImpl_1_1_initWithASCarouselImpl_1_(self);
  [((ADXCarousel *) nil_chk(this$0_->carousel_)) setAdapterWithADXCarousel_Adapter:this$0_->adapter_];
  id<ADViewParent> cParent = [((ADXCarousel *) nil_chk(this$0_->carousel_)) getParent];
  if ([cParent isKindOfClass:[ADXMotionLayout class]]) {
    ADXMotionLayout *motionLayout = ((ADXMotionLayout *) cParent);
    if ([((ADXMotionLayout *) nil_chk(motionLayout)) getConstraintSetIds] != nil) {
      if ([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASCarouselImpl_getTouchUpMode(this$0_), [JavaLangInteger class]))) intValue] == ADXCarousel_TOUCH_UP_CARRY_ON) {
        ADXMotionScene_Transition *forward = [motionLayout getTransitionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASCarouselImpl_getForwardTransition(this$0_), [JavaLangInteger class]))) intValue]];
        if (forward != nil) {
          [forward setOnTouchUpWithInt:ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE];
        }
        ADXMotionScene_Transition *backward = [motionLayout getTransitionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASCarouselImpl_getBackwardTransition(this$0_), [JavaLangInteger class]))) intValue]];
        if (backward != nil) {
          [backward setOnTouchUpWithInt:ADXMotionLayout_TOUCH_UP_DECELERATE_AND_COMPLETE];
        }
      }
      ASCarouselImpl_initItems(this$0_);
      [((id<ADXCarousel_Adapter>) nil_chk(this$0_->adapter_)) onNewItemWithInt:0];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASCarouselImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCarouselImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASCarouselImpl;LNSString;", "doPerform", "LNSObject;", "LASCarouselImpl;", "initialized" };
  static const J2ObjcClassInfo _ASCarouselImpl_1 = { "", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x8000, 2, 1, 3, -1, 4, -1, -1 };
  return &_ASCarouselImpl_1;
}

@end

void ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(ASCarouselImpl_1 *self, ASCarouselImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASCarouselImpl_1 *new_ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(ASCarouselImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASCarouselImpl_1, initWithASCarouselImpl_withNSString_, outer$, type)
}

ASCarouselImpl_1 *create_ASCarouselImpl_1_initWithASCarouselImpl_withNSString_(ASCarouselImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_1, initWithASCarouselImpl_withNSString_, outer$, type)
}

@implementation ASCarouselImpl_1_1

- (instancetype)initWithASCarouselImpl_1:(ASCarouselImpl_1 *)outer$ {
  ASCarouselImpl_1_1_initWithASCarouselImpl_1_(self, outer$);
  return self;
}

- (int32_t)count {
  id<JavaUtilList> objects = ASPluginInvoker_getListWithId_([this$0_->this$0_ getModelFromScopeWithNSString:this$0_->this$0_->dataKey_ withASModelScope:this$0_->this$0_->dataScopeKey_]);
  if (objects == nil) {
    return 0;
  }
  return [objects size];
}

- (void)populateWithADView:(ADView *)view
                   withInt:(int32_t)index {
  id<JavaUtilList> objects = ASPluginInvoker_getListWithId_([this$0_->this$0_ getModelFromScopeWithNSString:this$0_->this$0_->dataKey_ withASModelScope:this$0_->this$0_->dataScopeKey_]);
  if (objects != nil && [ASILifeCycleDecorator_class_() isInstance:view]) {
    ASCarouselImpl_updateModelRecurseWithASIWidget_withId_(this$0_->this$0_, [((id<ASILifeCycleDecorator>) nil_chk(((id<ASILifeCycleDecorator>) cast_check(view, ASILifeCycleDecorator_class_())))) getWidget], [objects getWithInt:index]);
  }
}

- (void)onNewItemWithInt:(int32_t)index {
  if (this$0_->this$0_->listener_CarouselImpl_ != nil) {
    [this$0_->this$0_->listener_CarouselImpl_ onNewItemWithInt:index];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASCarouselImpl_1:);
  methods[1].selector = @selector(count);
  methods[2].selector = @selector(populateWithADView:withInt:);
  methods[3].selector = @selector(onNewItemWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCarouselImpl_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASCarouselImpl_1;", "populate", "LADView;I", "onNewItem", "I", "doPerformWithId:" };
  static const J2ObjcClassInfo _ASCarouselImpl_1_1 = { "", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x8000, 4, 1, 0, -1, 5, -1, -1 };
  return &_ASCarouselImpl_1_1;
}

@end

void ASCarouselImpl_1_1_initWithASCarouselImpl_1_(ASCarouselImpl_1_1 *self, ASCarouselImpl_1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASCarouselImpl_1_1 *new_ASCarouselImpl_1_1_initWithASCarouselImpl_1_(ASCarouselImpl_1 *outer$) {
  J2OBJC_NEW_IMPL(ASCarouselImpl_1_1, initWithASCarouselImpl_1_, outer$)
}

ASCarouselImpl_1_1 *create_ASCarouselImpl_1_1_initWithASCarouselImpl_1_(ASCarouselImpl_1 *outer$) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_1_1, initWithASCarouselImpl_1_, outer$)
}

@implementation ASCarouselImpl_CarouselListener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCarouselImpl_CarouselListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASCarouselImpl;", "LASCarouselImpl_CarouselListener_NewItemListener;" };
  static const J2ObjcClassInfo _ASCarouselImpl_CarouselListener = { "CarouselListener", "com.ashera.constraintlayout", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, 1, -1, -1, -1 };
  return &_ASCarouselImpl_CarouselListener;
}

@end

void ASCarouselImpl_CarouselListener_init(ASCarouselImpl_CarouselListener *self) {
  NSObject_init(self);
}

ASCarouselImpl_CarouselListener *new_ASCarouselImpl_CarouselListener_init() {
  J2OBJC_NEW_IMPL(ASCarouselImpl_CarouselListener, init)
}

ASCarouselImpl_CarouselListener *create_ASCarouselImpl_CarouselListener_init() {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_CarouselListener, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCarouselImpl_CarouselListener)

@implementation ASCarouselImpl_CarouselListener_NewItemListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onNewItemWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNewItem", "I", "LASCarouselImpl_CarouselListener;" };
  static const J2ObjcClassInfo _ASCarouselImpl_CarouselListener_NewItemListener = { "NewItemListener", "com.ashera.constraintlayout", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASCarouselImpl_CarouselListener_NewItemListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASCarouselImpl_CarouselListener_NewItemListener)

@implementation ASCarouselImpl_NewItemListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onNewItemWithInt:(int32_t)index {
  if (action_ == nil || [action_ isEqual:@"onNewItem"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onNewItem"];
    id<JavaUtilMap> obj = [self getOnNewItemEventObjWithInt:index];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index) } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnNewItemEventObjWithInt:(int32_t)index {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"newitem"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"index", JavaLangInteger_valueOfWithInt_(index));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onNewItem" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onNewItemWithInt:);
  methods[4].selector = @selector(getOnNewItemEventObjWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onNewItem", "I", "getOnNewItemEventObj", "(I)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASCarouselImpl;" };
  static const J2ObjcClassInfo _ASCarouselImpl_NewItemListener = { "NewItemListener", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASCarouselImpl_NewItemListener;
}

@end

void ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(ASCarouselImpl_NewItemListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASCarouselImpl_NewItemListener *new_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASCarouselImpl_NewItemListener, initWithASIWidget_withNSString_, w, strValue)
}

ASCarouselImpl_NewItemListener *create_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_NewItemListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(ASCarouselImpl_NewItemListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASCarouselImpl_NewItemListener *new_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASCarouselImpl_NewItemListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASCarouselImpl_NewItemListener *create_ASCarouselImpl_NewItemListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASCarouselImpl_NewItemListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCarouselImpl_NewItemListener)
